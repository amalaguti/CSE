[
    3, 
    {
        "api": {
            "tgt": {
                "get_target_group_minions": {
                    "detailed": {
                        "doc": "Get the set of minions that match a target group according to the currently\ncached minion data. Minions are keyed by master:\n\n.. code-block:: python\n    {\n        'master1': ['minion1', 'minion2', 'minion3'],\n        'master2': ['minion8', 'minion9']\n    }\n\nDocumentation on how targets work in SaltStack Enterprise are here: :ref:`targets`\n\nParameters\n:tgt_uuid: The UUID of the target group for which to resolve minions.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetTargetGroupMinionsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target group UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "Target data", 
                                            "title": "tgt"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetTargetGroupMinionsSchema"
                        }, 
                        "parameters": [
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "tgt", 
                                null
                            ]
                        ], 
                        "signature": "get_target_group_minions(tgt_uuid: typing.Union[uuid.UUID, NoneType], tgt: typing.Union[dict, NoneType])"
                    }, 
                    "formatted": "signature: 'get_target_group_minions(tgt_uuid: typing.Union[uuid.UUID, NoneType],\n  tgt: typing.Union[dict, NoneType])'\nreturns: Dict\ndoc: \"Get the set of minions that match a target group according to the currently\\n\\\n  cached minion data. Minions are keyed by master:\\n\\n.. code-block:: python\\n   \\\n  \\ {\\n        'master1': ['minion1', 'minion2', 'minion3'],\\n        'master2': ['minion8',\\\n  \\ 'minion9']\\n    }\\n\\nDocumentation on how targets work in SaltStack Enterprise\\\n  \\ are here: :ref:`targets`\\n\\nParameters\\n:tgt_uuid: The UUID of the target group\\\n  \\ for which to resolve minions.\"\nschema:\n  $ref: '#/definitions/GetTargetGroupMinionsSchema'\n  definitions:\n    GetTargetGroupMinionsSchema:\n      properties:\n        tgt:\n          description: Target data\n          title: tgt\n          type: object\n        tgt_uuid:\n          description: Target group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - tgt_uuid\n  - null\n- - tgt\n  - null"
                }, 
                "get_target_group_access": {
                    "detailed": {
                        "doc": "Get the access metadata for a target group.\n\nParameters\n:tgt_uuid: Retrieve metadata for target group matching this UUID.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetTargetGroupAccessSchema": {
                                    "required": [
                                        "tgt_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target group UUID", 
                                            "title": "tgt_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetTargetGroupAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "tgt_uuid"
                            ]
                        ], 
                        "signature": "get_target_group_access(tgt_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'get_target_group_access(tgt_uuid: UUID)'\nreturns: Dict\ndoc: 'Get the access metadata for a target group.\n\n\n  Parameters\n\n  :tgt_uuid: Retrieve metadata for target group matching this UUID.'\nschema:\n  $ref: '#/definitions/GetTargetGroupAccessSchema'\n  definitions:\n    GetTargetGroupAccessSchema:\n      properties:\n        tgt_uuid:\n          description: Target group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required:\n      - tgt_uuid\n      type: object\nparameters:\n- - tgt_uuid"
                }, 
                "save_target_group_access": {
                    "detailed": {
                        "doc": "Save the access metadata for a target group.\n\nParameters\n:tgt_uuid: Save metadata for target group matching this UUID.\n:access_payload: Dictionary containing role names as keys and a list of allowed\n                 access types as values", 
                        "returns": "typing.Union[bool, uuid.UUID]", 
                        "schema": {
                            "definitions": {
                                "SaveTargetGroupAccessSchema": {
                                    "required": [
                                        "access_payload", 
                                        "tgt_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target group UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "access_payload": {
                                            "type": "object", 
                                            "description": "Dictionary containing access data for a resource. The keys need to be valid role names. The values need to be valid access permissions", 
                                            "title": "access_payload"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveTargetGroupAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "tgt_uuid"
                            ], 
                            [
                                "access_payload"
                            ]
                        ], 
                        "signature": "save_target_group_access(tgt_uuid: UUID, access_payload: Dict)"
                    }, 
                    "formatted": "signature: 'save_target_group_access(tgt_uuid: UUID, access_payload: Dict)'\nreturns: typing.Union[bool, uuid.UUID]\ndoc: \"Save the access metadata for a target group.\\n\\nParameters\\n:tgt_uuid: Save\\\n  \\ metadata for target group matching this UUID.\\n:access_payload: Dictionary containing\\\n  \\ role names as keys and a list of allowed\\n                 access types as values\"\nschema:\n  $ref: '#/definitions/SaveTargetGroupAccessSchema'\n  definitions:\n    SaveTargetGroupAccessSchema:\n      properties:\n        access_payload:\n          description: Dictionary containing access data for a resource. The keys\n            need to be valid role names. The values need to be valid access permissions\n          title: access_payload\n          type: object\n        tgt_uuid:\n          description: Target group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required:\n      - access_payload\n      - tgt_uuid\n      type: object\nparameters:\n- - tgt_uuid\n- - access_payload"
                }, 
                "get_target_group": {
                    "detailed": {
                        "doc": "Retrieve details for a target group. For more on targets, see :ref:`targets`\n\nParameters\n:tgt_uuid: Retrieve details for this target group.\n:master_id: Retrieve details for master with this ID (not UUID).\n:pillar_uuid: Retrieve target details associated with this pillar (UUID).\n:name: Search the target group name for this text.\n:desc: Search the target group description for this text.\n:include_pillar_data: Include attached pillar data in the return payload (default False).\n:sort_by: Sort by this field, either 'name' or 'desc'.\n:reverse: Return results in the reverse order.\n:limit: Limit maximum target groups to this number (default 50).\n:page: Return target groups from this page (offset = page * limit).\n\nUse either ``tgt_uuid`` or ``master_id``, but not both.\nIf ``tgt_uuid`` is used, other filters are not applied.\n\nget_target_group() example:\n\n.. code-block:: python\n\n    client.api.tgt.get_target_group()\n\n\nThe return payload is a dictionary with the following elements:\n\n.. code-block:: python\n\n    {\n        'count': 100,     # total target group count\n        'limit': 50,  # results count\n        'results': [...]  # target groups\n    }\n\n\nExample:\n\n.. code-block:: python\n\n    client.api.tgt.get_target_group(tgt_uuid='7f93b928-388b-11e6-b133-346895ecb8f3')\n\n    RPCResponse(\n        riq=5,\n        ret= {\n            u'results': [\n                {u'name': u'All Minions',\n                 u'tgt': {u'*':\n                     {u'tgt_type': u'compound',\n                      u'tgt': u'*'}},\n                 u'uuid': u'7f93b928-388b-11e6-b133-346895ecb8f3',\n                 u'pillars': [],\n                 u'metadata': {u'auth':\n                                   {u'access':\n                                       {u'Superuser':\n                                           {u'write': False,\n                                            u'read': True,\n                                            u'discover': True,\n                                            u'delete': False},\n                                        u'Administrator':\n                                            {u'write': False,\n                                             u'read': True,\n                                             u'discover': True,\n                                             u'delete': False},\n                                        u'User':\n                                            {u'write': False,\n                                             u'read': True,\n                                             u'discover': True,\n                                             u'delete': False}},\n                                        u'owner':\n                                            {u'username': u'--<{internal-access}>--',\n                                             u'config_name': u'internal',\n                                             u'uuid': u'c74f8bee-5ead-453e-8c86-344a4780c053'}}},\n                 u'desc': u''}],\n            u'count': 1,\n            u'limit': 1\n        },\n        u'error'= None,\n        u'warnings'= [])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetTargetGroupv2Schema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "include_pillar_data": {
                                            "type": "boolean", 
                                            "description": "Return attached pillar data with each target group", 
                                            "title": "include_pillar_data"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "reverse": {
                                            "type": "boolean", 
                                            "description": "Sort ascending (False), or descending (True)", 
                                            "title": "reverse"
                                        }, 
                                        "pillar_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Pillar UUID", 
                                            "title": "pillar_uuid"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "name", 
                                                "desc"
                                            ], 
                                            "type": "string", 
                                            "description": "Field to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target Group UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "desc": {
                                            "type": "string", 
                                            "description": "String to match against target group description", 
                                            "title": "desc"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "String to match against target group name", 
                                            "title": "name"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetTargetGroupv2Schema"
                        }, 
                        "parameters": [
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "pillar_uuid", 
                                null
                            ], 
                            [
                                "name", 
                                null
                            ], 
                            [
                                "desc", 
                                null
                            ], 
                            [
                                "include_pillar_data", 
                                false
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "page", 
                                0
                            ]
                        ], 
                        "signature": "get_target_group(tgt_uuid: typing.Union[uuid.UUID, NoneType], master_id: typing.Union[str, NoneType], pillar_uuid: typing.Union[uuid.UUID, NoneType], name: typing.Union[str, NoneType], desc: typing.Union[str, NoneType], include_pillar_data: typing.Union[bool, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], limit: typing.Union[int, NoneType] = 50, page: typing.Union[int, NoneType])"
                    }, 
                    "formatted": "signature: 'get_target_group(tgt_uuid: typing.Union[uuid.UUID, NoneType], master_id:\n  typing.Union[str, NoneType], pillar_uuid: typing.Union[uuid.UUID, NoneType], name:\n  typing.Union[str, NoneType], desc: typing.Union[str, NoneType], include_pillar_data:\n  typing.Union[bool, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool,\n  NoneType], limit: typing.Union[int, NoneType] = 50, page: typing.Union[int, NoneType])'\nreturns: Dict\ndoc: \"Retrieve details for a target group. For more on targets, see :ref:`targets`\\n\\\n  \\nParameters\\n:tgt_uuid: Retrieve details for this target group.\\n:master_id: Retrieve\\\n  \\ details for master with this ID (not UUID).\\n:pillar_uuid: Retrieve target details\\\n  \\ associated with this pillar (UUID).\\n:name: Search the target group name for this\\\n  \\ text.\\n:desc: Search the target group description for this text.\\n:include_pillar_data:\\\n  \\ Include attached pillar data in the return payload (default False).\\n:sort_by:\\\n  \\ Sort by this field, either 'name' or 'desc'.\\n:reverse: Return results in the\\\n  \\ reverse order.\\n:limit: Limit maximum target groups to this number (default 50).\\n\\\n  :page: Return target groups from this page (offset = page * limit).\\n\\nUse either\\\n  \\ ``tgt_uuid`` or ``master_id``, but not both.\\nIf ``tgt_uuid`` is used, other filters\\\n  \\ are not applied.\\n\\nget_target_group() example:\\n\\n.. code-block:: python\\n\\n\\\n  \\    client.api.tgt.get_target_group()\\n\\n\\nThe return payload is a dictionary with\\\n  \\ the following elements:\\n\\n.. code-block:: python\\n\\n    {\\n        'count': 100,\\\n  \\     # total target group count\\n        'limit': 50,  # results count\\n      \\\n  \\  'results': [...]  # target groups\\n    }\\n\\n\\nExample:\\n\\n.. code-block:: python\\n\\\n  \\n    client.api.tgt.get_target_group(tgt_uuid='7f93b928-388b-11e6-b133-346895ecb8f3')\\n\\\n  \\n    RPCResponse(\\n        riq=5,\\n        ret= {\\n            u'results': [\\n\\\n  \\                {u'name': u'All Minions',\\n                 u'tgt': {u'*':\\n  \\\n  \\                   {u'tgt_type': u'compound',\\n                      u'tgt': u'*'}},\\n\\\n  \\                 u'uuid': u'7f93b928-388b-11e6-b133-346895ecb8f3',\\n          \\\n  \\       u'pillars': [],\\n                 u'metadata': {u'auth':\\n             \\\n  \\                      {u'access':\\n                                       {u'Superuser':\\n\\\n  \\                                           {u'write': False,\\n                \\\n  \\                            u'read': True,\\n                                  \\\n  \\          u'discover': True,\\n                                            u'delete':\\\n  \\ False},\\n                                        u'Administrator':\\n         \\\n  \\                                   {u'write': False,\\n                        \\\n  \\                     u'read': True,\\n                                         \\\n  \\    u'discover': True,\\n                                             u'delete':\\\n  \\ False},\\n                                        u'User':\\n                  \\\n  \\                          {u'write': False,\\n                                 \\\n  \\            u'read': True,\\n                                             u'discover':\\\n  \\ True,\\n                                             u'delete': False}},\\n    \\\n  \\                                    u'owner':\\n                               \\\n  \\             {u'username': u'--<{internal-access}>--',\\n                      \\\n  \\                       u'config_name': u'internal',\\n                         \\\n  \\                    u'uuid': u'c74f8bee-5ead-453e-8c86-344a4780c053'}}},\\n    \\\n  \\             u'desc': u''}],\\n            u'count': 1,\\n            u'limit': 1\\n\\\n  \\        },\\n        u'error'= None,\\n        u'warnings'= [])\"\nschema:\n  $ref: '#/definitions/GetTargetGroupv2Schema'\n  definitions:\n    GetTargetGroupv2Schema:\n      properties:\n        desc:\n          description: String to match against target group description\n          title: desc\n          type: string\n        include_pillar_data:\n          description: Return attached pillar data with each target group\n          title: include_pillar_data\n          type: boolean\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        name:\n          description: String to match against target group name\n          title: name\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        pillar_uuid:\n          description: Pillar UUID\n          format: uuid\n          title: pillar_uuid\n          type: string\n        reverse:\n          description: Sort ascending (False), or descending (True)\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Field to sort by\n          enum:\n          - name\n          - desc\n          enumNames: []\n          title: sort_by\n          type: string\n        tgt_uuid:\n          description: Target Group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - tgt_uuid\n  - null\n- - master_id\n  - null\n- - pillar_uuid\n  - null\n- - name\n  - null\n- - desc\n  - null\n- - include_pillar_data\n  - false\n- - sort_by\n  - null\n- - reverse\n  - false\n- - limit\n  - 50\n- - page\n  - 0"
                }, 
                "save_target_group": {
                    "detailed": {
                        "doc": "Create a new or update an existing target group.\n\nDocumentation on how targets work in SaltStack Enterprise are here: :ref:`targets`\n\nParameters\n:tgt: Target dictionary.  See below for example.\n:name: Name of the target group\n:tgt_uuid: UUID for the target group.  If empty, generate a new UUID. Otherwise ``tgt_uuid`` must point to an existing target group.\n:desc: Text description of this target group.\n:pillar_uuids: List of UUIDs referring to related pillar structures.\n:wait_for_match: If ``True``, block this call until the target group is successfully constructed.  This can take some time on large RaaS installations. If ``False`` then return immediately.\n\nThe ``tgt`` argument takes a dictionary that looks like\n\n.. code-block:: json\n\n    {<master_id or '*'>:\n         {u'tgt_type': <target type>,\n          u'tgt': <target string>}}\n\n``tgt_type`` is the type of target: ``glob``, ``grain``, ``grain_pcre``, ``pillar``, ``pillar_pcre``, ``list``,\n``ipcidr``, ``pcre``, or ``node``.\n\n``tgt`` is the actual target.  For ``glob`` this would be any string matching\nminion IDs and utilizing shell-globbing characters (``*``, ``?``, ``[]``, etc).\n\nFor ``compound`` see Salt's description of compound target indicators for a full\nexplanation, but an overview is below:\n\nCompound matchers allow very granular minion targeting using any of Salt's matchers.\nThe default matcher is a glob match, just as with CLI and top file matching.\nTo match using anything other than a glob, prefix the match string with the\nappropriate letter from the table below, followed by an ``@`` sign.\n\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| Letter | Match Type         | Example                                                         | Alt Delimiter? |\n+========+====================+=================================================================+================+\n| G      | Grains glob        | ``G@os:Ubuntu``                                                 | Yes            |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| E      | PCRE Minion ID     | ``E@web\\d|\\.(dev|qa|prod)\\.loc``                                | No             |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| P      | Grains PCRE        | ``P@os:(RedHat|Fedora|CentOS)``                                 | Yes            |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| L      | List of minions    | ``L@minion1.example.com, minion3.domain.com or bl*.domain.com`` | No             |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| I      | Pillar glob        | ``I@pdata:foobar``                                              | Yes            |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| J      | Pillar PCRE        | ``J@pdata:^(foo|bar)$``                                         | Yes            |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| S      | Subnet/IP address  | ``S@192.168.1.0/24 or S@192.168.1.100``                         | No             |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n| R      | Range cluster      | ``R@%foo.bar``                                                  | No             |\n+--------+--------------------+-----------------------------------------------------------------+----------------+\n\nMatchers can be joined using boolean ``and``, ``or``, and ``not`` operators.\n\nHere is an example for creating a target group with a compound target:\n\n.. code-block:: python\n\n    wintgtresult = c.api.tgt.save_target_group(\n                       name='Windows',\n                       desc='Windows',\n                       tgt={'*':{'tgt_type':'compound', 'tgt':'G@os_family:Windows'}})\n\nsave_target_group() example:\n\n.. code-block:: python\n\n    client.api.tgt.save_target_group(tgt={'SSE_master': {'tgt_type': 'grain', 'tgt': 'G@kernel:Linux'}}, name='NewTestLinux')\n\nUpdate existing target example:\n\n.. code-block:: python\n\n    client.api.tgt.save_target_group(tgt={'SSE_master': {'tgt_type': 'grain', 'tgt': 'G@kernel:Linux'}}, name='Linux', tgt_uuid='f2ace00c-4fa0-11e6-88bc-080027a7289c', desc='newdescription')", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "SaveTargetGroupSchema": {
                                    "required": [
                                        "tgt"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "name": {
                                            "type": "string", 
                                            "description": "Target group name", 
                                            "title": "name"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "Target definition: {\"<master_id>\": {\"tgt_type\": \"...\", \"tgt\": \"...\"}, ...}", 
                                            "title": "tgt"
                                        }, 
                                        "wait_for_match": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Wait for target definition matching routines", 
                                            "title": "wait_for_match"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target group UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "pillar_uuids": {
                                            "items": {
                                                "type": "string", 
                                                "title": "pillar_uuids"
                                            }, 
                                            "type": "array", 
                                            "description": "UUIDs of pillar data to associate with the target group", 
                                            "title": "pillar_uuids"
                                        }, 
                                        "desc": {
                                            "type": "string", 
                                            "description": "Target group description", 
                                            "title": "desc"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveTargetGroupSchema"
                        }, 
                        "parameters": [
                            [
                                "tgt"
                            ], 
                            [
                                "name", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "desc", 
                                null
                            ], 
                            [
                                "pillar_uuids", 
                                null
                            ], 
                            [
                                "wait_for_match", 
                                false
                            ]
                        ], 
                        "signature": "save_target_group(tgt: Dict, name: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], desc: typing.Union[str, NoneType], pillar_uuids: typing.Union[typing.List[uuid.UUID], NoneType], wait_for_match: bool)"
                    }, 
                    "formatted": "signature: 'save_target_group(tgt: Dict, name: typing.Union[str, NoneType], tgt_uuid:\n  typing.Union[uuid.UUID, NoneType], desc: typing.Union[str, NoneType], pillar_uuids:\n  typing.Union[typing.List[uuid.UUID], NoneType], wait_for_match: bool)'\nreturns: '''unicode'''\ndoc: \"Create a new or update an existing target group.\\n\\nDocumentation on how targets\\\n  \\ work in SaltStack Enterprise are here: :ref:`targets`\\n\\nParameters\\n:tgt: Target\\\n  \\ dictionary.  See below for example.\\n:name: Name of the target group\\n:tgt_uuid:\\\n  \\ UUID for the target group.  If empty, generate a new UUID. Otherwise ``tgt_uuid``\\\n  \\ must point to an existing target group.\\n:desc: Text description of this target\\\n  \\ group.\\n:pillar_uuids: List of UUIDs referring to related pillar structures.\\n\\\n  :wait_for_match: If ``True``, block this call until the target group is successfully\\\n  \\ constructed.  This can take some time on large RaaS installations. If ``False``\\\n  \\ then return immediately.\\n\\nThe ``tgt`` argument takes a dictionary that looks\\\n  \\ like\\n\\n.. code-block:: json\\n\\n    {<master_id or '*'>:\\n         {u'tgt_type':\\\n  \\ <target type>,\\n          u'tgt': <target string>}}\\n\\n``tgt_type`` is the type\\\n  \\ of target: ``glob``, ``grain``, ``grain_pcre``, ``pillar``, ``pillar_pcre``, ``list``,\\n\\\n  ``ipcidr``, ``pcre``, or ``node``.\\n\\n``tgt`` is the actual target.  For ``glob``\\\n  \\ this would be any string matching\\nminion IDs and utilizing shell-globbing characters\\\n  \\ (``*``, ``?``, ``[]``, etc).\\n\\nFor ``compound`` see Salt's description of compound\\\n  \\ target indicators for a full\\nexplanation, but an overview is below:\\n\\nCompound\\\n  \\ matchers allow very granular minion targeting using any of Salt's matchers.\\n\\\n  The default matcher is a glob match, just as with CLI and top file matching.\\nTo\\\n  \\ match using anything other than a glob, prefix the match string with the\\nappropriate\\\n  \\ letter from the table below, followed by an ``@`` sign.\\n\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | Letter | Match Type         | Example                                        \\\n  \\                 | Alt Delimiter? |\\n+========+====================+=================================================================+================+\\n\\\n  | G      | Grains glob        | ``G@os:Ubuntu``                                \\\n  \\                 | Yes            |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | E      | PCRE Minion ID     | ``E@web\\\\d|\\\\.(dev|qa|prod)\\\\.loc``            \\\n  \\                    | No             |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | P      | Grains PCRE        | ``P@os:(RedHat|Fedora|CentOS)``                \\\n  \\                 | Yes            |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | L      | List of minions    | ``L@minion1.example.com, minion3.domain.com or bl*.domain.com``\\\n  \\ | No             |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | I      | Pillar glob        | ``I@pdata:foobar``                             \\\n  \\                 | Yes            |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | J      | Pillar PCRE        | ``J@pdata:^(foo|bar)$``                        \\\n  \\                 | Yes            |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | S      | Subnet/IP address  | ``S@192.168.1.0/24 or S@192.168.1.100``        \\\n  \\                 | No             |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  | R      | Range cluster      | ``R@%foo.bar``                                 \\\n  \\                 | No             |\\n+--------+--------------------+-----------------------------------------------------------------+----------------+\\n\\\n  \\nMatchers can be joined using boolean ``and``, ``or``, and ``not`` operators.\\n\\\n  \\nHere is an example for creating a target group with a compound target:\\n\\n.. code-block::\\\n  \\ python\\n\\n    wintgtresult = c.api.tgt.save_target_group(\\n                  \\\n  \\     name='Windows',\\n                       desc='Windows',\\n                \\\n  \\       tgt={'*':{'tgt_type':'compound', 'tgt':'G@os_family:Windows'}})\\n\\nsave_target_group()\\\n  \\ example:\\n\\n.. code-block:: python\\n\\n    client.api.tgt.save_target_group(tgt={'SSE_master':\\\n  \\ {'tgt_type': 'grain', 'tgt': 'G@kernel:Linux'}}, name='NewTestLinux')\\n\\nUpdate\\\n  \\ existing target example:\\n\\n.. code-block:: python\\n\\n    client.api.tgt.save_target_group(tgt={'SSE_master':\\\n  \\ {'tgt_type': 'grain', 'tgt': 'G@kernel:Linux'}}, name='Linux', tgt_uuid='f2ace00c-4fa0-11e6-88bc-080027a7289c',\\\n  \\ desc='newdescription')\"\nschema:\n  $ref: '#/definitions/SaveTargetGroupSchema'\n  definitions:\n    SaveTargetGroupSchema:\n      properties:\n        desc:\n          description: Target group description\n          title: desc\n          type: string\n        name:\n          description: Target group name\n          title: name\n          type: string\n        pillar_uuids:\n          description: UUIDs of pillar data to associate with the target group\n          items:\n            title: pillar_uuids\n            type: string\n          title: pillar_uuids\n          type: array\n        tgt:\n          description: 'Target definition: {\"<master_id>\": {\"tgt_type\": \"...\", \"tgt\":\n            \"...\"}, ...}'\n          title: tgt\n          type: object\n        tgt_uuid:\n          description: Target group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n        wait_for_match:\n          default: false\n          description: Wait for target definition matching routines\n          title: wait_for_match\n          type: boolean\n      required:\n      - tgt\n      type: object\nparameters:\n- - tgt\n- - name\n  - null\n- - tgt_uuid\n  - null\n- - desc\n  - null\n- - pillar_uuids\n  - null\n- - wait_for_match\n  - false"
                }, 
                "delete_target_group": {
                    "detailed": {
                        "doc": "Delete a target group.\n\nParameters\n:tgt_uuid: UUID referring to the target group to delete.\n:force: Force deletion of target group and scheduled jobs depending on it.\n\n:raises FailedResourceDependency: The target group has one or more schedules that depend on it and `force` is false.\n                                  The details of the exception contain the results of get_schedules with the\n                                  dependent schedules.", 
                        "schema": {
                            "definitions": {
                                "DeleteTargetGroupSchema": {
                                    "required": [
                                        "tgt_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target group UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "force": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Force deletion of target group.", 
                                            "title": "force"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteTargetGroupSchema"
                        }, 
                        "parameters": [
                            [
                                "tgt_uuid"
                            ], 
                            [
                                "force", 
                                false
                            ]
                        ], 
                        "signature": "delete_target_group(tgt_uuid: UUID, force: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_target_group(tgt_uuid: UUID, force: typing.Union[bool, NoneType])'\ndoc: \"Delete a target group.\\n\\nParameters\\n:tgt_uuid: UUID referring to the target\\\n  \\ group to delete.\\n:force: Force deletion of target group and scheduled jobs depending\\\n  \\ on it.\\n\\n:raises FailedResourceDependency: The target group has one or more schedules\\\n  \\ that depend on it and `force` is false.\\n                                  The\\\n  \\ details of the exception contain the results of get_schedules with the\\n     \\\n  \\                             dependent schedules.\"\nschema:\n  $ref: '#/definitions/DeleteTargetGroupSchema'\n  definitions:\n    DeleteTargetGroupSchema:\n      properties:\n        force:\n          default: false\n          description: Force deletion of target group.\n          title: force\n          type: boolean\n        tgt_uuid:\n          description: Target group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required:\n      - tgt_uuid\n      type: object\nparameters:\n- - tgt_uuid\n- - force\n  - false"
                }, 
                "__doc__": "Target groups RPC interface"
            }, 
            "api": {
                "get_versions": {
                    "detailed": {
                        "doc": "Return information on various software components used by RaaS.\n\n.. code-block:: python\n\n    from sseapiclient.tornado import SyncClient\n    client = SyncClient.connect('http://localhost', 'root', 'salt')\n    client.api.api.get_versions()\n\n.. code-block:: python\n\n    RPCResponse(\n        riq=4,\n        ret={'python': '3.5.3 (default, Sep 14 2017, 22:58:41)',\n             'opts': {'sql': {'dialect': 'postgresql',\n                              'host': 'localhost', 'pool_timeout': 10,\n                              'driver': 'psycopg2', 'pool_recycle': 3600},\n                      'customer_id': '43cab1f4-de60-4ab1-85b5-1d883c5c5d09'},\n                      'raas': {'raas': '5.2.0-762-g3a64d15' ...\n        error=None,\n        warnings=[])", 
                        "returns": "Dict", 
                        "signature": "get_versions()"
                    }, 
                    "formatted": "signature: get_versions()\nreturns: Dict\ndoc: \"Return information on various software components used by RaaS.\\n\\n.. code-block::\\\n  \\ python\\n\\n    from sseapiclient.tornado import SyncClient\\n    client = SyncClient.connect('http://localhost',\\\n  \\ 'root', 'salt')\\n    client.api.api.get_versions()\\n\\n.. code-block:: python\\n\\\n  \\n    RPCResponse(\\n        riq=4,\\n        ret={'python': '3.5.3 (default, Sep\\\n  \\ 14 2017, 22:58:41)',\\n             'opts': {'sql': {'dialect': 'postgresql',\\n\\\n  \\                              'host': 'localhost', 'pool_timeout': 10,\\n      \\\n  \\                        'driver': 'psycopg2', 'pool_recycle': 3600},\\n        \\\n  \\              'customer_id': '43cab1f4-de60-4ab1-85b5-1d883c5c5d09'},\\n       \\\n  \\               'raas': {'raas': '5.2.0-762-g3a64d15' ...\\n        error=None,\\n\\\n  \\        warnings=[])\""
                }, 
                "__doc__": "RPC API Handler", 
                "discover": {
                    "detailed": {
                        "doc": "Return the RPC resources, their methods and the methods documentation.\nThe RPC client calls this method on each connection and stores the result\nin the client object in ``_discovered_api``.\n\n:param dict or list include: filter document to only include listed sections\n\n.. code-block:: python\n\ninclude: {'<section-key>': '<sub-section-key>'} or ['<section1-key>']\n\n.. code-block:: python\n\n    from sseapiclient.tornado import SyncClient\n    client = SyncClient.connect('http://localhost', 'root', 'salt')\n    client.api.api.discover()\n\n    client.api.api.discover(include=['constants'])\n\n    client.api.api.discover(include={'constants': ['permissions', 'command-states']})", 
                        "returns": "Dict", 
                        "parameters": [
                            [
                                "include", 
                                null
                            ]
                        ], 
                        "signature": "discover(include: typing.Union[typing.Dict, typing.List, NoneType])"
                    }, 
                    "formatted": "signature: 'discover(include: typing.Union[typing.Dict, typing.List, NoneType])'\nreturns: Dict\ndoc: \"Return the RPC resources, their methods and the methods documentation.\\nThe\\\n  \\ RPC client calls this method on each connection and stores the result\\nin the\\\n  \\ client object in ``_discovered_api``.\\n\\n:param dict or list include: filter document\\\n  \\ to only include listed sections\\n\\n.. code-block:: python\\n\\ninclude: {'<section-key>':\\\n  \\ '<sub-section-key>'} or ['<section1-key>']\\n\\n.. code-block:: python\\n\\n    from\\\n  \\ sseapiclient.tornado import SyncClient\\n    client = SyncClient.connect('http://localhost',\\\n  \\ 'root', 'salt')\\n    client.api.api.discover()\\n\\n    client.api.api.discover(include=['constants'])\\n\\\n  \\n    client.api.api.discover(include={'constants': ['permissions', 'command-states']})\"\nparameters:\n- - include\n  - null"
                }
            }, 
            "sec": {
                "__doc__": null
            }, 
            "conf": {
                "__doc__": "The RPC endpoints for the master config interface"
            }, 
            "cloud": {
                "__doc__": "The RPC methods for the cloud interface"
            }, 
            "stats": {
                "db_health": {
                    "detailed": {
                        "doc": "Get database health status", 
                        "signature": "db_health()"
                    }, 
                    "formatted": "signature: db_health()\ndoc: Get database health status"
                }, 
                "null": {
                    "detailed": {
                        "doc": "Null RPC method to test the fastest RPC Api response", 
                        "signature": "null()"
                    }, 
                    "formatted": "signature: null()\ndoc: Null RPC method to test the fastest RPC Api response"
                }, 
                "__doc__": "RPC stats endpoint", 
                "get_queue_size": {
                    "detailed": {
                        "doc": "Get Celery queue size", 
                        "signature": "get_queue_size()"
                    }, 
                    "formatted": "signature: get_queue_size()\ndoc: Get Celery queue size"
                }
            }, 
            "masterfs": {
                "get_masterfs": {
                    "detailed": {
                        "doc": "Get a list of master filesystem files\n\nParameters\n:master_id: ID (not UUID) of master", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetMasterFsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }, 
                                        "saltenv": {
                                            "type": "string", 
                                            "title": "saltenv"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "master", 
                                                "saltenv", 
                                                "file"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "file": {
                                            "type": "string", 
                                            "title": "file"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMasterFsSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "saltenv", 
                                null
                            ], 
                            [
                                "file", 
                                null
                            ], 
                            [
                                "sort_by", 
                                "master"
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                50
                            ]
                        ], 
                        "signature": "get_masterfs(master_id: typing.Union[str, NoneType], saltenv: typing.Union[str, NoneType], file: typing.Union[str, NoneType], sort_by: typing.Union[str, NoneType] = master, reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 50)"
                    }, 
                    "formatted": "signature: 'get_masterfs(master_id: typing.Union[str, NoneType], saltenv: typing.Union[str,\n  NoneType], file: typing.Union[str, NoneType], sort_by: typing.Union[str, NoneType]\n  = master, reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType],\n  limit: typing.Union[int, NoneType] = 50)'\nreturns: Dict\ndoc: 'Get a list of master filesystem files\n\n\n  Parameters\n\n  :master_id: ID (not UUID) of master'\nschema:\n  $ref: '#/definitions/GetMasterFsSchema'\n  definitions:\n    GetMasterFsSchema:\n      properties:\n        file:\n          title: file\n          type: string\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        saltenv:\n          title: saltenv\n          type: string\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - master\n          - saltenv\n          - file\n          enumNames: []\n          title: sort_by\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - saltenv\n  - null\n- - file\n  - null\n- - sort_by\n  - master\n- - reverse\n  - false\n- - page\n  - 0\n- - limit\n  - 50"
                }, 
                "__doc__": "The RPC methods for the salt masters FS interface"
            }, 
            "ret": {
                "get_load": {
                    "detailed": {
                        "doc": "Return the load for the given JID from the given master.\n\nParameters\n:master_id: ID for the master (not UUID)\n:jid: Job ID.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetLoadSchema": {
                                    "required": [
                                        "jid", 
                                        "master_id"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "jid": {
                                            "minLength": 20, 
                                            "title": "jid", 
                                            "type": "string", 
                                            "description": "The JID(job ID)", 
                                            "maxLength": 20
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetLoadSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id"
                            ], 
                            [
                                "jid"
                            ]
                        ], 
                        "signature": "get_load(master_id: 'unicode', jid: 'unicode')"
                    }, 
                    "formatted": "signature: 'get_load(master_id: ''unicode'', jid: ''unicode'')'\nreturns: Dict\ndoc: 'Return the load for the given JID from the given master.\n\n\n  Parameters\n\n  :master_id: ID for the master (not UUID)\n\n  :jid: Job ID.'\nschema:\n  $ref: '#/definitions/GetLoadSchema'\n  definitions:\n    GetLoadSchema:\n      properties:\n        jid:\n          description: The JID(job ID)\n          maxLength: 20\n          minLength: 20\n          title: jid\n          type: string\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n      required:\n      - jid\n      - master_id\n      type: object\nparameters:\n- - master_id\n- - jid"
                }, 
                "get_jids": {
                    "detailed": {
                        "doc": "Get all Job IDs for a given range.  Warning, with no boundaries this\ncall can return a huge amount of data.\n\nMore information on jobs can be found here: :ref:`jobs`.\n\nParameters\n:start: Timestamp from which to start.\n:end: Timestamp at which to end.\n:limit: Maximum number of job entries to return.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetJidsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "start": {
                                            "minLength": 20, 
                                            "title": "start", 
                                            "type": "string", 
                                            "description": "Match JID's starting at value", 
                                            "maxLength": 20
                                        }, 
                                        "end": {
                                            "minLength": 20, 
                                            "title": "end", 
                                            "type": "string", 
                                            "description": "Match JID's ending at this value", 
                                            "maxLength": 20
                                        }, 
                                        "limit": {
                                            "format": "integer", 
                                            "type": "number", 
                                            "description": "Limit JID return entries to this value", 
                                            "title": "limit"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetJidsSchema"
                        }, 
                        "parameters": [
                            [
                                "start", 
                                null
                            ], 
                            [
                                "end", 
                                null
                            ], 
                            [
                                "limit", 
                                null
                            ]
                        ], 
                        "signature": "get_jids(start: typing.Union[str, NoneType], end: typing.Union[str, NoneType], limit: typing.Union[int, NoneType])"
                    }, 
                    "formatted": "signature: 'get_jids(start: typing.Union[str, NoneType], end: typing.Union[str, NoneType],\n  limit: typing.Union[int, NoneType])'\nreturns: Dict\ndoc: 'Get all Job IDs for a given range.  Warning, with no boundaries this\n\n  call can return a huge amount of data.\n\n\n  More information on jobs can be found here: :ref:`jobs`.\n\n\n  Parameters\n\n  :start: Timestamp from which to start.\n\n  :end: Timestamp at which to end.\n\n  :limit: Maximum number of job entries to return.'\nschema:\n  $ref: '#/definitions/GetJidsSchema'\n  definitions:\n    GetJidsSchema:\n      properties:\n        end:\n          description: Match JID's ending at this value\n          maxLength: 20\n          minLength: 20\n          title: end\n          type: string\n        limit:\n          description: Limit JID return entries to this value\n          format: integer\n          title: limit\n          type: number\n        start:\n          description: Match JID's starting at value\n          maxLength: 20\n          minLength: 20\n          title: start\n          type: string\n      required: []\n      type: object\nparameters:\n- - start\n  - null\n- - end\n  - null\n- - limit\n  - null"
                }, 
                "get_fun": {
                    "detailed": {
                        "doc": "Return a dictionary of the last function called for all minions.\nIncluding ``fun`` will restrict the result set to minions for which\n``fun`` was their last function called.\n\nParameters\n:fun: Limit result set to minions that called this function last.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetFunSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "fun": {
                                            "type": "string", 
                                            "description": "Function name", 
                                            "title": "fun"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetFunSchema"
                        }, 
                        "parameters": [
                            [
                                "fun", 
                                null
                            ]
                        ], 
                        "signature": "get_fun(fun: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'get_fun(fun: typing.Union[str, NoneType])'\nreturns: Dict\ndoc: 'Return a dictionary of the last function called for all minions.\n\n  Including ``fun`` will restrict the result set to minions for which\n\n  ``fun`` was their last function called.\n\n\n  Parameters\n\n  :fun: Limit result set to minions that called this function last.'\nschema:\n  $ref: '#/definitions/GetFunSchema'\n  definitions:\n    GetFunSchema:\n      properties:\n        fun:\n          description: Function name\n          title: fun\n          type: string\n      required: []\n      type: object\nparameters:\n- - fun\n  - null"
                }, 
                "get_jid": {
                    "detailed": {
                        "doc": "Get the results for a specific job by its job id (jid).\n\nMore information on jobs can be found here: :ref:`jobs`.\n\nParameters\n:jid: Job ID.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetJidSchema": {
                                    "required": [
                                        "jid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "jid": {
                                            "minLength": 20, 
                                            "title": "jid", 
                                            "type": "string", 
                                            "description": "The JID(job ID)", 
                                            "maxLength": 20
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetJidSchema"
                        }, 
                        "parameters": [
                            [
                                "jid"
                            ], 
                            [
                                "master_id", 
                                null
                            ]
                        ], 
                        "signature": "get_jid(jid: 'unicode', master_id: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'get_jid(jid: ''unicode'', master_id: typing.Union[str, NoneType])'\nreturns: Dict\ndoc: 'Get the results for a specific job by its job id (jid).\n\n\n  More information on jobs can be found here: :ref:`jobs`.\n\n\n  Parameters\n\n  :jid: Job ID.'\nschema:\n  $ref: '#/definitions/GetJidSchema'\n  definitions:\n    GetJidSchema:\n      properties:\n        jid:\n          description: The JID(job ID)\n          maxLength: 20\n          minLength: 20\n          title: jid\n          type: string\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n      required:\n      - jid\n      type: object\nparameters:\n- - jid\n- - master_id\n  - null"
                }, 
                "get_returns": {
                    "detailed": {
                        "doc": "Return job results from the job cache based on the provided arguments.\n\nFor more on job returns, see :ref:`job-results`.\n\nParameters\n:jid: Job ID.\n:master_id: Return results only for jobs run on this master.\n:minion_id: Return results only for jobs executed on this minion.\n:fun: Return results for this called function.\n:user: Restrict results to jobs executed by this user.\n:job_name: Filter by job_name\n:job_uuid: Return results for this job's UUID (not Job ID (jid))\n:tgt_name: Filter by tgt_name\n:tgt_uuid: Return job results executed via this target group.\n:match_tgt_uuid: Return job results for jobs matching this target group.\n:args: filter by an argument string\n:highstate: Return only results that were generated via highstate.\n:start: Return results starting from this timestamp.\n:end: Stop returning results at this timestamp.\n:limit: Limit results to this number of jobs.\n:has_errors: Return results for those jobs with errors.\n:sort_by: Return results sorted by minion_id, function, has_errors, or jid.\n:reverse: Return results sorted in the reverse order.\n:page: Return job results from this page. Page starts from 0.\n\nget_returns() example:\n\n.. code-block:: python\n\n    client.api.ret.get_returns()\n\n\nThe return payload is a dictionary with the following elements:\n\n.. code-block:: python\n\n    {\n        'count': 100,     # total job returns count\n        'limit': 50,  # results count\n        'results': [...]  # job returns\n    }\n\n\nExample:\n\n.. code-block:: python\n\n    client.api.ret.get_returns(jid='20150430164924016227')\n\n    RPCResponse(\n        { 'count': 1,\n          'limit': 1,\n          'results': [ { 'alter_time': '2018-06-29T21:29:37.720943',\n                         'full_ret': { '_stamp': '2015-04-30T16:49:24.379894',\n                                       'cmd': '_return',\n                                       'fun': 'pillar.items',\n                                       'fun_args': [],\n                                       'id': 'raas_test_ret_returns_minion',\n                                       'jid': '20150430164924016227',\n                                       'master_id': 'raas_test_ret_returns_master',\n                                       'retcode': 0,\n                                       'return': { 'baz': 'qux',\n                                                   'lxc-cluster': True,\n                                                   'qux': 'baz'},\n                                       'success': True},\n                         'fun': 'pillar.items',\n                         'fun_args': [],\n                         'has_errors': False,\n                         'jid': '20150430164924016227',\n                         'master': 'raas_test_ret_returns_master',\n                         'master_uuid': '5c56659b-0619-45bc-8ad7-e805c28d85ce',\n                         'minion_id': 'raas_test_ret_returns_minion',\n                         'return': {'baz': 'qux', 'lxc-cluster': True, 'qux': 'baz'}}]})", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetReturnsv2Schema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "match_tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID for matching Target Group", 
                                            "title": "match_tgt_uuid"
                                        }, 
                                        "jid": {
                                            "minLength": 20, 
                                            "title": "jid", 
                                            "type": "string", 
                                            "description": "The JID(job ID)", 
                                            "maxLength": 20
                                        }, 
                                        "end": {
                                            "minLength": 20, 
                                            "title": "end", 
                                            "type": "string", 
                                            "description": "Match JID's ending at this value", 
                                            "maxLength": 20
                                        }, 
                                        "reverse": {
                                            "type": "boolean", 
                                            "description": "Sort ascending (False), or descending (True)", 
                                            "title": "reverse"
                                        }, 
                                        "job_name": {
                                            "type": "string", 
                                            "description": "job name", 
                                            "title": "job_name"
                                        }, 
                                        "has_errors": {
                                            "type": "boolean", 
                                            "description": "Filter by a job that has errors (True, False)", 
                                            "title": "has_errors"
                                        }, 
                                        "args": {
                                            "type": "string", 
                                            "description": "args", 
                                            "title": "args"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "minion_id", 
                                                "master_id", 
                                                "fun", 
                                                "has_errors", 
                                                "jid", 
                                                "job_name", 
                                                "tgt_name", 
                                                "user", 
                                                "alter_time"
                                            ], 
                                            "type": "string", 
                                            "description": "Field to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Salt minion ID", 
                                            "title": "minion_id"
                                        }, 
                                        "start": {
                                            "minLength": 20, 
                                            "title": "start", 
                                            "type": "string", 
                                            "description": "Match JID's starting at value", 
                                            "maxLength": 20
                                        }, 
                                        "highstate": {
                                            "type": "boolean", 
                                            "description": "If true, match only highstate returns data", 
                                            "title": "highstate"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Job UUID", 
                                            "title": "job_uuid"
                                        }, 
                                        "limit": {
                                            "format": "integer", 
                                            "type": "number", 
                                            "description": "Limit JID return entries to this value", 
                                            "title": "limit"
                                        }, 
                                        "user": {
                                            "type": "string", 
                                            "description": "The user who created the job that generated the return data", 
                                            "title": "user"
                                        }, 
                                        "tgt_name": {
                                            "type": "string", 
                                            "description": "tgt name", 
                                            "title": "tgt_name"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "function name", 
                                            "title": "fun"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target Group UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetReturnsv2Schema"
                        }, 
                        "parameters": [
                            [
                                "jid", 
                                null
                            ], 
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "user", 
                                null
                            ], 
                            [
                                "job_name", 
                                null
                            ], 
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "tgt_name", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "match_tgt_uuid", 
                                null
                            ], 
                            [
                                "args", 
                                null
                            ], 
                            [
                                "highstate", 
                                null
                            ], 
                            [
                                "start", 
                                null
                            ], 
                            [
                                "end", 
                                null
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "has_errors", 
                                null
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "page", 
                                0
                            ]
                        ], 
                        "signature": "get_returns(jid: typing.Union[str, NoneType], master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], fun: typing.Union[str, NoneType], user: typing.Union[str, NoneType], job_name: typing.Union[str, NoneType], job_uuid: typing.Union[uuid.UUID, NoneType], tgt_name: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], match_tgt_uuid: typing.Union[uuid.UUID, NoneType], args: typing.Union[str, NoneType], highstate: typing.Union[bool, NoneType], start: typing.Union[str, NoneType], end: typing.Union[str, NoneType], limit: typing.Union[int, NoneType] = 50, has_errors: typing.Union[bool, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType])"
                    }, 
                    "formatted": "signature: 'get_returns(jid: typing.Union[str, NoneType], master_id: typing.Union[str,\n  NoneType], minion_id: typing.Union[str, NoneType], fun: typing.Union[str, NoneType],\n  user: typing.Union[str, NoneType], job_name: typing.Union[str, NoneType], job_uuid:\n  typing.Union[uuid.UUID, NoneType], tgt_name: typing.Union[str, NoneType], tgt_uuid:\n  typing.Union[uuid.UUID, NoneType], match_tgt_uuid: typing.Union[uuid.UUID, NoneType],\n  args: typing.Union[str, NoneType], highstate: typing.Union[bool, NoneType], start:\n  typing.Union[str, NoneType], end: typing.Union[str, NoneType], limit: typing.Union[int,\n  NoneType] = 50, has_errors: typing.Union[bool, NoneType], sort_by: typing.Union[str,\n  NoneType], reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType])'\nreturns: Dict\ndoc: \"Return job results from the job cache based on the provided arguments.\\n\\nFor\\\n  \\ more on job returns, see :ref:`job-results`.\\n\\nParameters\\n:jid: Job ID.\\n:master_id:\\\n  \\ Return results only for jobs run on this master.\\n:minion_id: Return results only\\\n  \\ for jobs executed on this minion.\\n:fun: Return results for this called function.\\n\\\n  :user: Restrict results to jobs executed by this user.\\n:job_name: Filter by job_name\\n\\\n  :job_uuid: Return results for this job's UUID (not Job ID (jid))\\n:tgt_name: Filter\\\n  \\ by tgt_name\\n:tgt_uuid: Return job results executed via this target group.\\n:match_tgt_uuid:\\\n  \\ Return job results for jobs matching this target group.\\n:args: filter by an argument\\\n  \\ string\\n:highstate: Return only results that were generated via highstate.\\n:start:\\\n  \\ Return results starting from this timestamp.\\n:end: Stop returning results at\\\n  \\ this timestamp.\\n:limit: Limit results to this number of jobs.\\n:has_errors: Return\\\n  \\ results for those jobs with errors.\\n:sort_by: Return results sorted by minion_id,\\\n  \\ function, has_errors, or jid.\\n:reverse: Return results sorted in the reverse\\\n  \\ order.\\n:page: Return job results from this page. Page starts from 0.\\n\\nget_returns()\\\n  \\ example:\\n\\n.. code-block:: python\\n\\n    client.api.ret.get_returns()\\n\\n\\nThe\\\n  \\ return payload is a dictionary with the following elements:\\n\\n.. code-block::\\\n  \\ python\\n\\n    {\\n        'count': 100,     # total job returns count\\n       \\\n  \\ 'limit': 50,  # results count\\n        'results': [...]  # job returns\\n    }\\n\\\n  \\n\\nExample:\\n\\n.. code-block:: python\\n\\n    client.api.ret.get_returns(jid='20150430164924016227')\\n\\\n  \\n    RPCResponse(\\n        { 'count': 1,\\n          'limit': 1,\\n          'results':\\\n  \\ [ { 'alter_time': '2018-06-29T21:29:37.720943',\\n                         'full_ret':\\\n  \\ { '_stamp': '2015-04-30T16:49:24.379894',\\n                                  \\\n  \\     'cmd': '_return',\\n                                       'fun': 'pillar.items',\\n\\\n  \\                                       'fun_args': [],\\n                      \\\n  \\                 'id': 'raas_test_ret_returns_minion',\\n                      \\\n  \\                 'jid': '20150430164924016227',\\n                             \\\n  \\          'master_id': 'raas_test_ret_returns_master',\\n                      \\\n  \\                 'retcode': 0,\\n                                       'return':\\\n  \\ { 'baz': 'qux',\\n                                                   'lxc-cluster':\\\n  \\ True,\\n                                                   'qux': 'baz'},\\n   \\\n  \\                                    'success': True},\\n                       \\\n  \\  'fun': 'pillar.items',\\n                         'fun_args': [],\\n          \\\n  \\               'has_errors': False,\\n                         'jid': '20150430164924016227',\\n\\\n  \\                         'master': 'raas_test_ret_returns_master',\\n          \\\n  \\               'master_uuid': '5c56659b-0619-45bc-8ad7-e805c28d85ce',\\n       \\\n  \\                  'minion_id': 'raas_test_ret_returns_minion',\\n              \\\n  \\           'return': {'baz': 'qux', 'lxc-cluster': True, 'qux': 'baz'}}]})\"\nschema:\n  $ref: '#/definitions/GetReturnsv2Schema'\n  definitions:\n    GetReturnsv2Schema:\n      properties:\n        args:\n          description: args\n          title: args\n          type: string\n        end:\n          description: Match JID's ending at this value\n          maxLength: 20\n          minLength: 20\n          title: end\n          type: string\n        fun:\n          description: function name\n          title: fun\n          type: string\n        has_errors:\n          description: Filter by a job that has errors (True, False)\n          title: has_errors\n          type: boolean\n        highstate:\n          description: If true, match only highstate returns data\n          title: highstate\n          type: boolean\n        jid:\n          description: The JID(job ID)\n          maxLength: 20\n          minLength: 20\n          title: jid\n          type: string\n        job_name:\n          description: job name\n          title: job_name\n          type: string\n        job_uuid:\n          description: Job UUID\n          format: uuid\n          title: job_uuid\n          type: string\n        limit:\n          description: Limit JID return entries to this value\n          format: integer\n          title: limit\n          type: number\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        match_tgt_uuid:\n          description: UUID for matching Target Group\n          format: uuid\n          title: match_tgt_uuid\n          type: string\n        minion_id:\n          description: Salt minion ID\n          title: minion_id\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          description: Sort ascending (False), or descending (True)\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Field to sort by\n          enum:\n          - minion_id\n          - master_id\n          - fun\n          - has_errors\n          - jid\n          - job_name\n          - tgt_name\n          - user\n          - alter_time\n          enumNames: []\n          title: sort_by\n          type: string\n        start:\n          description: Match JID's starting at value\n          maxLength: 20\n          minLength: 20\n          title: start\n          type: string\n        tgt_name:\n          description: tgt name\n          title: tgt_name\n          type: string\n        tgt_uuid:\n          description: Target Group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n        user:\n          description: The user who created the job that generated the return data\n          title: user\n          type: string\n      required: []\n      type: object\nparameters:\n- - jid\n  - null\n- - master_id\n  - null\n- - minion_id\n  - null\n- - fun\n  - null\n- - user\n  - null\n- - job_name\n  - null\n- - job_uuid\n  - null\n- - tgt_name\n  - null\n- - tgt_uuid\n  - null\n- - match_tgt_uuid\n  - null\n- - args\n  - null\n- - highstate\n  - null\n- - start\n  - null\n- - end\n  - null\n- - limit\n  - 50\n- - has_errors\n  - null\n- - sort_by\n  - null\n- - reverse\n  - false\n- - page\n  - 0"
                }, 
                "__doc__": "Returner RPC interface", 
                "get_minions": {
                    "detailed": {
                        "doc": "Returns a dictionary of the current list of known minion IDs keyed by master ID\n\nget_returns() by JID example:\n\n.. code-block:: python\n\n    client.api.ret.get_returns(jid='20171205214029544461')\n\nget_returns() by function example:\n\n.. code-block:: python\n\n    client.api.ret.get_returns(minion_id='minion1')\n\nget_returns () by minion ID example:\n\n.. code-block:: python\n\n    client.api.ret.get_returns(minion_id='minion2')\n\nExample:\n\n.. code-block:: python\n\n    client.api.ret.get_minions()\n\n    RPCResponse(riq=28, ret=\n        {u'saltmaster1_master':\n            [u's01-m01', u's01-m02', u's01-m03', ....],\n         u'saltmaster2_master':\n            [u's02-m01', u's02-m02', u's02-m03', ....],\n         u'saltmaster3_master':\n            [u's03-m01', u's03-m02', u's03-m03', ....]},\n        error=None, warnings=[])", 
                        "returns": "Dict[str, List[str]]", 
                        "signature": "get_minions()"
                    }, 
                    "formatted": "signature: get_minions()\nreturns: Dict[str, List[str]]\ndoc: \"Returns a dictionary of the current list of known minion IDs keyed by master\\\n  \\ ID\\n\\nget_returns() by JID example:\\n\\n.. code-block:: python\\n\\n    client.api.ret.get_returns(jid='20171205214029544461')\\n\\\n  \\nget_returns() by function example:\\n\\n.. code-block:: python\\n\\n    client.api.ret.get_returns(minion_id='minion1')\\n\\\n  \\nget_returns () by minion ID example:\\n\\n.. code-block:: python\\n\\n    client.api.ret.get_returns(minion_id='minion2')\\n\\\n  \\nExample:\\n\\n.. code-block:: python\\n\\n    client.api.ret.get_minions()\\n\\n   \\\n  \\ RPCResponse(riq=28, ret=\\n        {u'saltmaster1_master':\\n            [u's01-m01',\\\n  \\ u's01-m02', u's01-m03', ....],\\n         u'saltmaster2_master':\\n            [u's02-m01',\\\n  \\ u's02-m02', u's02-m03', ....],\\n         u'saltmaster3_master':\\n            [u's03-m01',\\\n  \\ u's03-m02', u's03-m03', ....]},\\n        error=None, warnings=[])\""
                }
            }, 
            "master": {
                "get_master_jwt": {
                    "detailed": {
                        "doc": "Get a JWT authenicating using a master RSA key pair\n\nParameters\n:master_id: (Required) ID (not UUID) of the master.\n:encrypted_message: (Required) Encrypted JSON message with {created, master_id}.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "MasterJWTSchema": {
                                    "required": [
                                        "encrypted_message", 
                                        "master_id"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "test": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "title": "test"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "encrypted_message": {
                                            "type": "string", 
                                            "title": "encrypted_message"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/MasterJWTSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id"
                            ], 
                            [
                                "encrypted_message"
                            ], 
                            [
                                "test", 
                                false
                            ]
                        ], 
                        "signature": "get_master_jwt(master_id: 'unicode', encrypted_message: 'unicode', test: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'get_master_jwt(master_id: ''unicode'', encrypted_message: ''unicode'',\n  test: typing.Union[bool, NoneType])'\nreturns: Dict\ndoc: 'Get a JWT authenicating using a master RSA key pair\n\n\n  Parameters\n\n  :master_id: (Required) ID (not UUID) of the master.\n\n  :encrypted_message: (Required) Encrypted JSON message with {created, master_id}.'\nschema:\n  $ref: '#/definitions/MasterJWTSchema'\n  definitions:\n    MasterJWTSchema:\n      properties:\n        encrypted_message:\n          title: encrypted_message\n          type: string\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        test:\n          default: false\n          title: test\n          type: boolean\n      required:\n      - encrypted_message\n      - master_id\n      type: object\nparameters:\n- - master_id\n- - encrypted_message\n- - test\n  - false"
                }, 
                "delete_master": {
                    "detailed": {
                        "doc": "Delete master and its grains from RaaS.\n\nParameters\n:master_id: ID (not UUID) of the master to delete.\n:master_uuid: UUID of the master to delete.\n\nNote: use ``master_id`` or ``master_uuid``, but not both.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteMasterSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "master_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Master UUID", 
                                            "title": "master_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteMasterSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "master_uuid", 
                                null
                            ]
                        ], 
                        "signature": "delete_master(master_id: typing.Union[str, NoneType], master_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_master(master_id: typing.Union[str, NoneType], master_uuid: typing.Union[uuid.UUID,\n  NoneType])'\nreturns: None\ndoc: 'Delete master and its grains from RaaS.\n\n\n  Parameters\n\n  :master_id: ID (not UUID) of the master to delete.\n\n  :master_uuid: UUID of the master to delete.\n\n\n  Note: use ``master_id`` or ``master_uuid``, but not both.'\nschema:\n  $ref: '#/definitions/DeleteMasterSchema'\n  definitions:\n    DeleteMasterSchema:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        master_uuid:\n          description: Master UUID\n          format: uuid\n          title: master_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - master_uuid\n  - null"
                }, 
                "rotate_master_key": {
                    "detailed": {
                        "doc": "Rotate RSA Public key for master authentication use.\n\nParameters\n:master_id: (Required) ID (not UUID) of the master requesting key.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "RotateMasterKeySchema": {
                                    "required": [
                                        "master_id"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/RotateMasterKeySchema"
                        }, 
                        "parameters": [
                            [
                                "master_id"
                            ]
                        ], 
                        "signature": "rotate_master_key(master_id: 'unicode')"
                    }, 
                    "formatted": "signature: 'rotate_master_key(master_id: ''unicode'')'\nreturns: Dict\ndoc: 'Rotate RSA Public key for master authentication use.\n\n\n  Parameters\n\n  :master_id: (Required) ID (not UUID) of the master requesting key.'\nschema:\n  $ref: '#/definitions/RotateMasterKeySchema'\n  definitions:\n    RotateMasterKeySchema:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n      required:\n      - master_id\n      type: object\nparameters:\n- - master_id"
                }, 
                "set_master_key_state": {
                    "detailed": {
                        "doc": "Set RSA key state of masters.\n\nParameters\n:masters: (Required) Master IDs\n:action: (Required) accept, reject, delete.", 
                        "returns": "List", 
                        "schema": {
                            "definitions": {
                                "SetMasterKeysSchema": {
                                    "required": [
                                        "action", 
                                        "masters"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "action": {
                                            "enumNames": [], 
                                            "enum": [
                                                "accept", 
                                                "reject", 
                                                "delete"
                                            ], 
                                            "type": "string", 
                                            "title": "action"
                                        }, 
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "description": "Salt Master ID", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "title": "masters"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SetMasterKeysSchema"
                        }, 
                        "parameters": [
                            [
                                "masters"
                            ], 
                            [
                                "action"
                            ]
                        ], 
                        "signature": "set_master_key_state(masters: List[str], action: 'unicode')"
                    }, 
                    "formatted": "signature: 'set_master_key_state(masters: List[str], action: ''unicode'')'\nreturns: List\ndoc: 'Set RSA key state of masters.\n\n\n  Parameters\n\n  :masters: (Required) Master IDs\n\n  :action: (Required) accept, reject, delete.'\nschema:\n  $ref: '#/definitions/SetMasterKeysSchema'\n  definitions:\n    SetMasterKeysSchema:\n      properties:\n        action:\n          enum:\n          - accept\n          - reject\n          - delete\n          enumNames: []\n          title: action\n          type: string\n        masters:\n          items:\n            description: Salt Master ID\n            title: masters\n            type: string\n          title: masters\n          type: array\n      required:\n      - action\n      - masters\n      type: object\nparameters:\n- - masters\n- - action"
                }, 
                "get_master_grains": {
                    "detailed": {
                        "doc": "Get grains for a master.\n\nParameters\n:master_id: ID (not UUID) of the master.\n:master_uuid: UUID for the master.\n:split_cluster: If ``True`` return the grains for the individual master.\n    If ``False`` return the grains for the cluster in which the master resides.\n\n\nExample:\n\n.. code-block:: python\n\n    client.api.master.get_master_grains('saltmaster1_master')\n\n    RPCResponse(riq=26, ret=\n        {u'saltmaster1_master': {u'grains': {u'biosversion': u'4.2.amazon',\n                                             u'kernel': u'Linux',\n                                             u'domain': u'localdomain',\n                                             u'uid': 0,\n                                             u'zmqversion': u'4.1.4',\n                                             u'kernelrelease': u'3.10.0-693.5.2.el7.x86_64',\n                                             ...... }}\n        error=None, warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetMasterGrainsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "split_cluster": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "title": "split_cluster"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "master_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Master UUID", 
                                            "title": "master_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMasterGrainsSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "master_uuid", 
                                null
                            ], 
                            [
                                "split_cluster", 
                                false
                            ]
                        ], 
                        "signature": "get_master_grains(master_id: typing.Union[str, NoneType], master_uuid: typing.Union[uuid.UUID, NoneType], split_cluster: bool)"
                    }, 
                    "formatted": "signature: 'get_master_grains(master_id: typing.Union[str, NoneType], master_uuid:\n  typing.Union[uuid.UUID, NoneType], split_cluster: bool)'\nreturns: Dict\ndoc: \"Get grains for a master.\\n\\nParameters\\n:master_id: ID (not UUID) of the master.\\n\\\n  :master_uuid: UUID for the master.\\n:split_cluster: If ``True`` return the grains\\\n  \\ for the individual master.\\n    If ``False`` return the grains for the cluster\\\n  \\ in which the master resides.\\n\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    client.api.master.get_master_grains('saltmaster1_master')\\n\\\n  \\n    RPCResponse(riq=26, ret=\\n        {u'saltmaster1_master': {u'grains': {u'biosversion':\\\n  \\ u'4.2.amazon',\\n                                             u'kernel': u'Linux',\\n\\\n  \\                                             u'domain': u'localdomain',\\n     \\\n  \\                                        u'uid': 0,\\n                          \\\n  \\                   u'zmqversion': u'4.1.4',\\n                                 \\\n  \\            u'kernelrelease': u'3.10.0-693.5.2.el7.x86_64',\\n                 \\\n  \\                            ...... }}\\n        error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/GetMasterGrainsSchema'\n  definitions:\n    GetMasterGrainsSchema:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        master_uuid:\n          description: Master UUID\n          format: uuid\n          title: master_uuid\n          type: string\n        split_cluster:\n          default: false\n          title: split_cluster\n          type: boolean\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - master_uuid\n  - null\n- - split_cluster\n  - false"
                }, 
                "get_master_keys": {
                    "detailed": {
                        "doc": "List RSA keys of masters.\n\nParameters\n:state: (Required) accepted, pending, or rejected.", 
                        "returns": "List", 
                        "schema": {
                            "definitions": {
                                "GetMasterKeysSchema": {
                                    "required": [
                                        "state"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "state": {
                                            "enumNames": [], 
                                            "enum": [
                                                "accepted", 
                                                "pending", 
                                                "rejected"
                                            ], 
                                            "type": "string", 
                                            "title": "state"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMasterKeysSchema"
                        }, 
                        "parameters": [
                            [
                                "state"
                            ]
                        ], 
                        "signature": "get_master_keys(state: 'unicode')"
                    }, 
                    "formatted": "signature: 'get_master_keys(state: ''unicode'')'\nreturns: List\ndoc: 'List RSA keys of masters.\n\n\n  Parameters\n\n  :state: (Required) accepted, pending, or rejected.'\nschema:\n  $ref: '#/definitions/GetMasterKeysSchema'\n  definitions:\n    GetMasterKeysSchema:\n      properties:\n        state:\n          enum:\n          - accepted\n          - pending\n          - rejected\n          enumNames: []\n          title: state\n          type: string\n      required:\n      - state\n      type: object\nparameters:\n- - state"
                }, 
                "request_master_key": {
                    "detailed": {
                        "doc": "Request RSA Public key for master authentication use.\n\nParameters\n:master_id: (Required) ID (not UUID) of the master requesting key.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "RequestMasterKeySchema": {
                                    "required": [
                                        "master_id"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/RequestMasterKeySchema"
                        }, 
                        "parameters": [
                            [
                                "master_id"
                            ]
                        ], 
                        "signature": "request_master_key(master_id: 'unicode')"
                    }, 
                    "formatted": "signature: 'request_master_key(master_id: ''unicode'')'\nreturns: Dict\ndoc: 'Request RSA Public key for master authentication use.\n\n\n  Parameters\n\n  :master_id: (Required) ID (not UUID) of the master requesting key.'\nschema:\n  $ref: '#/definitions/RequestMasterKeySchema'\n  definitions:\n    RequestMasterKeySchema:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n      required:\n      - master_id\n      type: object\nparameters:\n- - master_id"
                }, 
                "__doc__": "The RPC methods for the salt masters interface", 
                "save_master": {
                    "detailed": {
                        "doc": "Update or add a salt-master to the database.\n\nReturns the UUID of the master in the database.\n\nParameters\n:master_id: ID (not UUID) of new/updated master\n:cluster_id: ID of cluster to which this master belongs or ``None`` if\n                   no cluster is in place.\n:master_uuid: UUID of master.  If blank and no master with ``master_id``\n                    exists a new one will be assigned.\n:grains: Master-level grains for this new master.", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "SaveMasterSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "master_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Master UUID", 
                                            "title": "master_uuid"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "cluster_id": {
                                            "type": "string", 
                                            "description": "Salt Master Cluster ID", 
                                            "title": "cluster_id"
                                        }, 
                                        "grains": {
                                            "type": "object", 
                                            "title": "grains"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveMasterSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "cluster_id", 
                                null
                            ], 
                            [
                                "master_uuid", 
                                null
                            ], 
                            [
                                "grains", 
                                null
                            ]
                        ], 
                        "signature": "save_master(master_id: typing.Union[str, NoneType], cluster_id: typing.Union[str, NoneType], master_uuid: typing.Union[uuid.UUID, NoneType], grains: typing.Union[typing.Dict, NoneType])"
                    }, 
                    "formatted": "signature: 'save_master(master_id: typing.Union[str, NoneType], cluster_id: typing.Union[str,\n  NoneType], master_uuid: typing.Union[uuid.UUID, NoneType], grains: typing.Union[typing.Dict,\n  NoneType])'\nreturns: '''unicode'''\ndoc: \"Update or add a salt-master to the database.\\n\\nReturns the UUID of the master\\\n  \\ in the database.\\n\\nParameters\\n:master_id: ID (not UUID) of new/updated master\\n\\\n  :cluster_id: ID of cluster to which this master belongs or ``None`` if\\n       \\\n  \\            no cluster is in place.\\n:master_uuid: UUID of master.  If blank and\\\n  \\ no master with ``master_id``\\n                    exists a new one will be assigned.\\n\\\n  :grains: Master-level grains for this new master.\"\nschema:\n  $ref: '#/definitions/SaveMasterSchema'\n  definitions:\n    SaveMasterSchema:\n      properties:\n        cluster_id:\n          description: Salt Master Cluster ID\n          title: cluster_id\n          type: string\n        grains:\n          title: grains\n          type: object\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        master_uuid:\n          description: Master UUID\n          format: uuid\n          title: master_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - cluster_id\n  - null\n- - master_uuid\n  - null\n- - grains\n  - null"
                }
            }, 
            "roster": {
                "__doc__": "The RPC methods for the roster interface"
            }, 
            "test": {
                "__doc__": "Test utilities", 
                "echo": {
                    "detailed": {
                        "doc": "Echo the message.\n\nParameters\n:message: The message to echo.", 
                        "schema": {
                            "definitions": {
                                "EchoSchema": {
                                    "required": [
                                        "message"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "message": {
                                            "type": "string", 
                                            "description": "The message to echo", 
                                            "title": "message"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/EchoSchema"
                        }, 
                        "parameters": [
                            [
                                "message"
                            ]
                        ], 
                        "signature": "echo(message: 'unicode')"
                    }, 
                    "formatted": "signature: 'echo(message: ''unicode'')'\ndoc: 'Echo the message.\n\n\n  Parameters\n\n  :message: The message to echo.'\nschema:\n  $ref: '#/definitions/EchoSchema'\n  definitions:\n    EchoSchema:\n      properties:\n        message:\n          description: The message to echo\n          title: message\n          type: string\n      required:\n      - message\n      type: object\nparameters:\n- - message"
                }, 
                "sleep": {
                    "detailed": {
                        "doc": "Sleep for the amount of time provided.\n\nParameters\n:seconds: Number of seconds to sleep.  Float values permitted.", 
                        "schema": {
                            "definitions": {
                                "SleepSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "seconds": {
                                            "exclusiveMaximum": true, 
                                            "description": "Number of seconds to sleep.", 
                                            "title": "seconds", 
                                            "default": 1, 
                                            "exclusiveMinimum": true, 
                                            "format": "float", 
                                            "maximum": 120, 
                                            "minimum": 1, 
                                            "type": "number"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SleepSchema"
                        }, 
                        "parameters": [
                            [
                                "seconds"
                            ]
                        ], 
                        "signature": "sleep(seconds: typing.Union[int, float])"
                    }, 
                    "formatted": "signature: 'sleep(seconds: typing.Union[int, float])'\ndoc: 'Sleep for the amount of time provided.\n\n\n  Parameters\n\n  :seconds: Number of seconds to sleep.  Float values permitted.'\nschema:\n  $ref: '#/definitions/SleepSchema'\n  definitions:\n    SleepSchema:\n      properties:\n        seconds:\n          default: 1\n          description: Number of seconds to sleep.\n          exclusiveMaximum: true\n          exclusiveMinimum: true\n          format: float\n          maximum: 120\n          minimum: 1\n          title: seconds\n          type: number\n      required: []\n      type: object\nparameters:\n- - seconds"
                }, 
                "error": {
                    "detailed": {
                        "doc": "Test how an error is returned under the RPC Api.\nSimply raises a generic exception.", 
                        "signature": "error()"
                    }, 
                    "formatted": "signature: error()\ndoc: 'Test how an error is returned under the RPC Api.\n\n  Simply raises a generic exception.'"
                }, 
                "warnings": {
                    "detailed": {
                        "doc": "Test how a warning is returned under the RPC Api.", 
                        "signature": "warnings()"
                    }, 
                    "formatted": "signature: warnings()\ndoc: Test how a warning is returned under the RPC Api."
                }
            }, 
            "formula": {
                "__doc__": "RPC methods for managing formulas"
            }, 
            "fs": {
                "save_file_access": {
                    "detailed": {
                        "doc": "Save access metadata for this file.\n\nParameters\n:job_uuid: UUID referencing desired file.\n:access_payload: Dictionary containing role names as keys and a list of allowed\n                 access types as values", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SaveFileAccessSchema": {
                                    "required": [
                                        "access_payload", 
                                        "file_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "file_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "File UUID", 
                                            "title": "file_uuid"
                                        }, 
                                        "access_payload": {
                                            "type": "object", 
                                            "description": "Dictionary containing access data for a resource. The keys need to be valid role names. The values need to be valid access permissions", 
                                            "title": "access_payload"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveFileAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "file_uuid"
                            ], 
                            [
                                "access_payload"
                            ]
                        ], 
                        "signature": "save_file_access(file_uuid: UUID, access_payload: Dict)"
                    }, 
                    "formatted": "signature: 'save_file_access(file_uuid: UUID, access_payload: Dict)'\nreturns: None\ndoc: \"Save access metadata for this file.\\n\\nParameters\\n:job_uuid: UUID referencing\\\n  \\ desired file.\\n:access_payload: Dictionary containing role names as keys and a\\\n  \\ list of allowed\\n                 access types as values\"\nschema:\n  $ref: '#/definitions/SaveFileAccessSchema'\n  definitions:\n    SaveFileAccessSchema:\n      properties:\n        access_payload:\n          description: Dictionary containing access data for a resource. The keys\n            need to be valid role names. The values need to be valid access permissions\n          title: access_payload\n          type: object\n        file_uuid:\n          description: File UUID\n          format: uuid\n          title: file_uuid\n          type: string\n      required:\n      - access_payload\n      - file_uuid\n      type: object\nparameters:\n- - file_uuid\n- - access_payload"
                }, 
                "delete_file": {
                    "detailed": {
                        "doc": "Delete a file from the database.\n\nParameters\n:file_uuid: UUID of the file in question\n:saltenv: Salt environment in which to look for the file\n:path: Fully-qualified path of the file.\n\nNote, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteFileSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "path": {
                                            "type": "string", 
                                            "description": "File path", 
                                            "title": "path"
                                        }, 
                                        "saltenv": {
                                            "type": "string", 
                                            "description": "File saltenv", 
                                            "title": "saltenv"
                                        }, 
                                        "file_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "File UUID", 
                                            "title": "file_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteFileSchema"
                        }, 
                        "parameters": [
                            [
                                "file_uuid", 
                                null
                            ], 
                            [
                                "saltenv", 
                                null
                            ], 
                            [
                                "path", 
                                null
                            ]
                        ], 
                        "signature": "delete_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str, NoneType], path: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str,\n  NoneType], path: typing.Union[str, NoneType])'\nreturns: None\ndoc: 'Delete a file from the database.\n\n\n  Parameters\n\n  :file_uuid: UUID of the file in question\n\n  :saltenv: Salt environment in which to look for the file\n\n  :path: Fully-qualified path of the file.\n\n\n  Note, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.'\nschema:\n  $ref: '#/definitions/DeleteFileSchema'\n  definitions:\n    DeleteFileSchema:\n      properties:\n        file_uuid:\n          description: File UUID\n          format: uuid\n          title: file_uuid\n          type: string\n        path:\n          description: File path\n          title: path\n          type: string\n        saltenv:\n          description: File saltenv\n          title: saltenv\n          type: string\n      required: []\n      type: object\nparameters:\n- - file_uuid\n  - null\n- - saltenv\n  - null\n- - path\n  - null"
                }, 
                "save_file": {
                    "detailed": {
                        "doc": "Add or update a file to the database\n\nSee :ref:`files` and :ref:`environments` for more information.\n\nParameters\n:file_uuid: UUID of the file in question\n:saltenv: Salt environment in which to look for the file\n:path: Fully-qualified path of the file.\n:contents: The file's contents.  If the file is plain text then ``contents``\n                 is the literal content of the file.  If it is a binary format\n                 then ``contents`` should be base64-encoded.\n:content_type: MIME content-type.  Will be guessed if passed in as ``None``.\n\nNote, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SaveFileSchema": {
                                    "required": [
                                        "contents"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "path": {
                                            "type": "string", 
                                            "description": "File path", 
                                            "title": "path"
                                        }, 
                                        "saltenv": {
                                            "type": "string", 
                                            "description": "File saltenv", 
                                            "title": "saltenv"
                                        }, 
                                        "contents": {
                                            "type": "array", 
                                            "description": "The contents of a file as a string or, if binary, base64 encoded string.", 
                                            "title": "contents"
                                        }, 
                                        "content_type": {
                                            "type": "string", 
                                            "description": "The file content type", 
                                            "title": "content_type"
                                        }, 
                                        "file_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "File UUID", 
                                            "title": "file_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveFileSchema"
                        }, 
                        "parameters": [
                            [
                                "file_uuid", 
                                null
                            ], 
                            [
                                "saltenv", 
                                null
                            ], 
                            [
                                "path", 
                                null
                            ], 
                            [
                                "contents", 
                                null
                            ], 
                            [
                                "content_type", 
                                null
                            ]
                        ], 
                        "signature": "save_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str, NoneType], path: typing.Union[str, NoneType], contents: typing.Union[bytes, str, NoneType], content_type: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'save_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str,\n  NoneType], path: typing.Union[str, NoneType], contents: typing.Union[bytes, str,\n  NoneType], content_type: typing.Union[str, NoneType])'\nreturns: None\ndoc: \"Add or update a file to the database\\n\\nSee :ref:`files` and :ref:`environments`\\\n  \\ for more information.\\n\\nParameters\\n:file_uuid: UUID of the file in question\\n\\\n  :saltenv: Salt environment in which to look for the file\\n:path: Fully-qualified\\\n  \\ path of the file.\\n:contents: The file's contents.  If the file is plain text\\\n  \\ then ``contents``\\n                 is the literal content of the file.  If it\\\n  \\ is a binary format\\n                 then ``contents`` should be base64-encoded.\\n\\\n  :content_type: MIME content-type.  Will be guessed if passed in as ``None``.\\n\\n\\\n  Note, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.\"\nschema:\n  $ref: '#/definitions/SaveFileSchema'\n  definitions:\n    SaveFileSchema:\n      properties:\n        content_type:\n          description: The file content type\n          title: content_type\n          type: string\n        contents:\n          description: The contents of a file as a string or, if binary, base64 encoded\n            string.\n          title: contents\n          type: array\n        file_uuid:\n          description: File UUID\n          format: uuid\n          title: file_uuid\n          type: string\n        path:\n          description: File path\n          title: path\n          type: string\n        saltenv:\n          description: File saltenv\n          title: saltenv\n          type: string\n      required:\n      - contents\n      type: object\nparameters:\n- - file_uuid\n  - null\n- - saltenv\n  - null\n- - path\n  - null\n- - contents\n  - null\n- - content_type\n  - null"
                }, 
                "get_file": {
                    "detailed": {
                        "doc": "Get a file from the database. Returns a dictionary with the file's metadata\nand a data field with the actual file contents.\n\nSee :ref:`files` and :ref:`environments` for more information.\n\nParameters\n:file_uuid: UUID of the file in question\n:saltenv: Salt environment in which to look for the file\n:path: Fully-qualified path of the file.\n\nNote, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetFileSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "path": {
                                            "type": "string", 
                                            "description": "File path", 
                                            "title": "path"
                                        }, 
                                        "saltenv": {
                                            "type": "string", 
                                            "description": "File saltenv", 
                                            "title": "saltenv"
                                        }, 
                                        "file_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "File UUID", 
                                            "title": "file_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetFileSchema"
                        }, 
                        "parameters": [
                            [
                                "file_uuid", 
                                null
                            ], 
                            [
                                "saltenv", 
                                null
                            ], 
                            [
                                "path", 
                                null
                            ]
                        ], 
                        "signature": "get_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str, NoneType], path: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'get_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str,\n  NoneType], path: typing.Union[str, NoneType])'\nreturns: Dict\ndoc: 'Get a file from the database. Returns a dictionary with the file''s metadata\n\n  and a data field with the actual file contents.\n\n\n  See :ref:`files` and :ref:`environments` for more information.\n\n\n  Parameters\n\n  :file_uuid: UUID of the file in question\n\n  :saltenv: Salt environment in which to look for the file\n\n  :path: Fully-qualified path of the file.\n\n\n  Note, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.'\nschema:\n  $ref: '#/definitions/GetFileSchema'\n  definitions:\n    GetFileSchema:\n      properties:\n        file_uuid:\n          description: File UUID\n          format: uuid\n          title: file_uuid\n          type: string\n        path:\n          description: File path\n          title: path\n          type: string\n        saltenv:\n          description: File saltenv\n          title: saltenv\n          type: string\n      required: []\n      type: object\nparameters:\n- - file_uuid\n  - null\n- - saltenv\n  - null\n- - path\n  - null"
                }, 
                "file_exists": {
                    "detailed": {
                        "doc": "Return True if file exists.\n\nSee :ref:`files` and :ref:`environments` for more information.\n\nParameters\n:file_uuid: UUID of the file in question\n:saltenv: Salt environment in which to look for the file\n:path: Fully-qualified path of the file.\n\nNote, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.", 
                        "returns": "bool", 
                        "schema": {
                            "definitions": {
                                "FileExistsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "path": {
                                            "type": "string", 
                                            "description": "File path", 
                                            "title": "path"
                                        }, 
                                        "saltenv": {
                                            "type": "string", 
                                            "description": "File saltenv", 
                                            "title": "saltenv"
                                        }, 
                                        "file_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "File UUID", 
                                            "title": "file_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/FileExistsSchema"
                        }, 
                        "parameters": [
                            [
                                "file_uuid", 
                                null
                            ], 
                            [
                                "saltenv", 
                                null
                            ], 
                            [
                                "path", 
                                null
                            ]
                        ], 
                        "signature": "file_exists(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str, NoneType], path: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'file_exists(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str,\n  NoneType], path: typing.Union[str, NoneType])'\nreturns: bool\ndoc: 'Return True if file exists.\n\n\n  See :ref:`files` and :ref:`environments` for more information.\n\n\n  Parameters\n\n  :file_uuid: UUID of the file in question\n\n  :saltenv: Salt environment in which to look for the file\n\n  :path: Fully-qualified path of the file.\n\n\n  Note, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.'\nschema:\n  $ref: '#/definitions/FileExistsSchema'\n  definitions:\n    FileExistsSchema:\n      properties:\n        file_uuid:\n          description: File UUID\n          format: uuid\n          title: file_uuid\n          type: string\n        path:\n          description: File path\n          title: path\n          type: string\n        saltenv:\n          description: File saltenv\n          title: saltenv\n          type: string\n      required: []\n      type: object\nparameters:\n- - file_uuid\n  - null\n- - saltenv\n  - null\n- - path\n  - null"
                }, 
                "get_envs": {
                    "detailed": {
                        "doc": "Get a list of all available Salt environments\n\nSee :ref:`environments` for more information.", 
                        "returns": "List[str]", 
                        "signature": "get_envs()"
                    }, 
                    "formatted": "signature: get_envs()\nreturns: List[str]\ndoc: 'Get a list of all available Salt environments\n\n\n  See :ref:`environments` for more information.'"
                }, 
                "get_file_access": {
                    "detailed": {
                        "doc": "Return access metadata for this file.\n\nParameters\n:file_uuid: UUID referencing desired file.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetFileAccessSchema": {
                                    "required": [
                                        "file_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "file_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "File UUID", 
                                            "title": "file_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetFileAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "file_uuid"
                            ]
                        ], 
                        "signature": "get_file_access(file_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'get_file_access(file_uuid: UUID)'\nreturns: Dict\ndoc: 'Return access metadata for this file.\n\n\n  Parameters\n\n  :file_uuid: UUID referencing desired file.'\nschema:\n  $ref: '#/definitions/GetFileAccessSchema'\n  definitions:\n    GetFileAccessSchema:\n      properties:\n        file_uuid:\n          description: File UUID\n          format: uuid\n          title: file_uuid\n          type: string\n      required:\n      - file_uuid\n      type: object\nparameters:\n- - file_uuid"
                }, 
                "get_env": {
                    "detailed": {
                        "doc": "List all files in the given Salt environment.\n\nSee :ref:`environments` for more information.\n\nParameters\n:saltenv: Salt environment in which to look for the files\n:include_fs_metadata: If True, include a dictonary key that has metadata\n                            associated with the file.", 
                        "returns": "List[Dict]", 
                        "schema": {
                            "definitions": {
                                "GetEnvSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "saltenv": {
                                            "type": "string", 
                                            "description": "Environment name", 
                                            "title": "saltenv"
                                        }, 
                                        "include_fs_metadata": {
                                            "type": "boolean", 
                                            "title": "include_fs_metadata"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetEnvSchema"
                        }, 
                        "parameters": [
                            [
                                "saltenv"
                            ], 
                            [
                                "include_fs_metadata", 
                                true
                            ]
                        ], 
                        "signature": "get_env(saltenv: 'unicode', include_fs_metadata: typing.Union[bool, NoneType] = True)"
                    }, 
                    "formatted": "signature: 'get_env(saltenv: ''unicode'', include_fs_metadata: typing.Union[bool,\n  NoneType] = True)'\nreturns: List[Dict]\ndoc: \"List all files in the given Salt environment.\\n\\nSee :ref:`environments` for\\\n  \\ more information.\\n\\nParameters\\n:saltenv: Salt environment in which to look for\\\n  \\ the files\\n:include_fs_metadata: If True, include a dictonary key that has metadata\\n\\\n  \\                            associated with the file.\"\nschema:\n  $ref: '#/definitions/GetEnvSchema'\n  definitions:\n    GetEnvSchema:\n      properties:\n        include_fs_metadata:\n          title: include_fs_metadata\n          type: boolean\n        saltenv:\n          description: Environment name\n          title: saltenv\n          type: string\n      required: []\n      type: object\nparameters:\n- - saltenv\n- - include_fs_metadata\n  - true"
                }, 
                "__doc__": "The RPC methods for the fileserver interface", 
                "update_file": {
                    "detailed": {
                        "doc": "Add or update a file to the database\n\nSee :ref:`files` and :ref:`environments` for more information.\n\nParameters\n:file_uuid: UUID of the file in question\n:saltenv: Salt environment in which to look for the file\n:path: Fully-qualified path of the file.\n:contents: The file's contents.  If the file is plain text then ``contents``\n                 is the literal content of the file.  If it is a binary format\n                 then ``contents`` should be base64-encoded.\n:content_type: MIME content-type.  Will be guessed if passed in as ``None``.\n\nNote, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "UpdateFileSchema": {
                                    "required": [
                                        "contents"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "path": {
                                            "type": "string", 
                                            "description": "File path", 
                                            "title": "path"
                                        }, 
                                        "saltenv": {
                                            "type": "string", 
                                            "description": "File saltenv", 
                                            "title": "saltenv"
                                        }, 
                                        "contents": {
                                            "type": "array", 
                                            "description": "The contents of a file as a string or, if binary, base64 encoded string.", 
                                            "title": "contents"
                                        }, 
                                        "content_type": {
                                            "type": "string", 
                                            "description": "The file content type", 
                                            "title": "content_type"
                                        }, 
                                        "file_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "File UUID", 
                                            "title": "file_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/UpdateFileSchema"
                        }, 
                        "parameters": [
                            [
                                "file_uuid", 
                                null
                            ], 
                            [
                                "saltenv", 
                                null
                            ], 
                            [
                                "path", 
                                null
                            ], 
                            [
                                "contents", 
                                null
                            ], 
                            [
                                "content_type", 
                                null
                            ]
                        ], 
                        "signature": "update_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str, NoneType], path: typing.Union[str, NoneType], contents: typing.Union[bytes, str, NoneType], content_type: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'update_file(file_uuid: typing.Union[uuid.UUID, NoneType], saltenv: typing.Union[str,\n  NoneType], path: typing.Union[str, NoneType], contents: typing.Union[bytes, str,\n  NoneType], content_type: typing.Union[str, NoneType])'\nreturns: None\ndoc: \"Add or update a file to the database\\n\\nSee :ref:`files` and :ref:`environments`\\\n  \\ for more information.\\n\\nParameters\\n:file_uuid: UUID of the file in question\\n\\\n  :saltenv: Salt environment in which to look for the file\\n:path: Fully-qualified\\\n  \\ path of the file.\\n:contents: The file's contents.  If the file is plain text\\\n  \\ then ``contents``\\n                 is the literal content of the file.  If it\\\n  \\ is a binary format\\n                 then ``contents`` should be base64-encoded.\\n\\\n  :content_type: MIME content-type.  Will be guessed if passed in as ``None``.\\n\\n\\\n  Note, use ``file_uuid`` or ``saltenv`` and ``path``, but not both.\"\nschema:\n  $ref: '#/definitions/UpdateFileSchema'\n  definitions:\n    UpdateFileSchema:\n      properties:\n        content_type:\n          description: The file content type\n          title: content_type\n          type: string\n        contents:\n          description: The contents of a file as a string or, if binary, base64 encoded\n            string.\n          title: contents\n          type: array\n        file_uuid:\n          description: File UUID\n          format: uuid\n          title: file_uuid\n          type: string\n        path:\n          description: File path\n          title: path\n          type: string\n        saltenv:\n          description: File saltenv\n          title: saltenv\n          type: string\n      required:\n      - contents\n      type: object\nparameters:\n- - file_uuid\n  - null\n- - saltenv\n  - null\n- - path\n  - null\n- - contents\n  - null\n- - content_type\n  - null"
                }
            }, 
            "schedule": {
                "save_skip": {
                    "detailed": {
                        "doc": "Update a list of futures (by UUID) skip flag\n\nParameters\n:list uuids: A list of future uuids to set skip flag for.\n:boolean skip: True or False to skip future", 
                        "parameters": [
                            [
                                "uuids", 
                                null
                            ], 
                            [
                                "skip", 
                                false
                            ]
                        ], 
                        "signature": "save_skip(uuids: typing.Union[typing.List[str], NoneType], skip: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'save_skip(uuids: typing.Union[typing.List[str], NoneType], skip: typing.Union[bool,\n  NoneType])'\ndoc: 'Update a list of futures (by UUID) skip flag\n\n\n  Parameters\n\n  :list uuids: A list of future uuids to set skip flag for.\n\n  :boolean skip: True or False to skip future'\nparameters:\n- - uuids\n  - null\n- - skip\n  - false"
                }, 
                "get": {
                    "detailed": {
                        "doc": "Return the full schedule json structure.\n\nSee :ref:`schedules` for more information.\n\n:param list names: Matching names of the schedule entries to return\n:param bool show_past: Include entries that were scheduled to run in the past.\n:param str query: The text to search for in args or kwargs\n:param str cmd: One of local, runner, ssh, wheel\n:param str fun: The name of the function that was run\n:param list masters: A list of masters that the job was assigned to\n:param str tgt: A target string to search for\n:param bool arg: Whether to search inside *args\n:param bool kwarg: Whether to search inside **kwargs\n:param list state: A list of states to match\n:param bool enabled: is the scheduled item enabled to run or not\n:param UUID uuid: Schedule UUID to match\n:param list job_names: A list of job names to match\n:param list tgt_names: A list of target group names to match\n:param str sort_by: Field to sort by\n:param bool reverse: Pass True to sort in descending order\n:param int limit: How many records to return at a time\n:param int page: Which page of the records to return (offset = page * limit)\n\nNOTE: passing ``['*']`` as the value of ``masters`` will match the literal\nvalue ``*`` in the list of masters.  ``get()`` is setup this way so\nit will be possible to look up schedules that are targeted at all masters.\nIf ``*`` was treated as the wildcard, it would always match any job targeted\n at any master", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetSchedulerSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of masters that the job was assigned to", 
                                            "title": "masters"
                                        }, 
                                        "uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The UUID of the schedule to be saved", 
                                            "title": "uuid"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "A target string to search for", 
                                            "title": "tgt"
                                        }, 
                                        "tgt_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "tgt_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Target names against which to match", 
                                            "title": "tgt_names"
                                        }, 
                                        "cmd": {
                                            "enumNames": [], 
                                            "enum": [
                                                "local", 
                                                "runner", 
                                                "wheel", 
                                                "ssh"
                                            ], 
                                            "type": "string", 
                                            "description": "One of local, ssh, runner, wheel", 
                                            "title": "cmd"
                                        }, 
                                        "enabled": {
                                            "default": null, 
                                            "type": "boolean", 
                                            "description": "scheduled job is either enabled or disabled", 
                                            "title": "enabled"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "cmd", 
                                                "fun", 
                                                "tgt_name", 
                                                "job_name", 
                                                "sched_name", 
                                                "next_fire_time", 
                                                "last_fire_time", 
                                                "status"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "state": {
                                            "items": {
                                                "enumNames": [], 
                                                "enum": [
                                                    "new", 
                                                    "retrieved", 
                                                    "skipped", 
                                                    "pausing", 
                                                    "paused", 
                                                    "resumed", 
                                                    "resuming", 
                                                    "complete", 
                                                    "stopping", 
                                                    "stopped", 
                                                    "disabled", 
                                                    "failed"
                                                ], 
                                                "type": "string", 
                                                "title": "state"
                                            }, 
                                            "type": "array", 
                                            "description": "Match commands in these states", 
                                            "title": "state"
                                        }, 
                                        "kwarg": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Whether to search inside **kwargs", 
                                            "title": "kwarg"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "names"
                                            }, 
                                            "type": "array", 
                                            "description": "Schedule names against which to match", 
                                            "title": "names"
                                        }, 
                                        "job_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "job_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Job names against which to match", 
                                            "title": "job_names"
                                        }, 
                                        "arg": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Whether to search inside *args", 
                                            "title": "arg"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "The name of the function for this job", 
                                            "title": "fun"
                                        }, 
                                        "query": {
                                            "type": "string", 
                                            "description": "String to search for in cmd, fun, args fields", 
                                            "title": "query"
                                        }, 
                                        "show_past": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include entries that were scheduled to run in the past.", 
                                            "title": "show_past"
                                        }, 
                                        "expired": {
                                            "default": null, 
                                            "type": "boolean", 
                                            "description": "job will never be scheduled to run again", 
                                            "title": "expired"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetSchedulerSchema"
                        }, 
                        "parameters": [
                            [
                                "names", 
                                null
                            ], 
                            [
                                "show_past", 
                                false
                            ], 
                            [
                                "query", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "tgt", 
                                null
                            ], 
                            [
                                "arg", 
                                false
                            ], 
                            [
                                "kwarg", 
                                false
                            ], 
                            [
                                "state", 
                                null
                            ], 
                            [
                                "enabled", 
                                null
                            ], 
                            [
                                "uuid", 
                                null
                            ], 
                            [
                                "job_names", 
                                null
                            ], 
                            [
                                "tgt_names", 
                                null
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "expired", 
                                null
                            ]
                        ], 
                        "signature": "get(names: typing.Union[typing.List, NoneType], show_past: typing.Union[bool, NoneType], query: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType], fun: typing.Union[str, NoneType], masters: typing.Union[typing.List[str], NoneType], tgt: typing.Union[str, NoneType], arg: typing.Union[bool, NoneType], kwarg: typing.Union[bool, NoneType], state: typing.Union[typing.List[str], NoneType], enabled: typing.Union[bool, NoneType], uuid: typing.Union[uuid.UUID, NoneType], job_names: typing.Union[typing.List, NoneType], tgt_names: typing.Union[typing.List, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], limit: typing.Union[int, NoneType] = 50, page: typing.Union[int, NoneType], expired: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'get(names: typing.Union[typing.List, NoneType], show_past: typing.Union[bool,\n  NoneType], query: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType],\n  fun: typing.Union[str, NoneType], masters: typing.Union[typing.List[str], NoneType],\n  tgt: typing.Union[str, NoneType], arg: typing.Union[bool, NoneType], kwarg: typing.Union[bool,\n  NoneType], state: typing.Union[typing.List[str], NoneType], enabled: typing.Union[bool,\n  NoneType], uuid: typing.Union[uuid.UUID, NoneType], job_names: typing.Union[typing.List,\n  NoneType], tgt_names: typing.Union[typing.List, NoneType], sort_by: typing.Union[str,\n  NoneType], reverse: typing.Union[bool, NoneType], limit: typing.Union[int, NoneType]\n  = 50, page: typing.Union[int, NoneType], expired: typing.Union[bool, NoneType])'\nreturns: Dict\ndoc: \"Return the full schedule json structure.\\n\\nSee :ref:`schedules` for more information.\\n\\\n  \\n:param list names: Matching names of the schedule entries to return\\n:param bool\\\n  \\ show_past: Include entries that were scheduled to run in the past.\\n:param str\\\n  \\ query: The text to search for in args or kwargs\\n:param str cmd: One of local,\\\n  \\ runner, ssh, wheel\\n:param str fun: The name of the function that was run\\n:param\\\n  \\ list masters: A list of masters that the job was assigned to\\n:param str tgt:\\\n  \\ A target string to search for\\n:param bool arg: Whether to search inside *args\\n\\\n  :param bool kwarg: Whether to search inside **kwargs\\n:param list state: A list\\\n  \\ of states to match\\n:param bool enabled: is the scheduled item enabled to run\\\n  \\ or not\\n:param UUID uuid: Schedule UUID to match\\n:param list job_names: A list\\\n  \\ of job names to match\\n:param list tgt_names: A list of target group names to\\\n  \\ match\\n:param str sort_by: Field to sort by\\n:param bool reverse: Pass True to\\\n  \\ sort in descending order\\n:param int limit: How many records to return at a time\\n\\\n  :param int page: Which page of the records to return (offset = page * limit)\\n\\n\\\n  NOTE: passing ``['*']`` as the value of ``masters`` will match the literal\\nvalue\\\n  \\ ``*`` in the list of masters.  ``get()`` is setup this way so\\nit will be possible\\\n  \\ to look up schedules that are targeted at all masters.\\nIf ``*`` was treated as\\\n  \\ the wildcard, it would always match any job targeted\\n at any master\"\nschema:\n  $ref: '#/definitions/GetSchedulerSchema'\n  definitions:\n    GetSchedulerSchema:\n      properties:\n        arg:\n          default: false\n          description: Whether to search inside *args\n          title: arg\n          type: boolean\n        cmd:\n          description: One of local, ssh, runner, wheel\n          enum:\n          - local\n          - runner\n          - wheel\n          - ssh\n          enumNames: []\n          title: cmd\n          type: string\n        enabled:\n          default: null\n          description: scheduled job is either enabled or disabled\n          title: enabled\n          type: boolean\n        expired:\n          default: null\n          description: job will never be scheduled to run again\n          title: expired\n          type: boolean\n        fun:\n          description: The name of the function for this job\n          title: fun\n          type: string\n        job_names:\n          description: Job names against which to match\n          items:\n            title: job_names\n            type: string\n          title: job_names\n          type: array\n        kwarg:\n          default: false\n          description: Whether to search inside **kwargs\n          title: kwarg\n          type: boolean\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        masters:\n          description: A list of masters that the job was assigned to\n          items:\n            title: masters\n            type: string\n          title: masters\n          type: array\n        names:\n          description: Schedule names against which to match\n          items:\n            title: names\n            type: string\n          title: names\n          type: array\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        query:\n          description: String to search for in cmd, fun, args fields\n          title: query\n          type: string\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        show_past:\n          default: false\n          description: Include entries that were scheduled to run in the past.\n          title: show_past\n          type: boolean\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - cmd\n          - fun\n          - tgt_name\n          - job_name\n          - sched_name\n          - next_fire_time\n          - last_fire_time\n          - status\n          enumNames: []\n          title: sort_by\n          type: string\n        state:\n          description: Match commands in these states\n          items:\n            enum:\n            - new\n            - retrieved\n            - skipped\n            - pausing\n            - paused\n            - resumed\n            - resuming\n            - complete\n            - stopping\n            - stopped\n            - disabled\n            - failed\n            enumNames: []\n            title: state\n            type: string\n          title: state\n          type: array\n        tgt:\n          description: A target string to search for\n          title: tgt\n          type: object\n        tgt_names:\n          description: Target names against which to match\n          items:\n            title: tgt_names\n            type: string\n          title: tgt_names\n          type: array\n        uuid:\n          description: The UUID of the schedule to be saved\n          format: uuid\n          title: uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - names\n  - null\n- - show_past\n  - false\n- - query\n  - null\n- - cmd\n  - null\n- - fun\n  - null\n- - masters\n  - null\n- - tgt\n  - null\n- - arg\n  - false\n- - kwarg\n  - false\n- - state\n  - null\n- - enabled\n  - null\n- - uuid\n  - null\n- - job_names\n  - null\n- - tgt_names\n  - null\n- - sort_by\n  - null\n- - reverse\n  - false\n- - limit\n  - 50\n- - page\n  - 0\n- - expired\n  - null"
                }, 
                "futures": {
                    "detailed": {
                        "doc": "Get a list of future times when the scheduled jobs will execute.\nIf ``jobs`` is passed in then only the futures for those jobs will be\ncalculated. By default the job times will be queried out for 8 weeks\n\nParameters\n:list jobs: A list of job names to query\n:list daterange: A list of two date strings in ISO 8601 format in UTC. If\n                 the provided dates are in a different offset, they will\n                 be converted to UTC prior to the date range constraining.\n:int limit: The number of job instances to return, defaults to 100\n\nThe parameter ``daterange``, which is a date string in ISO8601 format has a\nsibling parameter, ``daterange_fmt``, which is a string that can represent\nan alternate date and time format used to parse the ``daterange`` values.", 
                        "schema": {
                            "definitions": {
                                "FuturesSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of masters that the job was assigned to", 
                                            "title": "masters"
                                        }, 
                                        "cmd": {
                                            "enumNames": [], 
                                            "enum": [
                                                "local", 
                                                "runner", 
                                                "wheel", 
                                                "ssh"
                                            ], 
                                            "type": "string", 
                                            "description": "One of local, ssh, runner, wheel", 
                                            "title": "cmd"
                                        }, 
                                        "uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The UUID of the schedule to be saved", 
                                            "title": "uuid"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "A target string to search for", 
                                            "title": "tgt"
                                        }, 
                                        "tgt_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "tgt_names"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of tgt names to query", 
                                            "title": "tgt_names"
                                        }, 
                                        "daterange": {
                                            "description": "A list of two date strings in ISO 8601 format", 
                                            "title": "daterange", 
                                            "minItems": 2, 
                                            "items": {
                                                "type": "string", 
                                                "title": "daterange"
                                            }, 
                                            "maxItems": 2, 
                                            "type": "array"
                                        }, 
                                        "sched_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "sched_names"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of schedule names to query", 
                                            "title": "sched_names"
                                        }, 
                                        "sort_by": {
                                            "description": "Which field to sort by", 
                                            "title": "sort_by", 
                                            "default": "start_time", 
                                            "enum": [
                                                "cmd", 
                                                "fun", 
                                                "tgt_name", 
                                                "job_name", 
                                                "sched_name", 
                                                "start_time", 
                                                "state"
                                            ], 
                                            "enumNames": [], 
                                            "type": "string"
                                        }, 
                                        "state": {
                                            "items": {
                                                "enumNames": [], 
                                                "enum": [
                                                    "skipping", 
                                                    "disabled", 
                                                    "scheduled"
                                                ], 
                                                "type": "string", 
                                                "title": "state"
                                            }, 
                                            "type": "array", 
                                            "description": "Match commands in these states", 
                                            "title": "state"
                                        }, 
                                        "kwarg": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Whether to search inside **kwargs", 
                                            "title": "kwarg"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "job_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "job_names"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of job names to query", 
                                            "title": "job_names"
                                        }, 
                                        "arg": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Whether to search inside *args", 
                                            "title": "arg"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "The name of the function for this job", 
                                            "title": "fun"
                                        }, 
                                        "query": {
                                            "type": "string", 
                                            "description": "String to search for in cmd, fun, args fields", 
                                            "title": "query"
                                        }, 
                                        "daterange_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for daterange", 
                                            "title": "daterange_fmt"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "state_invert": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Makes the state filter exclusionary", 
                                            "title": "state_invert"
                                        }, 
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/FuturesSchema"
                        }, 
                        "parameters": [
                            [
                                "sched_names", 
                                null
                            ], 
                            [
                                "job_names", 
                                null
                            ], 
                            [
                                "tgt_names", 
                                null
                            ], 
                            [
                                "uuid", 
                                null
                            ], 
                            [
                                "query", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "tgt", 
                                null
                            ], 
                            [
                                "arg", 
                                false
                            ], 
                            [
                                "kwarg", 
                                false
                            ], 
                            [
                                "state", 
                                null
                            ], 
                            [
                                "state_invert", 
                                false
                            ], 
                            [
                                "sort_by", 
                                "start_time"
                            ], 
                            [
                                "daterange", 
                                null
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                100
                            ], 
                            [
                                "reverse", 
                                false
                            ]
                        ], 
                        "signature": "futures(sched_names: typing.Union[typing.List[str], NoneType], job_names: typing.Union[typing.List[str], NoneType], tgt_names: typing.Union[typing.List[str], NoneType], uuid: typing.Union[uuid.UUID, NoneType], query: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType], fun: typing.Union[str, NoneType], masters: typing.Union[typing.List[str], NoneType], tgt: typing.Union[str, NoneType], arg: typing.Union[bool, NoneType], kwarg: typing.Union[bool, NoneType], state: typing.Union[typing.List[str], NoneType], state_invert: typing.Union[bool, NoneType], sort_by: typing.Union[str, NoneType] = start_time, daterange: typing.Union[list, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 100, reverse: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'futures(sched_names: typing.Union[typing.List[str], NoneType], job_names:\n  typing.Union[typing.List[str], NoneType], tgt_names: typing.Union[typing.List[str],\n  NoneType], uuid: typing.Union[uuid.UUID, NoneType], query: typing.Union[str, NoneType],\n  cmd: typing.Union[str, NoneType], fun: typing.Union[str, NoneType], masters: typing.Union[typing.List[str],\n  NoneType], tgt: typing.Union[str, NoneType], arg: typing.Union[bool, NoneType],\n  kwarg: typing.Union[bool, NoneType], state: typing.Union[typing.List[str], NoneType],\n  state_invert: typing.Union[bool, NoneType], sort_by: typing.Union[str, NoneType]\n  = start_time, daterange: typing.Union[list, NoneType], page: typing.Union[int, NoneType],\n  limit: typing.Union[int, NoneType] = 100, reverse: typing.Union[bool, NoneType])'\ndoc: \"Get a list of future times when the scheduled jobs will execute.\\nIf ``jobs``\\\n  \\ is passed in then only the futures for those jobs will be\\ncalculated. By default\\\n  \\ the job times will be queried out for 8 weeks\\n\\nParameters\\n:list jobs: A list\\\n  \\ of job names to query\\n:list daterange: A list of two date strings in ISO 8601\\\n  \\ format in UTC. If\\n                 the provided dates are in a different offset,\\\n  \\ they will\\n                 be converted to UTC prior to the date range constraining.\\n\\\n  :int limit: The number of job instances to return, defaults to 100\\n\\nThe parameter\\\n  \\ ``daterange``, which is a date string in ISO8601 format has a\\nsibling parameter,\\\n  \\ ``daterange_fmt``, which is a string that can represent\\nan alternate date and\\\n  \\ time format used to parse the ``daterange`` values.\"\nschema:\n  $ref: '#/definitions/FuturesSchema'\n  definitions:\n    FuturesSchema:\n      properties:\n        arg:\n          default: false\n          description: Whether to search inside *args\n          title: arg\n          type: boolean\n        cmd:\n          description: One of local, ssh, runner, wheel\n          enum:\n          - local\n          - runner\n          - wheel\n          - ssh\n          enumNames: []\n          title: cmd\n          type: string\n        daterange:\n          description: A list of two date strings in ISO 8601 format\n          items:\n            title: daterange\n            type: string\n          maxItems: 2\n          minItems: 2\n          title: daterange\n          type: array\n        daterange_fmt:\n          description: An alternate date format for daterange\n          title: daterange_fmt\n          type: string\n        fun:\n          description: The name of the function for this job\n          title: fun\n          type: string\n        job_names:\n          description: A list of job names to query\n          items:\n            title: job_names\n            type: string\n          title: job_names\n          type: array\n        kwarg:\n          default: false\n          description: Whether to search inside **kwargs\n          title: kwarg\n          type: boolean\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        masters:\n          description: A list of masters that the job was assigned to\n          items:\n            title: masters\n            type: string\n          title: masters\n          type: array\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        query:\n          description: String to search for in cmd, fun, args fields\n          title: query\n          type: string\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        sched_names:\n          description: A list of schedule names to query\n          items:\n            title: sched_names\n            type: string\n          title: sched_names\n          type: array\n        sort_by:\n          default: start_time\n          description: Which field to sort by\n          enum:\n          - cmd\n          - fun\n          - tgt_name\n          - job_name\n          - sched_name\n          - start_time\n          - state\n          enumNames: []\n          title: sort_by\n          type: string\n        state:\n          description: Match commands in these states\n          items:\n            enum:\n            - skipping\n            - disabled\n            - scheduled\n            enumNames: []\n            title: state\n            type: string\n          title: state\n          type: array\n        state_invert:\n          default: false\n          description: Makes the state filter exclusionary\n          title: state_invert\n          type: boolean\n        tgt:\n          description: A target string to search for\n          title: tgt\n          type: object\n        tgt_names:\n          description: A list of tgt names to query\n          items:\n            title: tgt_names\n            type: string\n          title: tgt_names\n          type: array\n        uuid:\n          description: The UUID of the schedule to be saved\n          format: uuid\n          title: uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - sched_names\n  - null\n- - job_names\n  - null\n- - tgt_names\n  - null\n- - uuid\n  - null\n- - query\n  - null\n- - cmd\n  - null\n- - fun\n  - null\n- - masters\n  - null\n- - tgt\n  - null\n- - arg\n  - false\n- - kwarg\n  - false\n- - state\n  - null\n- - state_invert\n  - false\n- - sort_by\n  - start_time\n- - daterange\n  - null\n- - page\n  - 0\n- - limit\n  - 100\n- - reverse\n  - false"
                }, 
                "update": {
                    "detailed": {
                        "doc": "Update a schedule.\n\nSee :ref:`schedules` for more information.\n\n:param str name: The name of the schedule item\n:param dict schedule: A dictionary with schedule details.\n:param list masters: List of masters on which to execute runner and wheel commands.\n:param str cmd: One of local, runner, ssh, wheel\n:param dict arg: Argument dictionary containing kwargs and args for fun below\n:param dict tgt: The minion target dictionary (use this or tgt_uuid, not both)\n:param str tgt_uuid: a UUID for an already saved target (use this or tgt, not both)\n:param str job_uuid: a UUID for an already saved job (use this or fun+arg, not both)\n:param str fun: The function to run (use this or job_uuid, not both)\n:param bool enabled: Set the schedule job enabled or disabled\n\n`arg` should have this format:\n\n.. code-block:: python\n\n    arg: { 'arg': [<arg1>, <arg2>, ..., <argn>],\n           'kwarg': { '<key1>': <val1>,\n                      '<key2>': <val2>,\n                      ...\n                      '<keyn>': <valn> }\n        }\n\n`schedule` should have this format:\n\n.. code-block:: python\n\n    schedule: { '<descriptor1>': <value1>,\n                '<descriptor2>': <value1>,\n                ...\n                '<descriptorn>': <valuen> }\n\n`Descriptor` above can be a number of things like `seconds`,\n`once`, `when`, `cron`, etc.  See the SaltStack Enterprise documentation\nfor a complete list.", 
                        "schema": {
                            "definitions": {
                                "SchedulerRangeSchema": {
                                    "required": [
                                        "end", 
                                        "start"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "start": {
                                            "type": "string", 
                                            "description": "When to start the range, in dateutil format", 
                                            "title": "start"
                                        }, 
                                        "invert": {
                                            "type": "boolean", 
                                            "description": "Instead of making the range \"run during this time\", make it \"do not run during this time\"", 
                                            "title": "invert"
                                        }, 
                                        "end": {
                                            "type": "string", 
                                            "description": "When to end the range, in dateutil format", 
                                            "title": "end"
                                        }, 
                                        "end_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for end", 
                                            "title": "end_fmt"
                                        }, 
                                        "start_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for start", 
                                            "title": "start_fmt"
                                        }
                                    }
                                }, 
                                "WhenFieldSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "daily": {
                                            "items": {
                                                "type": "string", 
                                                "title": "daily"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings", 
                                            "title": "daily"
                                        }, 
                                        "weekly": {
                                            "type": "object", 
                                            "$ref": "#/definitions/WhenWeeklyFieldSchema"
                                        }
                                    }
                                }, 
                                "SchedulerArgKwargSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "kwarg": {
                                            "type": "object", 
                                            "description": "An optional dict of kwargs for the function", 
                                            "title": "kwarg"
                                        }, 
                                        "arg": {
                                            "items": {
                                                "type": "string", 
                                                "title": "arg"
                                            }, 
                                            "type": "array", 
                                            "description": "An optional list of args for the function", 
                                            "title": "arg"
                                        }
                                    }
                                }, 
                                "UpdateSchedulerSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "function": {
                                            "default": "job.run", 
                                            "type": "string", 
                                            "description": "The name of the scheduler function to use to schedule this job, this is almost always \"job.run\"", 
                                            "title": "function"
                                        }, 
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of masters on which to run runner and wheel commands.", 
                                            "title": "masters"
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "Name of this schedule", 
                                            "title": "name"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "Dictionary with targeting information", 
                                            "title": "tgt"
                                        }, 
                                        "schedule": {
                                            "type": "object", 
                                            "description": "The schedule details for the job", 
                                            "$ref": "#/definitions/SchedulerScheduleSchema"
                                        }, 
                                        "cmd": {
                                            "enumNames": [], 
                                            "enum": [
                                                "local", 
                                                "runner", 
                                                "wheel", 
                                                "ssh"
                                            ], 
                                            "type": "string", 
                                            "description": "Command for job (local, runner, ssh, wheel)", 
                                            "title": "cmd"
                                        }, 
                                        "enabled": {
                                            "type": "boolean", 
                                            "description": "Boolean to enable/disable the schedule.", 
                                            "title": "enabled"
                                        }, 
                                        "delete_fields": {
                                            "items": {
                                                "type": "string", 
                                                "title": "delete_fields"
                                            }, 
                                            "type": "array", 
                                            "description": "List of fields to remove from the schedule.", 
                                            "title": "delete_fields"
                                        }, 
                                        "arg": {
                                            "type": "object", 
                                            "description": "Args and kwargs to pass to fun.", 
                                            "$ref": "#/definitions/SchedulerArgKwargSchema"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "The name of the function for this job", 
                                            "title": "fun"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID for a previously created target", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID for a previously created job", 
                                            "title": "job_uuid"
                                        }, 
                                        "uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID for a previously created schedule", 
                                            "title": "uuid"
                                        }
                                    }
                                }, 
                                "WhenWeeklyFieldSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "thu": {
                                            "items": {
                                                "type": "string", 
                                                "title": "thu"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "thu"
                                        }, 
                                        "wed": {
                                            "items": {
                                                "type": "string", 
                                                "title": "wed"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "wed"
                                        }, 
                                        "sun": {
                                            "items": {
                                                "type": "string", 
                                                "title": "sun"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "sun"
                                        }, 
                                        "fri": {
                                            "items": {
                                                "type": "string", 
                                                "title": "fri"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "fri"
                                        }, 
                                        "mon": {
                                            "items": {
                                                "type": "string", 
                                                "title": "mon"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "mon"
                                        }, 
                                        "tue": {
                                            "items": {
                                                "type": "string", 
                                                "title": "tue"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "tue"
                                        }, 
                                        "sat": {
                                            "items": {
                                                "type": "string", 
                                                "title": "sat"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "sat"
                                        }
                                    }
                                }, 
                                "SchedulerSplaySchema": {
                                    "required": [
                                        "end"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "start": {
                                            "description": "Minimum splay value, in seconds, defaults to 0", 
                                            "title": "start", 
                                            "default": 0, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "allow_None": false, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "end": {
                                            "description": "Maximum splay value, in seconds", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "end", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }
                                    }
                                }, 
                                "SchedulerScheduleSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "run_on_start": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "If False, do not execute the job as soon as the scheduler is started", 
                                            "title": "run_on_start"
                                        }, 
                                        "once_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for once, instead of ISO 8601", 
                                            "title": "once_fmt"
                                        }, 
                                        "cron": {
                                            "type": "string", 
                                            "description": "Intervals specified in cron-style instead of seconds, minutes, hours, days", 
                                            "title": "cron"
                                        }, 
                                        "skip_explicit": {
                                            "items": {
                                                "type": "string", 
                                                "title": "skip_explicit"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of dateutil values specifying a date to skip", 
                                            "title": "skip_explicit"
                                        }, 
                                        "timezone": {
                                            "description": "The timezone in which the schedule should should run", 
                                            "title": "timezone", 
                                            "default": "UTC", 
                                            "enum": [
                                                "Africa/Abidjan", 
                                                "Africa/Accra", 
                                                "Africa/Addis_Ababa", 
                                                "Africa/Algiers", 
                                                "Africa/Asmara", 
                                                "Africa/Asmera", 
                                                "Africa/Bamako", 
                                                "Africa/Bangui", 
                                                "Africa/Banjul", 
                                                "Africa/Bissau", 
                                                "Africa/Blantyre", 
                                                "Africa/Brazzaville", 
                                                "Africa/Bujumbura", 
                                                "Africa/Cairo", 
                                                "Africa/Casablanca", 
                                                "Africa/Ceuta", 
                                                "Africa/Conakry", 
                                                "Africa/Dakar", 
                                                "Africa/Dar_es_Salaam", 
                                                "Africa/Djibouti", 
                                                "Africa/Douala", 
                                                "Africa/El_Aaiun", 
                                                "Africa/Freetown", 
                                                "Africa/Gaborone", 
                                                "Africa/Harare", 
                                                "Africa/Johannesburg", 
                                                "Africa/Juba", 
                                                "Africa/Kampala", 
                                                "Africa/Khartoum", 
                                                "Africa/Kigali", 
                                                "Africa/Kinshasa", 
                                                "Africa/Lagos", 
                                                "Africa/Libreville", 
                                                "Africa/Lome", 
                                                "Africa/Luanda", 
                                                "Africa/Lubumbashi", 
                                                "Africa/Lusaka", 
                                                "Africa/Malabo", 
                                                "Africa/Maputo", 
                                                "Africa/Maseru", 
                                                "Africa/Mbabane", 
                                                "Africa/Mogadishu", 
                                                "Africa/Monrovia", 
                                                "Africa/Nairobi", 
                                                "Africa/Ndjamena", 
                                                "Africa/Niamey", 
                                                "Africa/Nouakchott", 
                                                "Africa/Ouagadougou", 
                                                "Africa/Porto-Novo", 
                                                "Africa/Sao_Tome", 
                                                "Africa/Timbuktu", 
                                                "Africa/Tripoli", 
                                                "Africa/Tunis", 
                                                "Africa/Windhoek", 
                                                "America/Adak", 
                                                "America/Anchorage", 
                                                "America/Anguilla", 
                                                "America/Antigua", 
                                                "America/Araguaina", 
                                                "America/Argentina/Buenos_Aires", 
                                                "America/Argentina/Catamarca", 
                                                "America/Argentina/ComodRivadavia", 
                                                "America/Argentina/Cordoba", 
                                                "America/Argentina/Jujuy", 
                                                "America/Argentina/La_Rioja", 
                                                "America/Argentina/Mendoza", 
                                                "America/Argentina/Rio_Gallegos", 
                                                "America/Argentina/Salta", 
                                                "America/Argentina/San_Juan", 
                                                "America/Argentina/San_Luis", 
                                                "America/Argentina/Tucuman", 
                                                "America/Argentina/Ushuaia", 
                                                "America/Aruba", 
                                                "America/Asuncion", 
                                                "America/Atikokan", 
                                                "America/Atka", 
                                                "America/Bahia", 
                                                "America/Bahia_Banderas", 
                                                "America/Barbados", 
                                                "America/Belem", 
                                                "America/Belize", 
                                                "America/Blanc-Sablon", 
                                                "America/Boa_Vista", 
                                                "America/Bogota", 
                                                "America/Boise", 
                                                "America/Buenos_Aires", 
                                                "America/Cambridge_Bay", 
                                                "America/Campo_Grande", 
                                                "America/Cancun", 
                                                "America/Caracas", 
                                                "America/Catamarca", 
                                                "America/Cayenne", 
                                                "America/Cayman", 
                                                "America/Chicago", 
                                                "America/Chihuahua", 
                                                "America/Coral_Harbour", 
                                                "America/Cordoba", 
                                                "America/Costa_Rica", 
                                                "America/Creston", 
                                                "America/Cuiaba", 
                                                "America/Curacao", 
                                                "America/Danmarkshavn", 
                                                "America/Dawson", 
                                                "America/Dawson_Creek", 
                                                "America/Denver", 
                                                "America/Detroit", 
                                                "America/Dominica", 
                                                "America/Edmonton", 
                                                "America/Eirunepe", 
                                                "America/El_Salvador", 
                                                "America/Ensenada", 
                                                "America/Fort_Nelson", 
                                                "America/Fort_Wayne", 
                                                "America/Fortaleza", 
                                                "America/Glace_Bay", 
                                                "America/Godthab", 
                                                "America/Goose_Bay", 
                                                "America/Grand_Turk", 
                                                "America/Grenada", 
                                                "America/Guadeloupe", 
                                                "America/Guatemala", 
                                                "America/Guayaquil", 
                                                "America/Guyana", 
                                                "America/Halifax", 
                                                "America/Havana", 
                                                "America/Hermosillo", 
                                                "America/Indiana/Indianapolis", 
                                                "America/Indiana/Knox", 
                                                "America/Indiana/Marengo", 
                                                "America/Indiana/Petersburg", 
                                                "America/Indiana/Tell_City", 
                                                "America/Indiana/Vevay", 
                                                "America/Indiana/Vincennes", 
                                                "America/Indiana/Winamac", 
                                                "America/Indianapolis", 
                                                "America/Inuvik", 
                                                "America/Iqaluit", 
                                                "America/Jamaica", 
                                                "America/Jujuy", 
                                                "America/Juneau", 
                                                "America/Kentucky/Louisville", 
                                                "America/Kentucky/Monticello", 
                                                "America/Knox_IN", 
                                                "America/Kralendijk", 
                                                "America/La_Paz", 
                                                "America/Lima", 
                                                "America/Los_Angeles", 
                                                "America/Louisville", 
                                                "America/Lower_Princes", 
                                                "America/Maceio", 
                                                "America/Managua", 
                                                "America/Manaus", 
                                                "America/Marigot", 
                                                "America/Martinique", 
                                                "America/Matamoros", 
                                                "America/Mazatlan", 
                                                "America/Mendoza", 
                                                "America/Menominee", 
                                                "America/Merida", 
                                                "America/Metlakatla", 
                                                "America/Mexico_City", 
                                                "America/Miquelon", 
                                                "America/Moncton", 
                                                "America/Monterrey", 
                                                "America/Montevideo", 
                                                "America/Montreal", 
                                                "America/Montserrat", 
                                                "America/Nassau", 
                                                "America/New_York", 
                                                "America/Nipigon", 
                                                "America/Nome", 
                                                "America/Noronha", 
                                                "America/North_Dakota/Beulah", 
                                                "America/North_Dakota/Center", 
                                                "America/North_Dakota/New_Salem", 
                                                "America/Ojinaga", 
                                                "America/Panama", 
                                                "America/Pangnirtung", 
                                                "America/Paramaribo", 
                                                "America/Phoenix", 
                                                "America/Port-au-Prince", 
                                                "America/Port_of_Spain", 
                                                "America/Porto_Acre", 
                                                "America/Porto_Velho", 
                                                "America/Puerto_Rico", 
                                                "America/Punta_Arenas", 
                                                "America/Rainy_River", 
                                                "America/Rankin_Inlet", 
                                                "America/Recife", 
                                                "America/Regina", 
                                                "America/Resolute", 
                                                "America/Rio_Branco", 
                                                "America/Rosario", 
                                                "America/Santa_Isabel", 
                                                "America/Santarem", 
                                                "America/Santiago", 
                                                "America/Santo_Domingo", 
                                                "America/Sao_Paulo", 
                                                "America/Scoresbysund", 
                                                "America/Shiprock", 
                                                "America/Sitka", 
                                                "America/St_Barthelemy", 
                                                "America/St_Johns", 
                                                "America/St_Kitts", 
                                                "America/St_Lucia", 
                                                "America/St_Thomas", 
                                                "America/St_Vincent", 
                                                "America/Swift_Current", 
                                                "America/Tegucigalpa", 
                                                "America/Thule", 
                                                "America/Thunder_Bay", 
                                                "America/Tijuana", 
                                                "America/Toronto", 
                                                "America/Tortola", 
                                                "America/Vancouver", 
                                                "America/Virgin", 
                                                "America/Whitehorse", 
                                                "America/Winnipeg", 
                                                "America/Yakutat", 
                                                "America/Yellowknife", 
                                                "Antarctica/Casey", 
                                                "Antarctica/Davis", 
                                                "Antarctica/DumontDUrville", 
                                                "Antarctica/Macquarie", 
                                                "Antarctica/Mawson", 
                                                "Antarctica/McMurdo", 
                                                "Antarctica/Palmer", 
                                                "Antarctica/Rothera", 
                                                "Antarctica/South_Pole", 
                                                "Antarctica/Syowa", 
                                                "Antarctica/Troll", 
                                                "Antarctica/Vostok", 
                                                "Arctic/Longyearbyen", 
                                                "Asia/Aden", 
                                                "Asia/Almaty", 
                                                "Asia/Amman", 
                                                "Asia/Anadyr", 
                                                "Asia/Aqtau", 
                                                "Asia/Aqtobe", 
                                                "Asia/Ashgabat", 
                                                "Asia/Ashkhabad", 
                                                "Asia/Atyrau", 
                                                "Asia/Baghdad", 
                                                "Asia/Bahrain", 
                                                "Asia/Baku", 
                                                "Asia/Bangkok", 
                                                "Asia/Barnaul", 
                                                "Asia/Beirut", 
                                                "Asia/Bishkek", 
                                                "Asia/Brunei", 
                                                "Asia/Calcutta", 
                                                "Asia/Chita", 
                                                "Asia/Choibalsan", 
                                                "Asia/Chongqing", 
                                                "Asia/Chungking", 
                                                "Asia/Colombo", 
                                                "Asia/Dacca", 
                                                "Asia/Damascus", 
                                                "Asia/Dhaka", 
                                                "Asia/Dili", 
                                                "Asia/Dubai", 
                                                "Asia/Dushanbe", 
                                                "Asia/Famagusta", 
                                                "Asia/Gaza", 
                                                "Asia/Harbin", 
                                                "Asia/Hebron", 
                                                "Asia/Ho_Chi_Minh", 
                                                "Asia/Hong_Kong", 
                                                "Asia/Hovd", 
                                                "Asia/Irkutsk", 
                                                "Asia/Istanbul", 
                                                "Asia/Jakarta", 
                                                "Asia/Jayapura", 
                                                "Asia/Jerusalem", 
                                                "Asia/Kabul", 
                                                "Asia/Kamchatka", 
                                                "Asia/Karachi", 
                                                "Asia/Kashgar", 
                                                "Asia/Kathmandu", 
                                                "Asia/Katmandu", 
                                                "Asia/Khandyga", 
                                                "Asia/Kolkata", 
                                                "Asia/Krasnoyarsk", 
                                                "Asia/Kuala_Lumpur", 
                                                "Asia/Kuching", 
                                                "Asia/Kuwait", 
                                                "Asia/Macao", 
                                                "Asia/Macau", 
                                                "Asia/Magadan", 
                                                "Asia/Makassar", 
                                                "Asia/Manila", 
                                                "Asia/Muscat", 
                                                "Asia/Nicosia", 
                                                "Asia/Novokuznetsk", 
                                                "Asia/Novosibirsk", 
                                                "Asia/Omsk", 
                                                "Asia/Oral", 
                                                "Asia/Phnom_Penh", 
                                                "Asia/Pontianak", 
                                                "Asia/Pyongyang", 
                                                "Asia/Qatar", 
                                                "Asia/Qyzylorda", 
                                                "Asia/Rangoon", 
                                                "Asia/Riyadh", 
                                                "Asia/Saigon", 
                                                "Asia/Sakhalin", 
                                                "Asia/Samarkand", 
                                                "Asia/Seoul", 
                                                "Asia/Shanghai", 
                                                "Asia/Singapore", 
                                                "Asia/Srednekolymsk", 
                                                "Asia/Taipei", 
                                                "Asia/Tashkent", 
                                                "Asia/Tbilisi", 
                                                "Asia/Tehran", 
                                                "Asia/Tel_Aviv", 
                                                "Asia/Thimbu", 
                                                "Asia/Thimphu", 
                                                "Asia/Tokyo", 
                                                "Asia/Tomsk", 
                                                "Asia/Ujung_Pandang", 
                                                "Asia/Ulaanbaatar", 
                                                "Asia/Ulan_Bator", 
                                                "Asia/Urumqi", 
                                                "Asia/Ust-Nera", 
                                                "Asia/Vientiane", 
                                                "Asia/Vladivostok", 
                                                "Asia/Yakutsk", 
                                                "Asia/Yangon", 
                                                "Asia/Yekaterinburg", 
                                                "Asia/Yerevan", 
                                                "Atlantic/Azores", 
                                                "Atlantic/Bermuda", 
                                                "Atlantic/Canary", 
                                                "Atlantic/Cape_Verde", 
                                                "Atlantic/Faeroe", 
                                                "Atlantic/Faroe", 
                                                "Atlantic/Jan_Mayen", 
                                                "Atlantic/Madeira", 
                                                "Atlantic/Reykjavik", 
                                                "Atlantic/South_Georgia", 
                                                "Atlantic/St_Helena", 
                                                "Atlantic/Stanley", 
                                                "Australia/ACT", 
                                                "Australia/Adelaide", 
                                                "Australia/Brisbane", 
                                                "Australia/Broken_Hill", 
                                                "Australia/Canberra", 
                                                "Australia/Currie", 
                                                "Australia/Darwin", 
                                                "Australia/Eucla", 
                                                "Australia/Hobart", 
                                                "Australia/LHI", 
                                                "Australia/Lindeman", 
                                                "Australia/Lord_Howe", 
                                                "Australia/Melbourne", 
                                                "Australia/NSW", 
                                                "Australia/North", 
                                                "Australia/Perth", 
                                                "Australia/Queensland", 
                                                "Australia/South", 
                                                "Australia/Sydney", 
                                                "Australia/Tasmania", 
                                                "Australia/Victoria", 
                                                "Australia/West", 
                                                "Australia/Yancowinna", 
                                                "Brazil/Acre", 
                                                "Brazil/DeNoronha", 
                                                "Brazil/East", 
                                                "Brazil/West", 
                                                "CET", 
                                                "CST6CDT", 
                                                "Canada/Atlantic", 
                                                "Canada/Central", 
                                                "Canada/Eastern", 
                                                "Canada/Mountain", 
                                                "Canada/Newfoundland", 
                                                "Canada/Pacific", 
                                                "Canada/Saskatchewan", 
                                                "Canada/Yukon", 
                                                "Chile/Continental", 
                                                "Chile/EasterIsland", 
                                                "Cuba", 
                                                "EET", 
                                                "EST", 
                                                "EST5EDT", 
                                                "Egypt", 
                                                "Eire", 
                                                "Etc/GMT", 
                                                "Etc/GMT+0", 
                                                "Etc/GMT+1", 
                                                "Etc/GMT+10", 
                                                "Etc/GMT+11", 
                                                "Etc/GMT+12", 
                                                "Etc/GMT+2", 
                                                "Etc/GMT+3", 
                                                "Etc/GMT+4", 
                                                "Etc/GMT+5", 
                                                "Etc/GMT+6", 
                                                "Etc/GMT+7", 
                                                "Etc/GMT+8", 
                                                "Etc/GMT+9", 
                                                "Etc/GMT-0", 
                                                "Etc/GMT-1", 
                                                "Etc/GMT-10", 
                                                "Etc/GMT-11", 
                                                "Etc/GMT-12", 
                                                "Etc/GMT-13", 
                                                "Etc/GMT-14", 
                                                "Etc/GMT-2", 
                                                "Etc/GMT-3", 
                                                "Etc/GMT-4", 
                                                "Etc/GMT-5", 
                                                "Etc/GMT-6", 
                                                "Etc/GMT-7", 
                                                "Etc/GMT-8", 
                                                "Etc/GMT-9", 
                                                "Etc/GMT0", 
                                                "Etc/Greenwich", 
                                                "Etc/UCT", 
                                                "Etc/UTC", 
                                                "Etc/Universal", 
                                                "Etc/Zulu", 
                                                "Europe/Amsterdam", 
                                                "Europe/Andorra", 
                                                "Europe/Astrakhan", 
                                                "Europe/Athens", 
                                                "Europe/Belfast", 
                                                "Europe/Belgrade", 
                                                "Europe/Berlin", 
                                                "Europe/Bratislava", 
                                                "Europe/Brussels", 
                                                "Europe/Bucharest", 
                                                "Europe/Budapest", 
                                                "Europe/Busingen", 
                                                "Europe/Chisinau", 
                                                "Europe/Copenhagen", 
                                                "Europe/Dublin", 
                                                "Europe/Gibraltar", 
                                                "Europe/Guernsey", 
                                                "Europe/Helsinki", 
                                                "Europe/Isle_of_Man", 
                                                "Europe/Istanbul", 
                                                "Europe/Jersey", 
                                                "Europe/Kaliningrad", 
                                                "Europe/Kiev", 
                                                "Europe/Kirov", 
                                                "Europe/Lisbon", 
                                                "Europe/Ljubljana", 
                                                "Europe/London", 
                                                "Europe/Luxembourg", 
                                                "Europe/Madrid", 
                                                "Europe/Malta", 
                                                "Europe/Mariehamn", 
                                                "Europe/Minsk", 
                                                "Europe/Monaco", 
                                                "Europe/Moscow", 
                                                "Europe/Nicosia", 
                                                "Europe/Oslo", 
                                                "Europe/Paris", 
                                                "Europe/Podgorica", 
                                                "Europe/Prague", 
                                                "Europe/Riga", 
                                                "Europe/Rome", 
                                                "Europe/Samara", 
                                                "Europe/San_Marino", 
                                                "Europe/Sarajevo", 
                                                "Europe/Saratov", 
                                                "Europe/Simferopol", 
                                                "Europe/Skopje", 
                                                "Europe/Sofia", 
                                                "Europe/Stockholm", 
                                                "Europe/Tallinn", 
                                                "Europe/Tirane", 
                                                "Europe/Tiraspol", 
                                                "Europe/Ulyanovsk", 
                                                "Europe/Uzhgorod", 
                                                "Europe/Vaduz", 
                                                "Europe/Vatican", 
                                                "Europe/Vienna", 
                                                "Europe/Vilnius", 
                                                "Europe/Volgograd", 
                                                "Europe/Warsaw", 
                                                "Europe/Zagreb", 
                                                "Europe/Zaporozhye", 
                                                "Europe/Zurich", 
                                                "GB", 
                                                "GB-Eire", 
                                                "GMT", 
                                                "GMT+0", 
                                                "GMT-0", 
                                                "GMT0", 
                                                "Greenwich", 
                                                "HST", 
                                                "Hongkong", 
                                                "Iceland", 
                                                "Indian/Antananarivo", 
                                                "Indian/Chagos", 
                                                "Indian/Christmas", 
                                                "Indian/Cocos", 
                                                "Indian/Comoro", 
                                                "Indian/Kerguelen", 
                                                "Indian/Mahe", 
                                                "Indian/Maldives", 
                                                "Indian/Mauritius", 
                                                "Indian/Mayotte", 
                                                "Indian/Reunion", 
                                                "Iran", 
                                                "Israel", 
                                                "Jamaica", 
                                                "Japan", 
                                                "Kwajalein", 
                                                "Libya", 
                                                "MET", 
                                                "MST", 
                                                "MST7MDT", 
                                                "Mexico/BajaNorte", 
                                                "Mexico/BajaSur", 
                                                "Mexico/General", 
                                                "NZ", 
                                                "NZ-CHAT", 
                                                "Navajo", 
                                                "PRC", 
                                                "PST8PDT", 
                                                "Pacific/Apia", 
                                                "Pacific/Auckland", 
                                                "Pacific/Bougainville", 
                                                "Pacific/Chatham", 
                                                "Pacific/Chuuk", 
                                                "Pacific/Easter", 
                                                "Pacific/Efate", 
                                                "Pacific/Enderbury", 
                                                "Pacific/Fakaofo", 
                                                "Pacific/Fiji", 
                                                "Pacific/Funafuti", 
                                                "Pacific/Galapagos", 
                                                "Pacific/Gambier", 
                                                "Pacific/Guadalcanal", 
                                                "Pacific/Guam", 
                                                "Pacific/Honolulu", 
                                                "Pacific/Johnston", 
                                                "Pacific/Kiritimati", 
                                                "Pacific/Kosrae", 
                                                "Pacific/Kwajalein", 
                                                "Pacific/Majuro", 
                                                "Pacific/Marquesas", 
                                                "Pacific/Midway", 
                                                "Pacific/Nauru", 
                                                "Pacific/Niue", 
                                                "Pacific/Norfolk", 
                                                "Pacific/Noumea", 
                                                "Pacific/Pago_Pago", 
                                                "Pacific/Palau", 
                                                "Pacific/Pitcairn", 
                                                "Pacific/Pohnpei", 
                                                "Pacific/Ponape", 
                                                "Pacific/Port_Moresby", 
                                                "Pacific/Rarotonga", 
                                                "Pacific/Saipan", 
                                                "Pacific/Samoa", 
                                                "Pacific/Tahiti", 
                                                "Pacific/Tarawa", 
                                                "Pacific/Tongatapu", 
                                                "Pacific/Truk", 
                                                "Pacific/Wake", 
                                                "Pacific/Wallis", 
                                                "Pacific/Yap", 
                                                "Poland", 
                                                "Portugal", 
                                                "ROC", 
                                                "ROK", 
                                                "Singapore", 
                                                "Turkey", 
                                                "UCT", 
                                                "US/Alaska", 
                                                "US/Aleutian", 
                                                "US/Arizona", 
                                                "US/Central", 
                                                "US/East-Indiana", 
                                                "US/Eastern", 
                                                "US/Hawaii", 
                                                "US/Indiana-Starke", 
                                                "US/Michigan", 
                                                "US/Mountain", 
                                                "US/Pacific", 
                                                "US/Samoa", 
                                                "UTC", 
                                                "Universal", 
                                                "W-SU", 
                                                "WET", 
                                                "Zulu"
                                            ], 
                                            "enumNames": [], 
                                            "type": "string"
                                        }, 
                                        "when": {
                                            "type": "object", 
                                            "description": "A dictionary mapping of when the schedule should run", 
                                            "$ref": "#/definitions/WhenFieldSchema"
                                        }, 
                                        "skip_times_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for skip times, instead of ISO 8601", 
                                            "title": "skip_times_fmt"
                                        }, 
                                        "until": {
                                            "type": "string", 
                                            "description": "When to stop firing new executions of this job, in dateutil format", 
                                            "title": "until"
                                        }, 
                                        "seconds": {
                                            "description": "interval between job executions in seconds", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "seconds", 
                                            "minimum": 60, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "after": {
                                            "type": "string", 
                                            "description": "When new jobs are allowed to start, in dateutil format", 
                                            "title": "after"
                                        }, 
                                        "return_job": {
                                            "type": "boolean", 
                                            "description": "If False, do not return job data to the master", 
                                            "title": "return_job"
                                        }, 
                                        "hours": {
                                            "description": "Interval between job executions in hours", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "hours", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "until_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for until, instead of ISO 8601", 
                                            "title": "until_fmt"
                                        }, 
                                        "splay": {
                                            "type": "object", 
                                            "description": "A dict containing start and end values, in seconds, specifying a range in which the schedule interval should be randomly adjusted. If not specified, start defaults to 0.", 
                                            "$ref": "#/definitions/SchedulerSplaySchema"
                                        }, 
                                        "days": {
                                            "description": "Interval between job executions in days", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "days", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "after_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for after, instead of ISO 8601", 
                                            "title": "after_fmt"
                                        }, 
                                        "range": {
                                            "type": "object", 
                                            "description": "A dict containing a start and end dateutil value specifying a time range in which a job (specified by seconds, etc) is allowed to run (or not allowed to run, if invert is True", 
                                            "$ref": "#/definitions/SchedulerRangeSchema"
                                        }, 
                                        "jid_include": {
                                            "type": "boolean", 
                                            "description": "If False, with maxrunning, do not check to see if another job with this signature is running", 
                                            "title": "jid_include"
                                        }, 
                                        "maxrunning": {
                                            "description": "The maximum concurrent executions of this job", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "maxrunning", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "skip_times": {
                                            "items": {
                                                "type": "string", 
                                                "title": "skip_times"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of dateutil values specifying a date to skip", 
                                            "title": "skip_times"
                                        }, 
                                        "minutes": {
                                            "description": "Interval between job executions in minutes", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "minutes", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "once": {
                                            "type": "string", 
                                            "description": "An ISO 8601 value of a single time in which to run the job", 
                                            "title": "once"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/UpdateSchedulerSchema"
                        }, 
                        "parameters": [
                            [
                                "name", 
                                null
                            ], 
                            [
                                "schedule", 
                                null
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "arg", 
                                null
                            ], 
                            [
                                "tgt", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "uuid", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "function", 
                                "job.run"
                            ], 
                            [
                                "enabled", 
                                null
                            ], 
                            [
                                "delete_fields", 
                                null
                            ]
                        ], 
                        "signature": "update(name: typing.Union[str, NoneType], schedule: typing.Union[dict, NoneType], masters: typing.Union[list, NoneType], cmd: typing.Union[str, NoneType], arg: typing.Union[dict, NoneType], tgt: typing.Union[dict, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], job_uuid: typing.Union[uuid.UUID, NoneType], uuid: typing.Union[uuid.UUID, NoneType], fun: typing.Union[str, NoneType], function: 'unicode' = job.run, enabled: typing.Union[bool, NoneType], delete_fields: typing.Union[typing.List[str], NoneType])"
                    }, 
                    "formatted": "signature: 'update(name: typing.Union[str, NoneType], schedule: typing.Union[dict,\n  NoneType], masters: typing.Union[list, NoneType], cmd: typing.Union[str, NoneType],\n  arg: typing.Union[dict, NoneType], tgt: typing.Union[dict, NoneType], tgt_uuid:\n  typing.Union[uuid.UUID, NoneType], job_uuid: typing.Union[uuid.UUID, NoneType],\n  uuid: typing.Union[uuid.UUID, NoneType], fun: typing.Union[str, NoneType], function:\n  ''unicode'' = job.run, enabled: typing.Union[bool, NoneType], delete_fields: typing.Union[typing.List[str],\n  NoneType])'\ndoc: \"Update a schedule.\\n\\nSee :ref:`schedules` for more information.\\n\\n:param str\\\n  \\ name: The name of the schedule item\\n:param dict schedule: A dictionary with schedule\\\n  \\ details.\\n:param list masters: List of masters on which to execute runner and\\\n  \\ wheel commands.\\n:param str cmd: One of local, runner, ssh, wheel\\n:param dict\\\n  \\ arg: Argument dictionary containing kwargs and args for fun below\\n:param dict\\\n  \\ tgt: The minion target dictionary (use this or tgt_uuid, not both)\\n:param str\\\n  \\ tgt_uuid: a UUID for an already saved target (use this or tgt, not both)\\n:param\\\n  \\ str job_uuid: a UUID for an already saved job (use this or fun+arg, not both)\\n\\\n  :param str fun: The function to run (use this or job_uuid, not both)\\n:param bool\\\n  \\ enabled: Set the schedule job enabled or disabled\\n\\n`arg` should have this format:\\n\\\n  \\n.. code-block:: python\\n\\n    arg: { 'arg': [<arg1>, <arg2>, ..., <argn>],\\n \\\n  \\          'kwarg': { '<key1>': <val1>,\\n                      '<key2>': <val2>,\\n\\\n  \\                      ...\\n                      '<keyn>': <valn> }\\n        }\\n\\\n  \\n`schedule` should have this format:\\n\\n.. code-block:: python\\n\\n    schedule:\\\n  \\ { '<descriptor1>': <value1>,\\n                '<descriptor2>': <value1>,\\n   \\\n  \\             ...\\n                '<descriptorn>': <valuen> }\\n\\n`Descriptor` above\\\n  \\ can be a number of things like `seconds`,\\n`once`, `when`, `cron`, etc.  See the\\\n  \\ SaltStack Enterprise documentation\\nfor a complete list.\"\nschema:\n  $ref: '#/definitions/UpdateSchedulerSchema'\n  definitions:\n    SchedulerArgKwargSchema:\n      properties:\n        arg:\n          description: An optional list of args for the function\n          items:\n            title: arg\n            type: string\n          title: arg\n          type: array\n        kwarg:\n          description: An optional dict of kwargs for the function\n          title: kwarg\n          type: object\n      required: []\n      type: object\n    SchedulerRangeSchema:\n      properties:\n        end:\n          description: When to end the range, in dateutil format\n          title: end\n          type: string\n        end_fmt:\n          description: An alternate date format for end\n          title: end_fmt\n          type: string\n        invert:\n          description: Instead of making the range \"run during this time\", make it\n            \"do not run during this time\"\n          title: invert\n          type: boolean\n        start:\n          description: When to start the range, in dateutil format\n          title: start\n          type: string\n        start_fmt:\n          description: An alternate date format for start\n          title: start_fmt\n          type: string\n      required:\n      - end\n      - start\n      type: object\n    SchedulerScheduleSchema:\n      properties:\n        after:\n          description: When new jobs are allowed to start, in dateutil format\n          title: after\n          type: string\n        after_fmt:\n          description: The format to use for after, instead of ISO 8601\n          title: after_fmt\n          type: string\n        cron:\n          description: Intervals specified in cron-style instead of seconds, minutes,\n            hours, days\n          title: cron\n          type: string\n        days:\n          description: Interval between job executions in days\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: days\n          type: number\n        hours:\n          description: Interval between job executions in hours\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: hours\n          type: number\n        jid_include:\n          description: If False, with maxrunning, do not check to see if another job\n            with this signature is running\n          title: jid_include\n          type: boolean\n        maxrunning:\n          description: The maximum concurrent executions of this job\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: maxrunning\n          type: number\n        minutes:\n          description: Interval between job executions in minutes\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: minutes\n          type: number\n        once:\n          description: An ISO 8601 value of a single time in which to run the job\n          title: once\n          type: string\n        once_fmt:\n          description: The format to use for once, instead of ISO 8601\n          title: once_fmt\n          type: string\n        range:\n          $ref: '#/definitions/SchedulerRangeSchema'\n          description: A dict containing a start and end dateutil value specifying\n            a time range in which a job (specified by seconds, etc) is allowed to\n            run (or not allowed to run, if invert is True\n          type: object\n        return_job:\n          description: If False, do not return job data to the master\n          title: return_job\n          type: boolean\n        run_on_start:\n          default: false\n          description: If False, do not execute the job as soon as the scheduler is\n            started\n          title: run_on_start\n          type: boolean\n        seconds:\n          description: interval between job executions in seconds\n          exclusiveMinimum: true\n          format: integer\n          minimum: 60\n          title: seconds\n          type: number\n        skip_explicit:\n          description: A list of dateutil values specifying a date to skip\n          items:\n            title: skip_explicit\n            type: string\n          title: skip_explicit\n          type: array\n        skip_times:\n          description: A list of dateutil values specifying a date to skip\n          items:\n            title: skip_times\n            type: string\n          title: skip_times\n          type: array\n        skip_times_fmt:\n          description: The format to use for skip times, instead of ISO 8601\n          title: skip_times_fmt\n          type: string\n        splay:\n          $ref: '#/definitions/SchedulerSplaySchema'\n          description: A dict containing start and end values, in seconds, specifying\n            a range in which the schedule interval should be randomly adjusted. If\n            not specified, start defaults to 0.\n          type: object\n        timezone:\n          default: UTC\n          description: The timezone in which the schedule should should run\n          enum:\n          - Africa/Abidjan\n          - Africa/Accra\n          - Africa/Addis_Ababa\n          - Africa/Algiers\n          - Africa/Asmara\n          - Africa/Asmera\n          - Africa/Bamako\n          - Africa/Bangui\n          - Africa/Banjul\n          - Africa/Bissau\n          - Africa/Blantyre\n          - Africa/Brazzaville\n          - Africa/Bujumbura\n          - Africa/Cairo\n          - Africa/Casablanca\n          - Africa/Ceuta\n          - Africa/Conakry\n          - Africa/Dakar\n          - Africa/Dar_es_Salaam\n          - Africa/Djibouti\n          - Africa/Douala\n          - Africa/El_Aaiun\n          - Africa/Freetown\n          - Africa/Gaborone\n          - Africa/Harare\n          - Africa/Johannesburg\n          - Africa/Juba\n          - Africa/Kampala\n          - Africa/Khartoum\n          - Africa/Kigali\n          - Africa/Kinshasa\n          - Africa/Lagos\n          - Africa/Libreville\n          - Africa/Lome\n          - Africa/Luanda\n          - Africa/Lubumbashi\n          - Africa/Lusaka\n          - Africa/Malabo\n          - Africa/Maputo\n          - Africa/Maseru\n          - Africa/Mbabane\n          - Africa/Mogadishu\n          - Africa/Monrovia\n          - Africa/Nairobi\n          - Africa/Ndjamena\n          - Africa/Niamey\n          - Africa/Nouakchott\n          - Africa/Ouagadougou\n          - Africa/Porto-Novo\n          - Africa/Sao_Tome\n          - Africa/Timbuktu\n          - Africa/Tripoli\n          - Africa/Tunis\n          - Africa/Windhoek\n          - America/Adak\n          - America/Anchorage\n          - America/Anguilla\n          - America/Antigua\n          - America/Araguaina\n          - America/Argentina/Buenos_Aires\n          - America/Argentina/Catamarca\n          - America/Argentina/ComodRivadavia\n          - America/Argentina/Cordoba\n          - America/Argentina/Jujuy\n          - America/Argentina/La_Rioja\n          - America/Argentina/Mendoza\n          - America/Argentina/Rio_Gallegos\n          - America/Argentina/Salta\n          - America/Argentina/San_Juan\n          - America/Argentina/San_Luis\n          - America/Argentina/Tucuman\n          - America/Argentina/Ushuaia\n          - America/Aruba\n          - America/Asuncion\n          - America/Atikokan\n          - America/Atka\n          - America/Bahia\n          - America/Bahia_Banderas\n          - America/Barbados\n          - America/Belem\n          - America/Belize\n          - America/Blanc-Sablon\n          - America/Boa_Vista\n          - America/Bogota\n          - America/Boise\n          - America/Buenos_Aires\n          - America/Cambridge_Bay\n          - America/Campo_Grande\n          - America/Cancun\n          - America/Caracas\n          - America/Catamarca\n          - America/Cayenne\n          - America/Cayman\n          - America/Chicago\n          - America/Chihuahua\n          - America/Coral_Harbour\n          - America/Cordoba\n          - America/Costa_Rica\n          - America/Creston\n          - America/Cuiaba\n          - America/Curacao\n          - America/Danmarkshavn\n          - America/Dawson\n          - America/Dawson_Creek\n          - America/Denver\n          - America/Detroit\n          - America/Dominica\n          - America/Edmonton\n          - America/Eirunepe\n          - America/El_Salvador\n          - America/Ensenada\n          - America/Fort_Nelson\n          - America/Fort_Wayne\n          - America/Fortaleza\n          - America/Glace_Bay\n          - America/Godthab\n          - America/Goose_Bay\n          - America/Grand_Turk\n          - America/Grenada\n          - America/Guadeloupe\n          - America/Guatemala\n          - America/Guayaquil\n          - America/Guyana\n          - America/Halifax\n          - America/Havana\n          - America/Hermosillo\n          - America/Indiana/Indianapolis\n          - America/Indiana/Knox\n          - America/Indiana/Marengo\n          - America/Indiana/Petersburg\n          - America/Indiana/Tell_City\n          - America/Indiana/Vevay\n          - America/Indiana/Vincennes\n          - America/Indiana/Winamac\n          - America/Indianapolis\n          - America/Inuvik\n          - America/Iqaluit\n          - America/Jamaica\n          - America/Jujuy\n          - America/Juneau\n          - America/Kentucky/Louisville\n          - America/Kentucky/Monticello\n          - America/Knox_IN\n          - America/Kralendijk\n          - America/La_Paz\n          - America/Lima\n          - America/Los_Angeles\n          - America/Louisville\n          - America/Lower_Princes\n          - America/Maceio\n          - America/Managua\n          - America/Manaus\n          - America/Marigot\n          - America/Martinique\n          - America/Matamoros\n          - America/Mazatlan\n          - America/Mendoza\n          - America/Menominee\n          - America/Merida\n          - America/Metlakatla\n          - America/Mexico_City\n          - America/Miquelon\n          - America/Moncton\n          - America/Monterrey\n          - America/Montevideo\n          - America/Montreal\n          - America/Montserrat\n          - America/Nassau\n          - America/New_York\n          - America/Nipigon\n          - America/Nome\n          - America/Noronha\n          - America/North_Dakota/Beulah\n          - America/North_Dakota/Center\n          - America/North_Dakota/New_Salem\n          - America/Ojinaga\n          - America/Panama\n          - America/Pangnirtung\n          - America/Paramaribo\n          - America/Phoenix\n          - America/Port-au-Prince\n          - America/Port_of_Spain\n          - America/Porto_Acre\n          - America/Porto_Velho\n          - America/Puerto_Rico\n          - America/Punta_Arenas\n          - America/Rainy_River\n          - America/Rankin_Inlet\n          - America/Recife\n          - America/Regina\n          - America/Resolute\n          - America/Rio_Branco\n          - America/Rosario\n          - America/Santa_Isabel\n          - America/Santarem\n          - America/Santiago\n          - America/Santo_Domingo\n          - America/Sao_Paulo\n          - America/Scoresbysund\n          - America/Shiprock\n          - America/Sitka\n          - America/St_Barthelemy\n          - America/St_Johns\n          - America/St_Kitts\n          - America/St_Lucia\n          - America/St_Thomas\n          - America/St_Vincent\n          - America/Swift_Current\n          - America/Tegucigalpa\n          - America/Thule\n          - America/Thunder_Bay\n          - America/Tijuana\n          - America/Toronto\n          - America/Tortola\n          - America/Vancouver\n          - America/Virgin\n          - America/Whitehorse\n          - America/Winnipeg\n          - America/Yakutat\n          - America/Yellowknife\n          - Antarctica/Casey\n          - Antarctica/Davis\n          - Antarctica/DumontDUrville\n          - Antarctica/Macquarie\n          - Antarctica/Mawson\n          - Antarctica/McMurdo\n          - Antarctica/Palmer\n          - Antarctica/Rothera\n          - Antarctica/South_Pole\n          - Antarctica/Syowa\n          - Antarctica/Troll\n          - Antarctica/Vostok\n          - Arctic/Longyearbyen\n          - Asia/Aden\n          - Asia/Almaty\n          - Asia/Amman\n          - Asia/Anadyr\n          - Asia/Aqtau\n          - Asia/Aqtobe\n          - Asia/Ashgabat\n          - Asia/Ashkhabad\n          - Asia/Atyrau\n          - Asia/Baghdad\n          - Asia/Bahrain\n          - Asia/Baku\n          - Asia/Bangkok\n          - Asia/Barnaul\n          - Asia/Beirut\n          - Asia/Bishkek\n          - Asia/Brunei\n          - Asia/Calcutta\n          - Asia/Chita\n          - Asia/Choibalsan\n          - Asia/Chongqing\n          - Asia/Chungking\n          - Asia/Colombo\n          - Asia/Dacca\n          - Asia/Damascus\n          - Asia/Dhaka\n          - Asia/Dili\n          - Asia/Dubai\n          - Asia/Dushanbe\n          - Asia/Famagusta\n          - Asia/Gaza\n          - Asia/Harbin\n          - Asia/Hebron\n          - Asia/Ho_Chi_Minh\n          - Asia/Hong_Kong\n          - Asia/Hovd\n          - Asia/Irkutsk\n          - Asia/Istanbul\n          - Asia/Jakarta\n          - Asia/Jayapura\n          - Asia/Jerusalem\n          - Asia/Kabul\n          - Asia/Kamchatka\n          - Asia/Karachi\n          - Asia/Kashgar\n          - Asia/Kathmandu\n          - Asia/Katmandu\n          - Asia/Khandyga\n          - Asia/Kolkata\n          - Asia/Krasnoyarsk\n          - Asia/Kuala_Lumpur\n          - Asia/Kuching\n          - Asia/Kuwait\n          - Asia/Macao\n          - Asia/Macau\n          - Asia/Magadan\n          - Asia/Makassar\n          - Asia/Manila\n          - Asia/Muscat\n          - Asia/Nicosia\n          - Asia/Novokuznetsk\n          - Asia/Novosibirsk\n          - Asia/Omsk\n          - Asia/Oral\n          - Asia/Phnom_Penh\n          - Asia/Pontianak\n          - Asia/Pyongyang\n          - Asia/Qatar\n          - Asia/Qyzylorda\n          - Asia/Rangoon\n          - Asia/Riyadh\n          - Asia/Saigon\n          - Asia/Sakhalin\n          - Asia/Samarkand\n          - Asia/Seoul\n          - Asia/Shanghai\n          - Asia/Singapore\n          - Asia/Srednekolymsk\n          - Asia/Taipei\n          - Asia/Tashkent\n          - Asia/Tbilisi\n          - Asia/Tehran\n          - Asia/Tel_Aviv\n          - Asia/Thimbu\n          - Asia/Thimphu\n          - Asia/Tokyo\n          - Asia/Tomsk\n          - Asia/Ujung_Pandang\n          - Asia/Ulaanbaatar\n          - Asia/Ulan_Bator\n          - Asia/Urumqi\n          - Asia/Ust-Nera\n          - Asia/Vientiane\n          - Asia/Vladivostok\n          - Asia/Yakutsk\n          - Asia/Yangon\n          - Asia/Yekaterinburg\n          - Asia/Yerevan\n          - Atlantic/Azores\n          - Atlantic/Bermuda\n          - Atlantic/Canary\n          - Atlantic/Cape_Verde\n          - Atlantic/Faeroe\n          - Atlantic/Faroe\n          - Atlantic/Jan_Mayen\n          - Atlantic/Madeira\n          - Atlantic/Reykjavik\n          - Atlantic/South_Georgia\n          - Atlantic/St_Helena\n          - Atlantic/Stanley\n          - Australia/ACT\n          - Australia/Adelaide\n          - Australia/Brisbane\n          - Australia/Broken_Hill\n          - Australia/Canberra\n          - Australia/Currie\n          - Australia/Darwin\n          - Australia/Eucla\n          - Australia/Hobart\n          - Australia/LHI\n          - Australia/Lindeman\n          - Australia/Lord_Howe\n          - Australia/Melbourne\n          - Australia/NSW\n          - Australia/North\n          - Australia/Perth\n          - Australia/Queensland\n          - Australia/South\n          - Australia/Sydney\n          - Australia/Tasmania\n          - Australia/Victoria\n          - Australia/West\n          - Australia/Yancowinna\n          - Brazil/Acre\n          - Brazil/DeNoronha\n          - Brazil/East\n          - Brazil/West\n          - CET\n          - CST6CDT\n          - Canada/Atlantic\n          - Canada/Central\n          - Canada/Eastern\n          - Canada/Mountain\n          - Canada/Newfoundland\n          - Canada/Pacific\n          - Canada/Saskatchewan\n          - Canada/Yukon\n          - Chile/Continental\n          - Chile/EasterIsland\n          - Cuba\n          - EET\n          - EST\n          - EST5EDT\n          - Egypt\n          - Eire\n          - Etc/GMT\n          - Etc/GMT+0\n          - Etc/GMT+1\n          - Etc/GMT+10\n          - Etc/GMT+11\n          - Etc/GMT+12\n          - Etc/GMT+2\n          - Etc/GMT+3\n          - Etc/GMT+4\n          - Etc/GMT+5\n          - Etc/GMT+6\n          - Etc/GMT+7\n          - Etc/GMT+8\n          - Etc/GMT+9\n          - Etc/GMT-0\n          - Etc/GMT-1\n          - Etc/GMT-10\n          - Etc/GMT-11\n          - Etc/GMT-12\n          - Etc/GMT-13\n          - Etc/GMT-14\n          - Etc/GMT-2\n          - Etc/GMT-3\n          - Etc/GMT-4\n          - Etc/GMT-5\n          - Etc/GMT-6\n          - Etc/GMT-7\n          - Etc/GMT-8\n          - Etc/GMT-9\n          - Etc/GMT0\n          - Etc/Greenwich\n          - Etc/UCT\n          - Etc/UTC\n          - Etc/Universal\n          - Etc/Zulu\n          - Europe/Amsterdam\n          - Europe/Andorra\n          - Europe/Astrakhan\n          - Europe/Athens\n          - Europe/Belfast\n          - Europe/Belgrade\n          - Europe/Berlin\n          - Europe/Bratislava\n          - Europe/Brussels\n          - Europe/Bucharest\n          - Europe/Budapest\n          - Europe/Busingen\n          - Europe/Chisinau\n          - Europe/Copenhagen\n          - Europe/Dublin\n          - Europe/Gibraltar\n          - Europe/Guernsey\n          - Europe/Helsinki\n          - Europe/Isle_of_Man\n          - Europe/Istanbul\n          - Europe/Jersey\n          - Europe/Kaliningrad\n          - Europe/Kiev\n          - Europe/Kirov\n          - Europe/Lisbon\n          - Europe/Ljubljana\n          - Europe/London\n          - Europe/Luxembourg\n          - Europe/Madrid\n          - Europe/Malta\n          - Europe/Mariehamn\n          - Europe/Minsk\n          - Europe/Monaco\n          - Europe/Moscow\n          - Europe/Nicosia\n          - Europe/Oslo\n          - Europe/Paris\n          - Europe/Podgorica\n          - Europe/Prague\n          - Europe/Riga\n          - Europe/Rome\n          - Europe/Samara\n          - Europe/San_Marino\n          - Europe/Sarajevo\n          - Europe/Saratov\n          - Europe/Simferopol\n          - Europe/Skopje\n          - Europe/Sofia\n          - Europe/Stockholm\n          - Europe/Tallinn\n          - Europe/Tirane\n          - Europe/Tiraspol\n          - Europe/Ulyanovsk\n          - Europe/Uzhgorod\n          - Europe/Vaduz\n          - Europe/Vatican\n          - Europe/Vienna\n          - Europe/Vilnius\n          - Europe/Volgograd\n          - Europe/Warsaw\n          - Europe/Zagreb\n          - Europe/Zaporozhye\n          - Europe/Zurich\n          - GB\n          - GB-Eire\n          - GMT\n          - GMT+0\n          - GMT-0\n          - GMT0\n          - Greenwich\n          - HST\n          - Hongkong\n          - Iceland\n          - Indian/Antananarivo\n          - Indian/Chagos\n          - Indian/Christmas\n          - Indian/Cocos\n          - Indian/Comoro\n          - Indian/Kerguelen\n          - Indian/Mahe\n          - Indian/Maldives\n          - Indian/Mauritius\n          - Indian/Mayotte\n          - Indian/Reunion\n          - Iran\n          - Israel\n          - Jamaica\n          - Japan\n          - Kwajalein\n          - Libya\n          - MET\n          - MST\n          - MST7MDT\n          - Mexico/BajaNorte\n          - Mexico/BajaSur\n          - Mexico/General\n          - NZ\n          - NZ-CHAT\n          - Navajo\n          - PRC\n          - PST8PDT\n          - Pacific/Apia\n          - Pacific/Auckland\n          - Pacific/Bougainville\n          - Pacific/Chatham\n          - Pacific/Chuuk\n          - Pacific/Easter\n          - Pacific/Efate\n          - Pacific/Enderbury\n          - Pacific/Fakaofo\n          - Pacific/Fiji\n          - Pacific/Funafuti\n          - Pacific/Galapagos\n          - Pacific/Gambier\n          - Pacific/Guadalcanal\n          - Pacific/Guam\n          - Pacific/Honolulu\n          - Pacific/Johnston\n          - Pacific/Kiritimati\n          - Pacific/Kosrae\n          - Pacific/Kwajalein\n          - Pacific/Majuro\n          - Pacific/Marquesas\n          - Pacific/Midway\n          - Pacific/Nauru\n          - Pacific/Niue\n          - Pacific/Norfolk\n          - Pacific/Noumea\n          - Pacific/Pago_Pago\n          - Pacific/Palau\n          - Pacific/Pitcairn\n          - Pacific/Pohnpei\n          - Pacific/Ponape\n          - Pacific/Port_Moresby\n          - Pacific/Rarotonga\n          - Pacific/Saipan\n          - Pacific/Samoa\n          - Pacific/Tahiti\n          - Pacific/Tarawa\n          - Pacific/Tongatapu\n          - Pacific/Truk\n          - Pacific/Wake\n          - Pacific/Wallis\n          - Pacific/Yap\n          - Poland\n          - Portugal\n          - ROC\n          - ROK\n          - Singapore\n          - Turkey\n          - UCT\n          - US/Alaska\n          - US/Aleutian\n          - US/Arizona\n          - US/Central\n          - US/East-Indiana\n          - US/Eastern\n          - US/Hawaii\n          - US/Indiana-Starke\n          - US/Michigan\n          - US/Mountain\n          - US/Pacific\n          - US/Samoa\n          - UTC\n          - Universal\n          - W-SU\n          - WET\n          - Zulu\n          enumNames: []\n          title: timezone\n          type: string\n        until:\n          description: When to stop firing new executions of this job, in dateutil\n            format\n          title: until\n          type: string\n        until_fmt:\n          description: The format to use for until, instead of ISO 8601\n          title: until_fmt\n          type: string\n        when:\n          $ref: '#/definitions/WhenFieldSchema'\n          description: A dictionary mapping of when the schedule should run\n          type: object\n      required: []\n      type: object\n    SchedulerSplaySchema:\n      properties:\n        end:\n          description: Maximum splay value, in seconds\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: end\n          type: number\n        start:\n          allow_None: false\n          default: 0\n          description: Minimum splay value, in seconds, defaults to 0\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: start\n          type: number\n      required:\n      - end\n      type: object\n    UpdateSchedulerSchema:\n      properties:\n        arg:\n          $ref: '#/definitions/SchedulerArgKwargSchema'\n          description: Args and kwargs to pass to fun.\n          type: object\n        cmd:\n          description: Command for job (local, runner, ssh, wheel)\n          enum:\n          - local\n          - runner\n          - wheel\n          - ssh\n          enumNames: []\n          title: cmd\n          type: string\n        delete_fields:\n          description: List of fields to remove from the schedule.\n          items:\n            title: delete_fields\n            type: string\n          title: delete_fields\n          type: array\n        enabled:\n          description: Boolean to enable/disable the schedule.\n          title: enabled\n          type: boolean\n        fun:\n          description: The name of the function for this job\n          title: fun\n          type: string\n        function:\n          default: job.run\n          description: The name of the scheduler function to use to schedule this\n            job, this is almost always \"job.run\"\n          title: function\n          type: string\n        job_uuid:\n          description: UUID for a previously created job\n          format: uuid\n          title: job_uuid\n          type: string\n        masters:\n          description: A list of masters on which to run runner and wheel commands.\n          items:\n            title: masters\n            type: string\n          title: masters\n          type: array\n        name:\n          description: Name of this schedule\n          title: name\n          type: string\n        schedule:\n          $ref: '#/definitions/SchedulerScheduleSchema'\n          description: The schedule details for the job\n          type: object\n        tgt:\n          description: Dictionary with targeting information\n          title: tgt\n          type: object\n        tgt_uuid:\n          description: UUID for a previously created target\n          format: uuid\n          title: tgt_uuid\n          type: string\n        uuid:\n          description: UUID for a previously created schedule\n          format: uuid\n          title: uuid\n          type: string\n      required: []\n      type: object\n    WhenFieldSchema:\n      properties:\n        daily:\n          description: List of time strings\n          items:\n            title: daily\n            type: string\n          title: daily\n          type: array\n        weekly:\n          $ref: '#/definitions/WhenWeeklyFieldSchema'\n          type: object\n      required: []\n      type: object\n    WhenWeeklyFieldSchema:\n      properties:\n        fri:\n          description: List of time strings for the respective day of the week\n          items:\n            title: fri\n            type: string\n          title: fri\n          type: array\n        mon:\n          description: List of time strings for the respective day of the week\n          items:\n            title: mon\n            type: string\n          title: mon\n          type: array\n        sat:\n          description: List of time strings for the respective day of the week\n          items:\n            title: sat\n            type: string\n          title: sat\n          type: array\n        sun:\n          description: List of time strings for the respective day of the week\n          items:\n            title: sun\n            type: string\n          title: sun\n          type: array\n        thu:\n          description: List of time strings for the respective day of the week\n          items:\n            title: thu\n            type: string\n          title: thu\n          type: array\n        tue:\n          description: List of time strings for the respective day of the week\n          items:\n            title: tue\n            type: string\n          title: tue\n          type: array\n        wed:\n          description: List of time strings for the respective day of the week\n          items:\n            title: wed\n            type: string\n          title: wed\n          type: array\n      required: []\n      type: object\nparameters:\n- - name\n  - null\n- - schedule\n  - null\n- - masters\n  - null\n- - cmd\n  - null\n- - arg\n  - null\n- - tgt\n  - null\n- - tgt_uuid\n  - null\n- - job_uuid\n  - null\n- - uuid\n  - null\n- - fun\n  - null\n- - function\n  - job.run\n- - enabled\n  - null\n- - delete_fields\n  - null"
                }, 
                "remove": {
                    "detailed": {
                        "doc": "Remove a schedule by uuid.\n\n:param uuid: The uuid of the schedule to be removed.", 
                        "schema": {
                            "definitions": {
                                "RemoveScheduleSchema": {
                                    "required": [
                                        "uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The UUID of the schedule to be removed.", 
                                            "title": "uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/RemoveScheduleSchema"
                        }, 
                        "parameters": [
                            [
                                "uuid"
                            ]
                        ], 
                        "signature": "remove(uuid: UUID)"
                    }, 
                    "formatted": "signature: 'remove(uuid: UUID)'\ndoc: 'Remove a schedule by uuid.\n\n\n  :param uuid: The uuid of the schedule to be removed.'\nschema:\n  $ref: '#/definitions/RemoveScheduleSchema'\n  definitions:\n    RemoveScheduleSchema:\n      properties:\n        uuid:\n          description: The UUID of the schedule to be removed.\n          format: uuid\n          title: uuid\n          type: string\n      required:\n      - uuid\n      type: object\nparameters:\n- - uuid"
                }, 
                "get_inflight": {
                    "detailed": {
                        "doc": "Get a list of jobs that are in progress.\n\nParameters\n:cmd: A command name to match against.\n:filter_find_job: Exclude commands referring to saltutil.find_job.\n:fun: Command (function) name that was called for this job.\n:include_adhoc: When this is true, you can search jobs that are running\n    (in-flight), but were not scheduled via the scheduler API (ad-hoc).\n:job_names: A list of job names to match against.\n:page: This specifies which page, after the first, of results to return.\n:limit: Limit search to this number of jobs.\n:reverse: Sort ascending (False) or descending (True).\n:sched_names: A list of schedule names to match against.\n:sort_by: Sort by the specified field, such as 'start_time'.\n:tgt_names: A list of target names to match against.\n:paused: Filter on only paused jobs.", 
                        "schema": {
                            "definitions": {
                                "GetInflightSchedulerSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Schedule UUID against which to match.", 
                                            "title": "uuid"
                                        }, 
                                        "include_adhoc": {
                                            "type": "boolean", 
                                            "description": "Include inflight non-scheduled jobs as well", 
                                            "title": "include_adhoc"
                                        }, 
                                        "tgt_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "tgt_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Target names against which to match", 
                                            "title": "tgt_names"
                                        }, 
                                        "daterange": {
                                            "description": "A list of two date strings in ISO 8601 format", 
                                            "title": "daterange", 
                                            "minItems": 2, 
                                            "items": {
                                                "type": "string", 
                                                "title": "daterange"
                                            }, 
                                            "maxItems": 2, 
                                            "type": "array"
                                        }, 
                                        "cmd": {
                                            "type": "string", 
                                            "description": "Match commands that use this cmd name", 
                                            "title": "cmd"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "state", 
                                                "start_time", 
                                                "cmd", 
                                                "fun", 
                                                "tgt_name", 
                                                "job_name", 
                                                "sched_name", 
                                                "user", 
                                                "expected", 
                                                "returned"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "paused": {
                                            "type": "boolean", 
                                            "description": "Return paused jobs", 
                                            "title": "paused"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "sched_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "sched_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Schedule names against which to match", 
                                            "title": "sched_names"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "Match commands that use this function name", 
                                            "title": "fun"
                                        }, 
                                        "job_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "job_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Schedule names against which to match", 
                                            "title": "job_names"
                                        }, 
                                        "daterange_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for daterange", 
                                            "title": "daterange_fmt"
                                        }, 
                                        "filter_find_job": {
                                            "type": "boolean", 
                                            "description": "Exclude commands referring to saltutil.find_job.", 
                                            "title": "filter_find_job"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetInflightSchedulerSchema"
                        }, 
                        "parameters": [
                            [
                                "uuid", 
                                null
                            ], 
                            [
                                "sched_names", 
                                null
                            ], 
                            [
                                "job_names", 
                                null
                            ], 
                            [
                                "tgt_names", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "paused", 
                                null
                            ], 
                            [
                                "include_adhoc", 
                                false
                            ], 
                            [
                                "filter_find_job", 
                                true
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "page", 
                                0
                            ]
                        ], 
                        "signature": "get_inflight(uuid: typing.Union[uuid.UUID, NoneType], sched_names: typing.Union[typing.List, NoneType], job_names: typing.Union[typing.List, NoneType], tgt_names: typing.Union[typing.List, NoneType], fun: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType], paused: typing.Union[bool, NoneType], include_adhoc: typing.Union[bool, NoneType], filter_find_job: typing.Union[bool, NoneType] = True, sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], limit: typing.Union[int, NoneType] = 50, page: typing.Union[int, NoneType])"
                    }, 
                    "formatted": "signature: 'get_inflight(uuid: typing.Union[uuid.UUID, NoneType], sched_names: typing.Union[typing.List,\n  NoneType], job_names: typing.Union[typing.List, NoneType], tgt_names: typing.Union[typing.List,\n  NoneType], fun: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType], paused:\n  typing.Union[bool, NoneType], include_adhoc: typing.Union[bool, NoneType], filter_find_job:\n  typing.Union[bool, NoneType] = True, sort_by: typing.Union[str, NoneType], reverse:\n  typing.Union[bool, NoneType], limit: typing.Union[int, NoneType] = 50, page: typing.Union[int,\n  NoneType])'\ndoc: \"Get a list of jobs that are in progress.\\n\\nParameters\\n:cmd: A command name\\\n  \\ to match against.\\n:filter_find_job: Exclude commands referring to saltutil.find_job.\\n\\\n  :fun: Command (function) name that was called for this job.\\n:include_adhoc: When\\\n  \\ this is true, you can search jobs that are running\\n    (in-flight), but were\\\n  \\ not scheduled via the scheduler API (ad-hoc).\\n:job_names: A list of job names\\\n  \\ to match against.\\n:page: This specifies which page, after the first, of results\\\n  \\ to return.\\n:limit: Limit search to this number of jobs.\\n:reverse: Sort ascending\\\n  \\ (False) or descending (True).\\n:sched_names: A list of schedule names to match\\\n  \\ against.\\n:sort_by: Sort by the specified field, such as 'start_time'.\\n:tgt_names:\\\n  \\ A list of target names to match against.\\n:paused: Filter on only paused jobs.\"\nschema:\n  $ref: '#/definitions/GetInflightSchedulerSchema'\n  definitions:\n    GetInflightSchedulerSchema:\n      properties:\n        cmd:\n          description: Match commands that use this cmd name\n          title: cmd\n          type: string\n        daterange:\n          description: A list of two date strings in ISO 8601 format\n          items:\n            title: daterange\n            type: string\n          maxItems: 2\n          minItems: 2\n          title: daterange\n          type: array\n        daterange_fmt:\n          description: An alternate date format for daterange\n          title: daterange_fmt\n          type: string\n        filter_find_job:\n          description: Exclude commands referring to saltutil.find_job.\n          title: filter_find_job\n          type: boolean\n        fun:\n          description: Match commands that use this function name\n          title: fun\n          type: string\n        include_adhoc:\n          description: Include inflight non-scheduled jobs as well\n          title: include_adhoc\n          type: boolean\n        job_names:\n          description: Schedule names against which to match\n          items:\n            title: job_names\n            type: string\n          title: job_names\n          type: array\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        paused:\n          description: Return paused jobs\n          title: paused\n          type: boolean\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        sched_names:\n          description: Schedule names against which to match\n          items:\n            title: sched_names\n            type: string\n          title: sched_names\n          type: array\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - state\n          - start_time\n          - cmd\n          - fun\n          - tgt_name\n          - job_name\n          - sched_name\n          - user\n          - expected\n          - returned\n          enumNames: []\n          title: sort_by\n          type: string\n        tgt_names:\n          description: Target names against which to match\n          items:\n            title: tgt_names\n            type: string\n          title: tgt_names\n          type: array\n        uuid:\n          description: Schedule UUID against which to match.\n          format: uuid\n          title: uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - uuid\n  - null\n- - sched_names\n  - null\n- - job_names\n  - null\n- - tgt_names\n  - null\n- - fun\n  - null\n- - cmd\n  - null\n- - paused\n  - null\n- - include_adhoc\n  - false\n- - filter_find_job\n  - true\n- - sort_by\n  - null\n- - reverse\n  - false\n- - limit\n  - 50\n- - page\n  - 0"
                }, 
                "search_history": {
                    "detailed": {
                        "doc": "Query the logs of past scheduler runs.\n\nParameters\n:str query: The text to search for\n:bool name: Whether to search schedule names\n:str cmd: One of local, runner, ssh, wheel\n:str fun: The name of the function that was run\n:list masters: The master(s) that the job was assigned to\n:str tgt: A target string to search for\n:bool arg: Whether to search inside *args\n:bool kwarg: Whether to search inside **kwargs\n:list daterange: A list of two date strings in ISO 8601 format\n:int limit: How many records to return at a time\n:int page: Which page of the records to return (offset = page * limit)\n\nThe parameter ``daterange``, which is a date string in ISO8601 format has a\nsibling parameter, ``daterange_fmt``, which is a string that can represent\nan alternate date and time format used to parse the ``daterange`` values.", 
                        "schema": {
                            "definitions": {
                                "SearchHistorySchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "masters": {
                                            "type": "string", 
                                            "description": "A string with a pattern of masters", 
                                            "title": "masters"
                                        }, 
                                        "uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The UUID of the schedule to be saved", 
                                            "title": "uuid"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "A target string to search for", 
                                            "title": "tgt"
                                        }, 
                                        "daterange": {
                                            "description": "A list of two date strings in ISO 8601 format", 
                                            "title": "daterange", 
                                            "minItems": 2, 
                                            "items": {
                                                "type": "string", 
                                                "title": "daterange"
                                            }, 
                                            "maxItems": 2, 
                                            "type": "array"
                                        }, 
                                        "cmd": {
                                            "enumNames": [], 
                                            "enum": [
                                                "local", 
                                                "runner", 
                                                "wheel", 
                                                "ssh"
                                            ], 
                                            "type": "string", 
                                            "description": "One of local, ssh, runner, wheel", 
                                            "title": "cmd"
                                        }, 
                                        "kwarg": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Whether to search inside **kwargs", 
                                            "title": "kwarg"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "arg": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Whether to search inside *args", 
                                            "title": "arg"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "The name of the function for this job", 
                                            "title": "fun"
                                        }, 
                                        "query": {
                                            "type": "string", 
                                            "description": "String to search for in cmd, fun, args fields", 
                                            "title": "query"
                                        }, 
                                        "daterange_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for daterange", 
                                            "title": "daterange_fmt"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "name": {
                                            "type": "boolean", 
                                            "description": "Whether to search schedule names", 
                                            "title": "name"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SearchHistorySchema"
                        }, 
                        "parameters": [
                            [
                                "query", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "name", 
                                false
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "tgt", 
                                null
                            ], 
                            [
                                "arg", 
                                false
                            ], 
                            [
                                "kwarg", 
                                false
                            ], 
                            [
                                "daterange", 
                                null
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "page", 
                                0
                            ]
                        ], 
                        "signature": "search_history(query: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType], name: typing.Union[bool, NoneType], fun: typing.Union[str, NoneType], masters: typing.Union[str, NoneType], tgt: typing.Union[str, NoneType], arg: typing.Union[bool, NoneType], kwarg: typing.Union[bool, NoneType], daterange: typing.Union[list, NoneType], limit: 'int' = 50, page: 'int')"
                    }, 
                    "formatted": "signature: 'search_history(query: typing.Union[str, NoneType], cmd: typing.Union[str,\n  NoneType], name: typing.Union[bool, NoneType], fun: typing.Union[str, NoneType],\n  masters: typing.Union[str, NoneType], tgt: typing.Union[str, NoneType], arg: typing.Union[bool,\n  NoneType], kwarg: typing.Union[bool, NoneType], daterange: typing.Union[list, NoneType],\n  limit: ''int'' = 50, page: ''int'')'\ndoc: 'Query the logs of past scheduler runs.\n\n\n  Parameters\n\n  :str query: The text to search for\n\n  :bool name: Whether to search schedule names\n\n  :str cmd: One of local, runner, ssh, wheel\n\n  :str fun: The name of the function that was run\n\n  :list masters: The master(s) that the job was assigned to\n\n  :str tgt: A target string to search for\n\n  :bool arg: Whether to search inside *args\n\n  :bool kwarg: Whether to search inside **kwargs\n\n  :list daterange: A list of two date strings in ISO 8601 format\n\n  :int limit: How many records to return at a time\n\n  :int page: Which page of the records to return (offset = page * limit)\n\n\n  The parameter ``daterange``, which is a date string in ISO8601 format has a\n\n  sibling parameter, ``daterange_fmt``, which is a string that can represent\n\n  an alternate date and time format used to parse the ``daterange`` values.'\nschema:\n  $ref: '#/definitions/SearchHistorySchema'\n  definitions:\n    SearchHistorySchema:\n      properties:\n        arg:\n          default: false\n          description: Whether to search inside *args\n          title: arg\n          type: boolean\n        cmd:\n          description: One of local, ssh, runner, wheel\n          enum:\n          - local\n          - runner\n          - wheel\n          - ssh\n          enumNames: []\n          title: cmd\n          type: string\n        daterange:\n          description: A list of two date strings in ISO 8601 format\n          items:\n            title: daterange\n            type: string\n          maxItems: 2\n          minItems: 2\n          title: daterange\n          type: array\n        daterange_fmt:\n          description: An alternate date format for daterange\n          title: daterange_fmt\n          type: string\n        fun:\n          description: The name of the function for this job\n          title: fun\n          type: string\n        kwarg:\n          default: false\n          description: Whether to search inside **kwargs\n          title: kwarg\n          type: boolean\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        masters:\n          description: A string with a pattern of masters\n          title: masters\n          type: string\n        name:\n          description: Whether to search schedule names\n          title: name\n          type: boolean\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        query:\n          description: String to search for in cmd, fun, args fields\n          title: query\n          type: string\n        tgt:\n          description: A target string to search for\n          title: tgt\n          type: object\n        uuid:\n          description: The UUID of the schedule to be saved\n          format: uuid\n          title: uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - query\n  - null\n- - cmd\n  - null\n- - name\n  - false\n- - fun\n  - null\n- - masters\n  - null\n- - tgt\n  - null\n- - arg\n  - false\n- - kwarg\n  - false\n- - daterange\n  - null\n- - limit\n  - 50\n- - page\n  - 0"
                }, 
                "save": {
                    "detailed": {
                        "doc": "Add/update a component in the schedule.\n\nSee :ref:`schedules` for more information.\n\n:param str name: The name of the schedule item\n:param dict schedule: A dictionary with schedule details.\n:param list masters: List of masters on which to execute runner and wheel commands.\n:param str cmd: One of local, runner, ssh, wheel\n:param dict arg: Argument dictionary containing kwargs and args for fun below\n:param dict tgt: The minion target dictionary (use this or tgt_uuid, not both)\n:param str tgt_uuid: a UUID for an already saved target (use this or tgt, not both)\n:param str job_uuid: a UUID for an already saved job (use this or fun+arg, not both)\n:param str fun: The function to run (use this or job_uuid, not both)\n:param bool enabled: Set the schedule job enabled or disabled\n\n`arg` should have this format:\n\n.. code-block:: python\n\n    arg: { 'arg': [<arg1>, <arg2>, ..., <argn>],\n           'kwarg': { '<key1>': <val1>,\n                      '<key2>': <val2>,\n                      ...\n                      '<keyn>': <valn> }\n        }\n\n`schedule` should have this format:\n\n.. code-block:: python\n\n    schedule: { '<descriptor1>': <value1>,\n                '<descriptor2>': <value1>,\n                ...\n                '<descriptorn>': <valuen> }\n\n`Descriptor` above can be a number of things like `seconds`,\n`once`, `when`, `cron`, etc.  See the SaltStack Enterprise documentation\nfor a complete list.", 
                        "returns": "UUID", 
                        "schema": {
                            "definitions": {
                                "SchedulerRangeSchema": {
                                    "required": [
                                        "end", 
                                        "start"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "start": {
                                            "type": "string", 
                                            "description": "When to start the range, in dateutil format", 
                                            "title": "start"
                                        }, 
                                        "invert": {
                                            "type": "boolean", 
                                            "description": "Instead of making the range \"run during this time\", make it \"do not run during this time\"", 
                                            "title": "invert"
                                        }, 
                                        "end": {
                                            "type": "string", 
                                            "description": "When to end the range, in dateutil format", 
                                            "title": "end"
                                        }, 
                                        "end_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for end", 
                                            "title": "end_fmt"
                                        }, 
                                        "start_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for start", 
                                            "title": "start_fmt"
                                        }
                                    }
                                }, 
                                "WhenFieldSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "daily": {
                                            "items": {
                                                "type": "string", 
                                                "title": "daily"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings", 
                                            "title": "daily"
                                        }, 
                                        "weekly": {
                                            "type": "object", 
                                            "$ref": "#/definitions/WhenWeeklyFieldSchema"
                                        }
                                    }
                                }, 
                                "SchedulerArgKwargSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "kwarg": {
                                            "type": "object", 
                                            "description": "An optional dict of kwargs for the function", 
                                            "title": "kwarg"
                                        }, 
                                        "arg": {
                                            "items": {
                                                "type": "string", 
                                                "title": "arg"
                                            }, 
                                            "type": "array", 
                                            "description": "An optional list of args for the function", 
                                            "title": "arg"
                                        }
                                    }
                                }, 
                                "SaveSchedulerSchema": {
                                    "required": [
                                        "function", 
                                        "name", 
                                        "schedule"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "function": {
                                            "default": "job.run", 
                                            "type": "string", 
                                            "description": "The name of the scheduler function to use to schedule this job, this is almost always \"job.run\"", 
                                            "title": "function"
                                        }, 
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of masters on which to run runner and wheel commands.", 
                                            "title": "masters"
                                        }, 
                                        "uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The UUID of the schedule to be saved", 
                                            "title": "uuid"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "Dictionary with targeting information", 
                                            "title": "tgt"
                                        }, 
                                        "schedule": {
                                            "type": "object", 
                                            "description": "The schedule details for the job", 
                                            "$ref": "#/definitions/SchedulerScheduleSchema"
                                        }, 
                                        "cmd": {
                                            "enumNames": [], 
                                            "enum": [
                                                "local", 
                                                "runner", 
                                                "wheel", 
                                                "ssh"
                                            ], 
                                            "type": "string", 
                                            "description": "Command for job (local, runner, ssh, wheel)", 
                                            "title": "cmd"
                                        }, 
                                        "enabled": {
                                            "default": true, 
                                            "type": "boolean", 
                                            "description": "Boolean to enable/disable the schedule.", 
                                            "title": "enabled"
                                        }, 
                                        "arg": {
                                            "type": "object", 
                                            "description": "Args and kwargs to pass to fun.", 
                                            "$ref": "#/definitions/SchedulerArgKwargSchema"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "The name of the function for this job", 
                                            "title": "fun"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID for a previously created target", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID for a previously created job", 
                                            "title": "job_uuid"
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "Name of this schedule", 
                                            "title": "name"
                                        }
                                    }
                                }, 
                                "WhenWeeklyFieldSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "thu": {
                                            "items": {
                                                "type": "string", 
                                                "title": "thu"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "thu"
                                        }, 
                                        "wed": {
                                            "items": {
                                                "type": "string", 
                                                "title": "wed"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "wed"
                                        }, 
                                        "sun": {
                                            "items": {
                                                "type": "string", 
                                                "title": "sun"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "sun"
                                        }, 
                                        "fri": {
                                            "items": {
                                                "type": "string", 
                                                "title": "fri"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "fri"
                                        }, 
                                        "mon": {
                                            "items": {
                                                "type": "string", 
                                                "title": "mon"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "mon"
                                        }, 
                                        "tue": {
                                            "items": {
                                                "type": "string", 
                                                "title": "tue"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "tue"
                                        }, 
                                        "sat": {
                                            "items": {
                                                "type": "string", 
                                                "title": "sat"
                                            }, 
                                            "type": "array", 
                                            "description": "List of time strings for the respective day of the week", 
                                            "title": "sat"
                                        }
                                    }
                                }, 
                                "SchedulerSplaySchema": {
                                    "required": [
                                        "end"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "start": {
                                            "description": "Minimum splay value, in seconds, defaults to 0", 
                                            "title": "start", 
                                            "default": 0, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "allow_None": false, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "end": {
                                            "description": "Maximum splay value, in seconds", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "end", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }
                                    }
                                }, 
                                "SchedulerScheduleSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "run_on_start": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "If False, do not execute the job as soon as the scheduler is started", 
                                            "title": "run_on_start"
                                        }, 
                                        "once_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for once, instead of ISO 8601", 
                                            "title": "once_fmt"
                                        }, 
                                        "cron": {
                                            "type": "string", 
                                            "description": "Intervals specified in cron-style instead of seconds, minutes, hours, days", 
                                            "title": "cron"
                                        }, 
                                        "skip_explicit": {
                                            "items": {
                                                "type": "string", 
                                                "title": "skip_explicit"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of dateutil values specifying a date to skip", 
                                            "title": "skip_explicit"
                                        }, 
                                        "timezone": {
                                            "description": "The timezone in which the schedule should should run", 
                                            "title": "timezone", 
                                            "default": "UTC", 
                                            "enum": [
                                                "Africa/Abidjan", 
                                                "Africa/Accra", 
                                                "Africa/Addis_Ababa", 
                                                "Africa/Algiers", 
                                                "Africa/Asmara", 
                                                "Africa/Asmera", 
                                                "Africa/Bamako", 
                                                "Africa/Bangui", 
                                                "Africa/Banjul", 
                                                "Africa/Bissau", 
                                                "Africa/Blantyre", 
                                                "Africa/Brazzaville", 
                                                "Africa/Bujumbura", 
                                                "Africa/Cairo", 
                                                "Africa/Casablanca", 
                                                "Africa/Ceuta", 
                                                "Africa/Conakry", 
                                                "Africa/Dakar", 
                                                "Africa/Dar_es_Salaam", 
                                                "Africa/Djibouti", 
                                                "Africa/Douala", 
                                                "Africa/El_Aaiun", 
                                                "Africa/Freetown", 
                                                "Africa/Gaborone", 
                                                "Africa/Harare", 
                                                "Africa/Johannesburg", 
                                                "Africa/Juba", 
                                                "Africa/Kampala", 
                                                "Africa/Khartoum", 
                                                "Africa/Kigali", 
                                                "Africa/Kinshasa", 
                                                "Africa/Lagos", 
                                                "Africa/Libreville", 
                                                "Africa/Lome", 
                                                "Africa/Luanda", 
                                                "Africa/Lubumbashi", 
                                                "Africa/Lusaka", 
                                                "Africa/Malabo", 
                                                "Africa/Maputo", 
                                                "Africa/Maseru", 
                                                "Africa/Mbabane", 
                                                "Africa/Mogadishu", 
                                                "Africa/Monrovia", 
                                                "Africa/Nairobi", 
                                                "Africa/Ndjamena", 
                                                "Africa/Niamey", 
                                                "Africa/Nouakchott", 
                                                "Africa/Ouagadougou", 
                                                "Africa/Porto-Novo", 
                                                "Africa/Sao_Tome", 
                                                "Africa/Timbuktu", 
                                                "Africa/Tripoli", 
                                                "Africa/Tunis", 
                                                "Africa/Windhoek", 
                                                "America/Adak", 
                                                "America/Anchorage", 
                                                "America/Anguilla", 
                                                "America/Antigua", 
                                                "America/Araguaina", 
                                                "America/Argentina/Buenos_Aires", 
                                                "America/Argentina/Catamarca", 
                                                "America/Argentina/ComodRivadavia", 
                                                "America/Argentina/Cordoba", 
                                                "America/Argentina/Jujuy", 
                                                "America/Argentina/La_Rioja", 
                                                "America/Argentina/Mendoza", 
                                                "America/Argentina/Rio_Gallegos", 
                                                "America/Argentina/Salta", 
                                                "America/Argentina/San_Juan", 
                                                "America/Argentina/San_Luis", 
                                                "America/Argentina/Tucuman", 
                                                "America/Argentina/Ushuaia", 
                                                "America/Aruba", 
                                                "America/Asuncion", 
                                                "America/Atikokan", 
                                                "America/Atka", 
                                                "America/Bahia", 
                                                "America/Bahia_Banderas", 
                                                "America/Barbados", 
                                                "America/Belem", 
                                                "America/Belize", 
                                                "America/Blanc-Sablon", 
                                                "America/Boa_Vista", 
                                                "America/Bogota", 
                                                "America/Boise", 
                                                "America/Buenos_Aires", 
                                                "America/Cambridge_Bay", 
                                                "America/Campo_Grande", 
                                                "America/Cancun", 
                                                "America/Caracas", 
                                                "America/Catamarca", 
                                                "America/Cayenne", 
                                                "America/Cayman", 
                                                "America/Chicago", 
                                                "America/Chihuahua", 
                                                "America/Coral_Harbour", 
                                                "America/Cordoba", 
                                                "America/Costa_Rica", 
                                                "America/Creston", 
                                                "America/Cuiaba", 
                                                "America/Curacao", 
                                                "America/Danmarkshavn", 
                                                "America/Dawson", 
                                                "America/Dawson_Creek", 
                                                "America/Denver", 
                                                "America/Detroit", 
                                                "America/Dominica", 
                                                "America/Edmonton", 
                                                "America/Eirunepe", 
                                                "America/El_Salvador", 
                                                "America/Ensenada", 
                                                "America/Fort_Nelson", 
                                                "America/Fort_Wayne", 
                                                "America/Fortaleza", 
                                                "America/Glace_Bay", 
                                                "America/Godthab", 
                                                "America/Goose_Bay", 
                                                "America/Grand_Turk", 
                                                "America/Grenada", 
                                                "America/Guadeloupe", 
                                                "America/Guatemala", 
                                                "America/Guayaquil", 
                                                "America/Guyana", 
                                                "America/Halifax", 
                                                "America/Havana", 
                                                "America/Hermosillo", 
                                                "America/Indiana/Indianapolis", 
                                                "America/Indiana/Knox", 
                                                "America/Indiana/Marengo", 
                                                "America/Indiana/Petersburg", 
                                                "America/Indiana/Tell_City", 
                                                "America/Indiana/Vevay", 
                                                "America/Indiana/Vincennes", 
                                                "America/Indiana/Winamac", 
                                                "America/Indianapolis", 
                                                "America/Inuvik", 
                                                "America/Iqaluit", 
                                                "America/Jamaica", 
                                                "America/Jujuy", 
                                                "America/Juneau", 
                                                "America/Kentucky/Louisville", 
                                                "America/Kentucky/Monticello", 
                                                "America/Knox_IN", 
                                                "America/Kralendijk", 
                                                "America/La_Paz", 
                                                "America/Lima", 
                                                "America/Los_Angeles", 
                                                "America/Louisville", 
                                                "America/Lower_Princes", 
                                                "America/Maceio", 
                                                "America/Managua", 
                                                "America/Manaus", 
                                                "America/Marigot", 
                                                "America/Martinique", 
                                                "America/Matamoros", 
                                                "America/Mazatlan", 
                                                "America/Mendoza", 
                                                "America/Menominee", 
                                                "America/Merida", 
                                                "America/Metlakatla", 
                                                "America/Mexico_City", 
                                                "America/Miquelon", 
                                                "America/Moncton", 
                                                "America/Monterrey", 
                                                "America/Montevideo", 
                                                "America/Montreal", 
                                                "America/Montserrat", 
                                                "America/Nassau", 
                                                "America/New_York", 
                                                "America/Nipigon", 
                                                "America/Nome", 
                                                "America/Noronha", 
                                                "America/North_Dakota/Beulah", 
                                                "America/North_Dakota/Center", 
                                                "America/North_Dakota/New_Salem", 
                                                "America/Ojinaga", 
                                                "America/Panama", 
                                                "America/Pangnirtung", 
                                                "America/Paramaribo", 
                                                "America/Phoenix", 
                                                "America/Port-au-Prince", 
                                                "America/Port_of_Spain", 
                                                "America/Porto_Acre", 
                                                "America/Porto_Velho", 
                                                "America/Puerto_Rico", 
                                                "America/Punta_Arenas", 
                                                "America/Rainy_River", 
                                                "America/Rankin_Inlet", 
                                                "America/Recife", 
                                                "America/Regina", 
                                                "America/Resolute", 
                                                "America/Rio_Branco", 
                                                "America/Rosario", 
                                                "America/Santa_Isabel", 
                                                "America/Santarem", 
                                                "America/Santiago", 
                                                "America/Santo_Domingo", 
                                                "America/Sao_Paulo", 
                                                "America/Scoresbysund", 
                                                "America/Shiprock", 
                                                "America/Sitka", 
                                                "America/St_Barthelemy", 
                                                "America/St_Johns", 
                                                "America/St_Kitts", 
                                                "America/St_Lucia", 
                                                "America/St_Thomas", 
                                                "America/St_Vincent", 
                                                "America/Swift_Current", 
                                                "America/Tegucigalpa", 
                                                "America/Thule", 
                                                "America/Thunder_Bay", 
                                                "America/Tijuana", 
                                                "America/Toronto", 
                                                "America/Tortola", 
                                                "America/Vancouver", 
                                                "America/Virgin", 
                                                "America/Whitehorse", 
                                                "America/Winnipeg", 
                                                "America/Yakutat", 
                                                "America/Yellowknife", 
                                                "Antarctica/Casey", 
                                                "Antarctica/Davis", 
                                                "Antarctica/DumontDUrville", 
                                                "Antarctica/Macquarie", 
                                                "Antarctica/Mawson", 
                                                "Antarctica/McMurdo", 
                                                "Antarctica/Palmer", 
                                                "Antarctica/Rothera", 
                                                "Antarctica/South_Pole", 
                                                "Antarctica/Syowa", 
                                                "Antarctica/Troll", 
                                                "Antarctica/Vostok", 
                                                "Arctic/Longyearbyen", 
                                                "Asia/Aden", 
                                                "Asia/Almaty", 
                                                "Asia/Amman", 
                                                "Asia/Anadyr", 
                                                "Asia/Aqtau", 
                                                "Asia/Aqtobe", 
                                                "Asia/Ashgabat", 
                                                "Asia/Ashkhabad", 
                                                "Asia/Atyrau", 
                                                "Asia/Baghdad", 
                                                "Asia/Bahrain", 
                                                "Asia/Baku", 
                                                "Asia/Bangkok", 
                                                "Asia/Barnaul", 
                                                "Asia/Beirut", 
                                                "Asia/Bishkek", 
                                                "Asia/Brunei", 
                                                "Asia/Calcutta", 
                                                "Asia/Chita", 
                                                "Asia/Choibalsan", 
                                                "Asia/Chongqing", 
                                                "Asia/Chungking", 
                                                "Asia/Colombo", 
                                                "Asia/Dacca", 
                                                "Asia/Damascus", 
                                                "Asia/Dhaka", 
                                                "Asia/Dili", 
                                                "Asia/Dubai", 
                                                "Asia/Dushanbe", 
                                                "Asia/Famagusta", 
                                                "Asia/Gaza", 
                                                "Asia/Harbin", 
                                                "Asia/Hebron", 
                                                "Asia/Ho_Chi_Minh", 
                                                "Asia/Hong_Kong", 
                                                "Asia/Hovd", 
                                                "Asia/Irkutsk", 
                                                "Asia/Istanbul", 
                                                "Asia/Jakarta", 
                                                "Asia/Jayapura", 
                                                "Asia/Jerusalem", 
                                                "Asia/Kabul", 
                                                "Asia/Kamchatka", 
                                                "Asia/Karachi", 
                                                "Asia/Kashgar", 
                                                "Asia/Kathmandu", 
                                                "Asia/Katmandu", 
                                                "Asia/Khandyga", 
                                                "Asia/Kolkata", 
                                                "Asia/Krasnoyarsk", 
                                                "Asia/Kuala_Lumpur", 
                                                "Asia/Kuching", 
                                                "Asia/Kuwait", 
                                                "Asia/Macao", 
                                                "Asia/Macau", 
                                                "Asia/Magadan", 
                                                "Asia/Makassar", 
                                                "Asia/Manila", 
                                                "Asia/Muscat", 
                                                "Asia/Nicosia", 
                                                "Asia/Novokuznetsk", 
                                                "Asia/Novosibirsk", 
                                                "Asia/Omsk", 
                                                "Asia/Oral", 
                                                "Asia/Phnom_Penh", 
                                                "Asia/Pontianak", 
                                                "Asia/Pyongyang", 
                                                "Asia/Qatar", 
                                                "Asia/Qyzylorda", 
                                                "Asia/Rangoon", 
                                                "Asia/Riyadh", 
                                                "Asia/Saigon", 
                                                "Asia/Sakhalin", 
                                                "Asia/Samarkand", 
                                                "Asia/Seoul", 
                                                "Asia/Shanghai", 
                                                "Asia/Singapore", 
                                                "Asia/Srednekolymsk", 
                                                "Asia/Taipei", 
                                                "Asia/Tashkent", 
                                                "Asia/Tbilisi", 
                                                "Asia/Tehran", 
                                                "Asia/Tel_Aviv", 
                                                "Asia/Thimbu", 
                                                "Asia/Thimphu", 
                                                "Asia/Tokyo", 
                                                "Asia/Tomsk", 
                                                "Asia/Ujung_Pandang", 
                                                "Asia/Ulaanbaatar", 
                                                "Asia/Ulan_Bator", 
                                                "Asia/Urumqi", 
                                                "Asia/Ust-Nera", 
                                                "Asia/Vientiane", 
                                                "Asia/Vladivostok", 
                                                "Asia/Yakutsk", 
                                                "Asia/Yangon", 
                                                "Asia/Yekaterinburg", 
                                                "Asia/Yerevan", 
                                                "Atlantic/Azores", 
                                                "Atlantic/Bermuda", 
                                                "Atlantic/Canary", 
                                                "Atlantic/Cape_Verde", 
                                                "Atlantic/Faeroe", 
                                                "Atlantic/Faroe", 
                                                "Atlantic/Jan_Mayen", 
                                                "Atlantic/Madeira", 
                                                "Atlantic/Reykjavik", 
                                                "Atlantic/South_Georgia", 
                                                "Atlantic/St_Helena", 
                                                "Atlantic/Stanley", 
                                                "Australia/ACT", 
                                                "Australia/Adelaide", 
                                                "Australia/Brisbane", 
                                                "Australia/Broken_Hill", 
                                                "Australia/Canberra", 
                                                "Australia/Currie", 
                                                "Australia/Darwin", 
                                                "Australia/Eucla", 
                                                "Australia/Hobart", 
                                                "Australia/LHI", 
                                                "Australia/Lindeman", 
                                                "Australia/Lord_Howe", 
                                                "Australia/Melbourne", 
                                                "Australia/NSW", 
                                                "Australia/North", 
                                                "Australia/Perth", 
                                                "Australia/Queensland", 
                                                "Australia/South", 
                                                "Australia/Sydney", 
                                                "Australia/Tasmania", 
                                                "Australia/Victoria", 
                                                "Australia/West", 
                                                "Australia/Yancowinna", 
                                                "Brazil/Acre", 
                                                "Brazil/DeNoronha", 
                                                "Brazil/East", 
                                                "Brazil/West", 
                                                "CET", 
                                                "CST6CDT", 
                                                "Canada/Atlantic", 
                                                "Canada/Central", 
                                                "Canada/Eastern", 
                                                "Canada/Mountain", 
                                                "Canada/Newfoundland", 
                                                "Canada/Pacific", 
                                                "Canada/Saskatchewan", 
                                                "Canada/Yukon", 
                                                "Chile/Continental", 
                                                "Chile/EasterIsland", 
                                                "Cuba", 
                                                "EET", 
                                                "EST", 
                                                "EST5EDT", 
                                                "Egypt", 
                                                "Eire", 
                                                "Etc/GMT", 
                                                "Etc/GMT+0", 
                                                "Etc/GMT+1", 
                                                "Etc/GMT+10", 
                                                "Etc/GMT+11", 
                                                "Etc/GMT+12", 
                                                "Etc/GMT+2", 
                                                "Etc/GMT+3", 
                                                "Etc/GMT+4", 
                                                "Etc/GMT+5", 
                                                "Etc/GMT+6", 
                                                "Etc/GMT+7", 
                                                "Etc/GMT+8", 
                                                "Etc/GMT+9", 
                                                "Etc/GMT-0", 
                                                "Etc/GMT-1", 
                                                "Etc/GMT-10", 
                                                "Etc/GMT-11", 
                                                "Etc/GMT-12", 
                                                "Etc/GMT-13", 
                                                "Etc/GMT-14", 
                                                "Etc/GMT-2", 
                                                "Etc/GMT-3", 
                                                "Etc/GMT-4", 
                                                "Etc/GMT-5", 
                                                "Etc/GMT-6", 
                                                "Etc/GMT-7", 
                                                "Etc/GMT-8", 
                                                "Etc/GMT-9", 
                                                "Etc/GMT0", 
                                                "Etc/Greenwich", 
                                                "Etc/UCT", 
                                                "Etc/UTC", 
                                                "Etc/Universal", 
                                                "Etc/Zulu", 
                                                "Europe/Amsterdam", 
                                                "Europe/Andorra", 
                                                "Europe/Astrakhan", 
                                                "Europe/Athens", 
                                                "Europe/Belfast", 
                                                "Europe/Belgrade", 
                                                "Europe/Berlin", 
                                                "Europe/Bratislava", 
                                                "Europe/Brussels", 
                                                "Europe/Bucharest", 
                                                "Europe/Budapest", 
                                                "Europe/Busingen", 
                                                "Europe/Chisinau", 
                                                "Europe/Copenhagen", 
                                                "Europe/Dublin", 
                                                "Europe/Gibraltar", 
                                                "Europe/Guernsey", 
                                                "Europe/Helsinki", 
                                                "Europe/Isle_of_Man", 
                                                "Europe/Istanbul", 
                                                "Europe/Jersey", 
                                                "Europe/Kaliningrad", 
                                                "Europe/Kiev", 
                                                "Europe/Kirov", 
                                                "Europe/Lisbon", 
                                                "Europe/Ljubljana", 
                                                "Europe/London", 
                                                "Europe/Luxembourg", 
                                                "Europe/Madrid", 
                                                "Europe/Malta", 
                                                "Europe/Mariehamn", 
                                                "Europe/Minsk", 
                                                "Europe/Monaco", 
                                                "Europe/Moscow", 
                                                "Europe/Nicosia", 
                                                "Europe/Oslo", 
                                                "Europe/Paris", 
                                                "Europe/Podgorica", 
                                                "Europe/Prague", 
                                                "Europe/Riga", 
                                                "Europe/Rome", 
                                                "Europe/Samara", 
                                                "Europe/San_Marino", 
                                                "Europe/Sarajevo", 
                                                "Europe/Saratov", 
                                                "Europe/Simferopol", 
                                                "Europe/Skopje", 
                                                "Europe/Sofia", 
                                                "Europe/Stockholm", 
                                                "Europe/Tallinn", 
                                                "Europe/Tirane", 
                                                "Europe/Tiraspol", 
                                                "Europe/Ulyanovsk", 
                                                "Europe/Uzhgorod", 
                                                "Europe/Vaduz", 
                                                "Europe/Vatican", 
                                                "Europe/Vienna", 
                                                "Europe/Vilnius", 
                                                "Europe/Volgograd", 
                                                "Europe/Warsaw", 
                                                "Europe/Zagreb", 
                                                "Europe/Zaporozhye", 
                                                "Europe/Zurich", 
                                                "GB", 
                                                "GB-Eire", 
                                                "GMT", 
                                                "GMT+0", 
                                                "GMT-0", 
                                                "GMT0", 
                                                "Greenwich", 
                                                "HST", 
                                                "Hongkong", 
                                                "Iceland", 
                                                "Indian/Antananarivo", 
                                                "Indian/Chagos", 
                                                "Indian/Christmas", 
                                                "Indian/Cocos", 
                                                "Indian/Comoro", 
                                                "Indian/Kerguelen", 
                                                "Indian/Mahe", 
                                                "Indian/Maldives", 
                                                "Indian/Mauritius", 
                                                "Indian/Mayotte", 
                                                "Indian/Reunion", 
                                                "Iran", 
                                                "Israel", 
                                                "Jamaica", 
                                                "Japan", 
                                                "Kwajalein", 
                                                "Libya", 
                                                "MET", 
                                                "MST", 
                                                "MST7MDT", 
                                                "Mexico/BajaNorte", 
                                                "Mexico/BajaSur", 
                                                "Mexico/General", 
                                                "NZ", 
                                                "NZ-CHAT", 
                                                "Navajo", 
                                                "PRC", 
                                                "PST8PDT", 
                                                "Pacific/Apia", 
                                                "Pacific/Auckland", 
                                                "Pacific/Bougainville", 
                                                "Pacific/Chatham", 
                                                "Pacific/Chuuk", 
                                                "Pacific/Easter", 
                                                "Pacific/Efate", 
                                                "Pacific/Enderbury", 
                                                "Pacific/Fakaofo", 
                                                "Pacific/Fiji", 
                                                "Pacific/Funafuti", 
                                                "Pacific/Galapagos", 
                                                "Pacific/Gambier", 
                                                "Pacific/Guadalcanal", 
                                                "Pacific/Guam", 
                                                "Pacific/Honolulu", 
                                                "Pacific/Johnston", 
                                                "Pacific/Kiritimati", 
                                                "Pacific/Kosrae", 
                                                "Pacific/Kwajalein", 
                                                "Pacific/Majuro", 
                                                "Pacific/Marquesas", 
                                                "Pacific/Midway", 
                                                "Pacific/Nauru", 
                                                "Pacific/Niue", 
                                                "Pacific/Norfolk", 
                                                "Pacific/Noumea", 
                                                "Pacific/Pago_Pago", 
                                                "Pacific/Palau", 
                                                "Pacific/Pitcairn", 
                                                "Pacific/Pohnpei", 
                                                "Pacific/Ponape", 
                                                "Pacific/Port_Moresby", 
                                                "Pacific/Rarotonga", 
                                                "Pacific/Saipan", 
                                                "Pacific/Samoa", 
                                                "Pacific/Tahiti", 
                                                "Pacific/Tarawa", 
                                                "Pacific/Tongatapu", 
                                                "Pacific/Truk", 
                                                "Pacific/Wake", 
                                                "Pacific/Wallis", 
                                                "Pacific/Yap", 
                                                "Poland", 
                                                "Portugal", 
                                                "ROC", 
                                                "ROK", 
                                                "Singapore", 
                                                "Turkey", 
                                                "UCT", 
                                                "US/Alaska", 
                                                "US/Aleutian", 
                                                "US/Arizona", 
                                                "US/Central", 
                                                "US/East-Indiana", 
                                                "US/Eastern", 
                                                "US/Hawaii", 
                                                "US/Indiana-Starke", 
                                                "US/Michigan", 
                                                "US/Mountain", 
                                                "US/Pacific", 
                                                "US/Samoa", 
                                                "UTC", 
                                                "Universal", 
                                                "W-SU", 
                                                "WET", 
                                                "Zulu"
                                            ], 
                                            "enumNames": [], 
                                            "type": "string"
                                        }, 
                                        "when": {
                                            "type": "object", 
                                            "description": "A dictionary mapping of when the schedule should run", 
                                            "$ref": "#/definitions/WhenFieldSchema"
                                        }, 
                                        "skip_times_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for skip times, instead of ISO 8601", 
                                            "title": "skip_times_fmt"
                                        }, 
                                        "until": {
                                            "type": "string", 
                                            "description": "When to stop firing new executions of this job, in dateutil format", 
                                            "title": "until"
                                        }, 
                                        "seconds": {
                                            "description": "interval between job executions in seconds", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "seconds", 
                                            "minimum": 60, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "after": {
                                            "type": "string", 
                                            "description": "When new jobs are allowed to start, in dateutil format", 
                                            "title": "after"
                                        }, 
                                        "return_job": {
                                            "type": "boolean", 
                                            "description": "If False, do not return job data to the master", 
                                            "title": "return_job"
                                        }, 
                                        "hours": {
                                            "description": "Interval between job executions in hours", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "hours", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "until_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for until, instead of ISO 8601", 
                                            "title": "until_fmt"
                                        }, 
                                        "splay": {
                                            "type": "object", 
                                            "description": "A dict containing start and end values, in seconds, specifying a range in which the schedule interval should be randomly adjusted. If not specified, start defaults to 0.", 
                                            "$ref": "#/definitions/SchedulerSplaySchema"
                                        }, 
                                        "days": {
                                            "description": "Interval between job executions in days", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "days", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "after_fmt": {
                                            "type": "string", 
                                            "description": "The format to use for after, instead of ISO 8601", 
                                            "title": "after_fmt"
                                        }, 
                                        "range": {
                                            "type": "object", 
                                            "description": "A dict containing a start and end dateutil value specifying a time range in which a job (specified by seconds, etc) is allowed to run (or not allowed to run, if invert is True", 
                                            "$ref": "#/definitions/SchedulerRangeSchema"
                                        }, 
                                        "jid_include": {
                                            "type": "boolean", 
                                            "description": "If False, with maxrunning, do not check to see if another job with this signature is running", 
                                            "title": "jid_include"
                                        }, 
                                        "maxrunning": {
                                            "description": "The maximum concurrent executions of this job", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "maxrunning", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "skip_times": {
                                            "items": {
                                                "type": "string", 
                                                "title": "skip_times"
                                            }, 
                                            "type": "array", 
                                            "description": "A list of dateutil values specifying a date to skip", 
                                            "title": "skip_times"
                                        }, 
                                        "minutes": {
                                            "description": "Interval between job executions in minutes", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "minutes", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "once": {
                                            "type": "string", 
                                            "description": "An ISO 8601 value of a single time in which to run the job", 
                                            "title": "once"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveSchedulerSchema"
                        }, 
                        "parameters": [
                            [
                                "name"
                            ], 
                            [
                                "schedule"
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "arg", 
                                null
                            ], 
                            [
                                "tgt", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "uuid", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "function", 
                                "job.run"
                            ], 
                            [
                                "enabled", 
                                true
                            ]
                        ], 
                        "signature": "save(name: 'unicode', schedule: 'dict', masters: typing.Union[list, NoneType], cmd: typing.Union[str, NoneType], arg: typing.Union[dict, NoneType], tgt: typing.Union[dict, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], job_uuid: typing.Union[uuid.UUID, NoneType], uuid: typing.Union[uuid.UUID, NoneType], fun: typing.Union[str, NoneType], function: 'unicode' = job.run, enabled: typing.Union[bool, NoneType] = True)"
                    }, 
                    "formatted": "signature: 'save(name: ''unicode'', schedule: ''dict'', masters: typing.Union[list,\n  NoneType], cmd: typing.Union[str, NoneType], arg: typing.Union[dict, NoneType],\n  tgt: typing.Union[dict, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType],\n  job_uuid: typing.Union[uuid.UUID, NoneType], uuid: typing.Union[uuid.UUID, NoneType],\n  fun: typing.Union[str, NoneType], function: ''unicode'' = job.run, enabled: typing.Union[bool,\n  NoneType] = True)'\nreturns: UUID\ndoc: \"Add/update a component in the schedule.\\n\\nSee :ref:`schedules` for more information.\\n\\\n  \\n:param str name: The name of the schedule item\\n:param dict schedule: A dictionary\\\n  \\ with schedule details.\\n:param list masters: List of masters on which to execute\\\n  \\ runner and wheel commands.\\n:param str cmd: One of local, runner, ssh, wheel\\n\\\n  :param dict arg: Argument dictionary containing kwargs and args for fun below\\n\\\n  :param dict tgt: The minion target dictionary (use this or tgt_uuid, not both)\\n\\\n  :param str tgt_uuid: a UUID for an already saved target (use this or tgt, not both)\\n\\\n  :param str job_uuid: a UUID for an already saved job (use this or fun+arg, not both)\\n\\\n  :param str fun: The function to run (use this or job_uuid, not both)\\n:param bool\\\n  \\ enabled: Set the schedule job enabled or disabled\\n\\n`arg` should have this format:\\n\\\n  \\n.. code-block:: python\\n\\n    arg: { 'arg': [<arg1>, <arg2>, ..., <argn>],\\n \\\n  \\          'kwarg': { '<key1>': <val1>,\\n                      '<key2>': <val2>,\\n\\\n  \\                      ...\\n                      '<keyn>': <valn> }\\n        }\\n\\\n  \\n`schedule` should have this format:\\n\\n.. code-block:: python\\n\\n    schedule:\\\n  \\ { '<descriptor1>': <value1>,\\n                '<descriptor2>': <value1>,\\n   \\\n  \\             ...\\n                '<descriptorn>': <valuen> }\\n\\n`Descriptor` above\\\n  \\ can be a number of things like `seconds`,\\n`once`, `when`, `cron`, etc.  See the\\\n  \\ SaltStack Enterprise documentation\\nfor a complete list.\"\nschema:\n  $ref: '#/definitions/SaveSchedulerSchema'\n  definitions:\n    SaveSchedulerSchema:\n      properties:\n        arg:\n          $ref: '#/definitions/SchedulerArgKwargSchema'\n          description: Args and kwargs to pass to fun.\n          type: object\n        cmd:\n          description: Command for job (local, runner, ssh, wheel)\n          enum:\n          - local\n          - runner\n          - wheel\n          - ssh\n          enumNames: []\n          title: cmd\n          type: string\n        enabled:\n          default: true\n          description: Boolean to enable/disable the schedule.\n          title: enabled\n          type: boolean\n        fun:\n          description: The name of the function for this job\n          title: fun\n          type: string\n        function:\n          default: job.run\n          description: The name of the scheduler function to use to schedule this\n            job, this is almost always \"job.run\"\n          title: function\n          type: string\n        job_uuid:\n          description: UUID for a previously created job\n          format: uuid\n          title: job_uuid\n          type: string\n        masters:\n          description: A list of masters on which to run runner and wheel commands.\n          items:\n            title: masters\n            type: string\n          title: masters\n          type: array\n        name:\n          description: Name of this schedule\n          title: name\n          type: string\n        schedule:\n          $ref: '#/definitions/SchedulerScheduleSchema'\n          description: The schedule details for the job\n          type: object\n        tgt:\n          description: Dictionary with targeting information\n          title: tgt\n          type: object\n        tgt_uuid:\n          description: UUID for a previously created target\n          format: uuid\n          title: tgt_uuid\n          type: string\n        uuid:\n          description: The UUID of the schedule to be saved\n          format: uuid\n          title: uuid\n          type: string\n      required:\n      - function\n      - name\n      - schedule\n      type: object\n    SchedulerArgKwargSchema:\n      properties:\n        arg:\n          description: An optional list of args for the function\n          items:\n            title: arg\n            type: string\n          title: arg\n          type: array\n        kwarg:\n          description: An optional dict of kwargs for the function\n          title: kwarg\n          type: object\n      required: []\n      type: object\n    SchedulerRangeSchema:\n      properties:\n        end:\n          description: When to end the range, in dateutil format\n          title: end\n          type: string\n        end_fmt:\n          description: An alternate date format for end\n          title: end_fmt\n          type: string\n        invert:\n          description: Instead of making the range \"run during this time\", make it\n            \"do not run during this time\"\n          title: invert\n          type: boolean\n        start:\n          description: When to start the range, in dateutil format\n          title: start\n          type: string\n        start_fmt:\n          description: An alternate date format for start\n          title: start_fmt\n          type: string\n      required:\n      - end\n      - start\n      type: object\n    SchedulerScheduleSchema:\n      properties:\n        after:\n          description: When new jobs are allowed to start, in dateutil format\n          title: after\n          type: string\n        after_fmt:\n          description: The format to use for after, instead of ISO 8601\n          title: after_fmt\n          type: string\n        cron:\n          description: Intervals specified in cron-style instead of seconds, minutes,\n            hours, days\n          title: cron\n          type: string\n        days:\n          description: Interval between job executions in days\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: days\n          type: number\n        hours:\n          description: Interval between job executions in hours\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: hours\n          type: number\n        jid_include:\n          description: If False, with maxrunning, do not check to see if another job\n            with this signature is running\n          title: jid_include\n          type: boolean\n        maxrunning:\n          description: The maximum concurrent executions of this job\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: maxrunning\n          type: number\n        minutes:\n          description: Interval between job executions in minutes\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: minutes\n          type: number\n        once:\n          description: An ISO 8601 value of a single time in which to run the job\n          title: once\n          type: string\n        once_fmt:\n          description: The format to use for once, instead of ISO 8601\n          title: once_fmt\n          type: string\n        range:\n          $ref: '#/definitions/SchedulerRangeSchema'\n          description: A dict containing a start and end dateutil value specifying\n            a time range in which a job (specified by seconds, etc) is allowed to\n            run (or not allowed to run, if invert is True\n          type: object\n        return_job:\n          description: If False, do not return job data to the master\n          title: return_job\n          type: boolean\n        run_on_start:\n          default: false\n          description: If False, do not execute the job as soon as the scheduler is\n            started\n          title: run_on_start\n          type: boolean\n        seconds:\n          description: interval between job executions in seconds\n          exclusiveMinimum: true\n          format: integer\n          minimum: 60\n          title: seconds\n          type: number\n        skip_explicit:\n          description: A list of dateutil values specifying a date to skip\n          items:\n            title: skip_explicit\n            type: string\n          title: skip_explicit\n          type: array\n        skip_times:\n          description: A list of dateutil values specifying a date to skip\n          items:\n            title: skip_times\n            type: string\n          title: skip_times\n          type: array\n        skip_times_fmt:\n          description: The format to use for skip times, instead of ISO 8601\n          title: skip_times_fmt\n          type: string\n        splay:\n          $ref: '#/definitions/SchedulerSplaySchema'\n          description: A dict containing start and end values, in seconds, specifying\n            a range in which the schedule interval should be randomly adjusted. If\n            not specified, start defaults to 0.\n          type: object\n        timezone:\n          default: UTC\n          description: The timezone in which the schedule should should run\n          enum:\n          - Africa/Abidjan\n          - Africa/Accra\n          - Africa/Addis_Ababa\n          - Africa/Algiers\n          - Africa/Asmara\n          - Africa/Asmera\n          - Africa/Bamako\n          - Africa/Bangui\n          - Africa/Banjul\n          - Africa/Bissau\n          - Africa/Blantyre\n          - Africa/Brazzaville\n          - Africa/Bujumbura\n          - Africa/Cairo\n          - Africa/Casablanca\n          - Africa/Ceuta\n          - Africa/Conakry\n          - Africa/Dakar\n          - Africa/Dar_es_Salaam\n          - Africa/Djibouti\n          - Africa/Douala\n          - Africa/El_Aaiun\n          - Africa/Freetown\n          - Africa/Gaborone\n          - Africa/Harare\n          - Africa/Johannesburg\n          - Africa/Juba\n          - Africa/Kampala\n          - Africa/Khartoum\n          - Africa/Kigali\n          - Africa/Kinshasa\n          - Africa/Lagos\n          - Africa/Libreville\n          - Africa/Lome\n          - Africa/Luanda\n          - Africa/Lubumbashi\n          - Africa/Lusaka\n          - Africa/Malabo\n          - Africa/Maputo\n          - Africa/Maseru\n          - Africa/Mbabane\n          - Africa/Mogadishu\n          - Africa/Monrovia\n          - Africa/Nairobi\n          - Africa/Ndjamena\n          - Africa/Niamey\n          - Africa/Nouakchott\n          - Africa/Ouagadougou\n          - Africa/Porto-Novo\n          - Africa/Sao_Tome\n          - Africa/Timbuktu\n          - Africa/Tripoli\n          - Africa/Tunis\n          - Africa/Windhoek\n          - America/Adak\n          - America/Anchorage\n          - America/Anguilla\n          - America/Antigua\n          - America/Araguaina\n          - America/Argentina/Buenos_Aires\n          - America/Argentina/Catamarca\n          - America/Argentina/ComodRivadavia\n          - America/Argentina/Cordoba\n          - America/Argentina/Jujuy\n          - America/Argentina/La_Rioja\n          - America/Argentina/Mendoza\n          - America/Argentina/Rio_Gallegos\n          - America/Argentina/Salta\n          - America/Argentina/San_Juan\n          - America/Argentina/San_Luis\n          - America/Argentina/Tucuman\n          - America/Argentina/Ushuaia\n          - America/Aruba\n          - America/Asuncion\n          - America/Atikokan\n          - America/Atka\n          - America/Bahia\n          - America/Bahia_Banderas\n          - America/Barbados\n          - America/Belem\n          - America/Belize\n          - America/Blanc-Sablon\n          - America/Boa_Vista\n          - America/Bogota\n          - America/Boise\n          - America/Buenos_Aires\n          - America/Cambridge_Bay\n          - America/Campo_Grande\n          - America/Cancun\n          - America/Caracas\n          - America/Catamarca\n          - America/Cayenne\n          - America/Cayman\n          - America/Chicago\n          - America/Chihuahua\n          - America/Coral_Harbour\n          - America/Cordoba\n          - America/Costa_Rica\n          - America/Creston\n          - America/Cuiaba\n          - America/Curacao\n          - America/Danmarkshavn\n          - America/Dawson\n          - America/Dawson_Creek\n          - America/Denver\n          - America/Detroit\n          - America/Dominica\n          - America/Edmonton\n          - America/Eirunepe\n          - America/El_Salvador\n          - America/Ensenada\n          - America/Fort_Nelson\n          - America/Fort_Wayne\n          - America/Fortaleza\n          - America/Glace_Bay\n          - America/Godthab\n          - America/Goose_Bay\n          - America/Grand_Turk\n          - America/Grenada\n          - America/Guadeloupe\n          - America/Guatemala\n          - America/Guayaquil\n          - America/Guyana\n          - America/Halifax\n          - America/Havana\n          - America/Hermosillo\n          - America/Indiana/Indianapolis\n          - America/Indiana/Knox\n          - America/Indiana/Marengo\n          - America/Indiana/Petersburg\n          - America/Indiana/Tell_City\n          - America/Indiana/Vevay\n          - America/Indiana/Vincennes\n          - America/Indiana/Winamac\n          - America/Indianapolis\n          - America/Inuvik\n          - America/Iqaluit\n          - America/Jamaica\n          - America/Jujuy\n          - America/Juneau\n          - America/Kentucky/Louisville\n          - America/Kentucky/Monticello\n          - America/Knox_IN\n          - America/Kralendijk\n          - America/La_Paz\n          - America/Lima\n          - America/Los_Angeles\n          - America/Louisville\n          - America/Lower_Princes\n          - America/Maceio\n          - America/Managua\n          - America/Manaus\n          - America/Marigot\n          - America/Martinique\n          - America/Matamoros\n          - America/Mazatlan\n          - America/Mendoza\n          - America/Menominee\n          - America/Merida\n          - America/Metlakatla\n          - America/Mexico_City\n          - America/Miquelon\n          - America/Moncton\n          - America/Monterrey\n          - America/Montevideo\n          - America/Montreal\n          - America/Montserrat\n          - America/Nassau\n          - America/New_York\n          - America/Nipigon\n          - America/Nome\n          - America/Noronha\n          - America/North_Dakota/Beulah\n          - America/North_Dakota/Center\n          - America/North_Dakota/New_Salem\n          - America/Ojinaga\n          - America/Panama\n          - America/Pangnirtung\n          - America/Paramaribo\n          - America/Phoenix\n          - America/Port-au-Prince\n          - America/Port_of_Spain\n          - America/Porto_Acre\n          - America/Porto_Velho\n          - America/Puerto_Rico\n          - America/Punta_Arenas\n          - America/Rainy_River\n          - America/Rankin_Inlet\n          - America/Recife\n          - America/Regina\n          - America/Resolute\n          - America/Rio_Branco\n          - America/Rosario\n          - America/Santa_Isabel\n          - America/Santarem\n          - America/Santiago\n          - America/Santo_Domingo\n          - America/Sao_Paulo\n          - America/Scoresbysund\n          - America/Shiprock\n          - America/Sitka\n          - America/St_Barthelemy\n          - America/St_Johns\n          - America/St_Kitts\n          - America/St_Lucia\n          - America/St_Thomas\n          - America/St_Vincent\n          - America/Swift_Current\n          - America/Tegucigalpa\n          - America/Thule\n          - America/Thunder_Bay\n          - America/Tijuana\n          - America/Toronto\n          - America/Tortola\n          - America/Vancouver\n          - America/Virgin\n          - America/Whitehorse\n          - America/Winnipeg\n          - America/Yakutat\n          - America/Yellowknife\n          - Antarctica/Casey\n          - Antarctica/Davis\n          - Antarctica/DumontDUrville\n          - Antarctica/Macquarie\n          - Antarctica/Mawson\n          - Antarctica/McMurdo\n          - Antarctica/Palmer\n          - Antarctica/Rothera\n          - Antarctica/South_Pole\n          - Antarctica/Syowa\n          - Antarctica/Troll\n          - Antarctica/Vostok\n          - Arctic/Longyearbyen\n          - Asia/Aden\n          - Asia/Almaty\n          - Asia/Amman\n          - Asia/Anadyr\n          - Asia/Aqtau\n          - Asia/Aqtobe\n          - Asia/Ashgabat\n          - Asia/Ashkhabad\n          - Asia/Atyrau\n          - Asia/Baghdad\n          - Asia/Bahrain\n          - Asia/Baku\n          - Asia/Bangkok\n          - Asia/Barnaul\n          - Asia/Beirut\n          - Asia/Bishkek\n          - Asia/Brunei\n          - Asia/Calcutta\n          - Asia/Chita\n          - Asia/Choibalsan\n          - Asia/Chongqing\n          - Asia/Chungking\n          - Asia/Colombo\n          - Asia/Dacca\n          - Asia/Damascus\n          - Asia/Dhaka\n          - Asia/Dili\n          - Asia/Dubai\n          - Asia/Dushanbe\n          - Asia/Famagusta\n          - Asia/Gaza\n          - Asia/Harbin\n          - Asia/Hebron\n          - Asia/Ho_Chi_Minh\n          - Asia/Hong_Kong\n          - Asia/Hovd\n          - Asia/Irkutsk\n          - Asia/Istanbul\n          - Asia/Jakarta\n          - Asia/Jayapura\n          - Asia/Jerusalem\n          - Asia/Kabul\n          - Asia/Kamchatka\n          - Asia/Karachi\n          - Asia/Kashgar\n          - Asia/Kathmandu\n          - Asia/Katmandu\n          - Asia/Khandyga\n          - Asia/Kolkata\n          - Asia/Krasnoyarsk\n          - Asia/Kuala_Lumpur\n          - Asia/Kuching\n          - Asia/Kuwait\n          - Asia/Macao\n          - Asia/Macau\n          - Asia/Magadan\n          - Asia/Makassar\n          - Asia/Manila\n          - Asia/Muscat\n          - Asia/Nicosia\n          - Asia/Novokuznetsk\n          - Asia/Novosibirsk\n          - Asia/Omsk\n          - Asia/Oral\n          - Asia/Phnom_Penh\n          - Asia/Pontianak\n          - Asia/Pyongyang\n          - Asia/Qatar\n          - Asia/Qyzylorda\n          - Asia/Rangoon\n          - Asia/Riyadh\n          - Asia/Saigon\n          - Asia/Sakhalin\n          - Asia/Samarkand\n          - Asia/Seoul\n          - Asia/Shanghai\n          - Asia/Singapore\n          - Asia/Srednekolymsk\n          - Asia/Taipei\n          - Asia/Tashkent\n          - Asia/Tbilisi\n          - Asia/Tehran\n          - Asia/Tel_Aviv\n          - Asia/Thimbu\n          - Asia/Thimphu\n          - Asia/Tokyo\n          - Asia/Tomsk\n          - Asia/Ujung_Pandang\n          - Asia/Ulaanbaatar\n          - Asia/Ulan_Bator\n          - Asia/Urumqi\n          - Asia/Ust-Nera\n          - Asia/Vientiane\n          - Asia/Vladivostok\n          - Asia/Yakutsk\n          - Asia/Yangon\n          - Asia/Yekaterinburg\n          - Asia/Yerevan\n          - Atlantic/Azores\n          - Atlantic/Bermuda\n          - Atlantic/Canary\n          - Atlantic/Cape_Verde\n          - Atlantic/Faeroe\n          - Atlantic/Faroe\n          - Atlantic/Jan_Mayen\n          - Atlantic/Madeira\n          - Atlantic/Reykjavik\n          - Atlantic/South_Georgia\n          - Atlantic/St_Helena\n          - Atlantic/Stanley\n          - Australia/ACT\n          - Australia/Adelaide\n          - Australia/Brisbane\n          - Australia/Broken_Hill\n          - Australia/Canberra\n          - Australia/Currie\n          - Australia/Darwin\n          - Australia/Eucla\n          - Australia/Hobart\n          - Australia/LHI\n          - Australia/Lindeman\n          - Australia/Lord_Howe\n          - Australia/Melbourne\n          - Australia/NSW\n          - Australia/North\n          - Australia/Perth\n          - Australia/Queensland\n          - Australia/South\n          - Australia/Sydney\n          - Australia/Tasmania\n          - Australia/Victoria\n          - Australia/West\n          - Australia/Yancowinna\n          - Brazil/Acre\n          - Brazil/DeNoronha\n          - Brazil/East\n          - Brazil/West\n          - CET\n          - CST6CDT\n          - Canada/Atlantic\n          - Canada/Central\n          - Canada/Eastern\n          - Canada/Mountain\n          - Canada/Newfoundland\n          - Canada/Pacific\n          - Canada/Saskatchewan\n          - Canada/Yukon\n          - Chile/Continental\n          - Chile/EasterIsland\n          - Cuba\n          - EET\n          - EST\n          - EST5EDT\n          - Egypt\n          - Eire\n          - Etc/GMT\n          - Etc/GMT+0\n          - Etc/GMT+1\n          - Etc/GMT+10\n          - Etc/GMT+11\n          - Etc/GMT+12\n          - Etc/GMT+2\n          - Etc/GMT+3\n          - Etc/GMT+4\n          - Etc/GMT+5\n          - Etc/GMT+6\n          - Etc/GMT+7\n          - Etc/GMT+8\n          - Etc/GMT+9\n          - Etc/GMT-0\n          - Etc/GMT-1\n          - Etc/GMT-10\n          - Etc/GMT-11\n          - Etc/GMT-12\n          - Etc/GMT-13\n          - Etc/GMT-14\n          - Etc/GMT-2\n          - Etc/GMT-3\n          - Etc/GMT-4\n          - Etc/GMT-5\n          - Etc/GMT-6\n          - Etc/GMT-7\n          - Etc/GMT-8\n          - Etc/GMT-9\n          - Etc/GMT0\n          - Etc/Greenwich\n          - Etc/UCT\n          - Etc/UTC\n          - Etc/Universal\n          - Etc/Zulu\n          - Europe/Amsterdam\n          - Europe/Andorra\n          - Europe/Astrakhan\n          - Europe/Athens\n          - Europe/Belfast\n          - Europe/Belgrade\n          - Europe/Berlin\n          - Europe/Bratislava\n          - Europe/Brussels\n          - Europe/Bucharest\n          - Europe/Budapest\n          - Europe/Busingen\n          - Europe/Chisinau\n          - Europe/Copenhagen\n          - Europe/Dublin\n          - Europe/Gibraltar\n          - Europe/Guernsey\n          - Europe/Helsinki\n          - Europe/Isle_of_Man\n          - Europe/Istanbul\n          - Europe/Jersey\n          - Europe/Kaliningrad\n          - Europe/Kiev\n          - Europe/Kirov\n          - Europe/Lisbon\n          - Europe/Ljubljana\n          - Europe/London\n          - Europe/Luxembourg\n          - Europe/Madrid\n          - Europe/Malta\n          - Europe/Mariehamn\n          - Europe/Minsk\n          - Europe/Monaco\n          - Europe/Moscow\n          - Europe/Nicosia\n          - Europe/Oslo\n          - Europe/Paris\n          - Europe/Podgorica\n          - Europe/Prague\n          - Europe/Riga\n          - Europe/Rome\n          - Europe/Samara\n          - Europe/San_Marino\n          - Europe/Sarajevo\n          - Europe/Saratov\n          - Europe/Simferopol\n          - Europe/Skopje\n          - Europe/Sofia\n          - Europe/Stockholm\n          - Europe/Tallinn\n          - Europe/Tirane\n          - Europe/Tiraspol\n          - Europe/Ulyanovsk\n          - Europe/Uzhgorod\n          - Europe/Vaduz\n          - Europe/Vatican\n          - Europe/Vienna\n          - Europe/Vilnius\n          - Europe/Volgograd\n          - Europe/Warsaw\n          - Europe/Zagreb\n          - Europe/Zaporozhye\n          - Europe/Zurich\n          - GB\n          - GB-Eire\n          - GMT\n          - GMT+0\n          - GMT-0\n          - GMT0\n          - Greenwich\n          - HST\n          - Hongkong\n          - Iceland\n          - Indian/Antananarivo\n          - Indian/Chagos\n          - Indian/Christmas\n          - Indian/Cocos\n          - Indian/Comoro\n          - Indian/Kerguelen\n          - Indian/Mahe\n          - Indian/Maldives\n          - Indian/Mauritius\n          - Indian/Mayotte\n          - Indian/Reunion\n          - Iran\n          - Israel\n          - Jamaica\n          - Japan\n          - Kwajalein\n          - Libya\n          - MET\n          - MST\n          - MST7MDT\n          - Mexico/BajaNorte\n          - Mexico/BajaSur\n          - Mexico/General\n          - NZ\n          - NZ-CHAT\n          - Navajo\n          - PRC\n          - PST8PDT\n          - Pacific/Apia\n          - Pacific/Auckland\n          - Pacific/Bougainville\n          - Pacific/Chatham\n          - Pacific/Chuuk\n          - Pacific/Easter\n          - Pacific/Efate\n          - Pacific/Enderbury\n          - Pacific/Fakaofo\n          - Pacific/Fiji\n          - Pacific/Funafuti\n          - Pacific/Galapagos\n          - Pacific/Gambier\n          - Pacific/Guadalcanal\n          - Pacific/Guam\n          - Pacific/Honolulu\n          - Pacific/Johnston\n          - Pacific/Kiritimati\n          - Pacific/Kosrae\n          - Pacific/Kwajalein\n          - Pacific/Majuro\n          - Pacific/Marquesas\n          - Pacific/Midway\n          - Pacific/Nauru\n          - Pacific/Niue\n          - Pacific/Norfolk\n          - Pacific/Noumea\n          - Pacific/Pago_Pago\n          - Pacific/Palau\n          - Pacific/Pitcairn\n          - Pacific/Pohnpei\n          - Pacific/Ponape\n          - Pacific/Port_Moresby\n          - Pacific/Rarotonga\n          - Pacific/Saipan\n          - Pacific/Samoa\n          - Pacific/Tahiti\n          - Pacific/Tarawa\n          - Pacific/Tongatapu\n          - Pacific/Truk\n          - Pacific/Wake\n          - Pacific/Wallis\n          - Pacific/Yap\n          - Poland\n          - Portugal\n          - ROC\n          - ROK\n          - Singapore\n          - Turkey\n          - UCT\n          - US/Alaska\n          - US/Aleutian\n          - US/Arizona\n          - US/Central\n          - US/East-Indiana\n          - US/Eastern\n          - US/Hawaii\n          - US/Indiana-Starke\n          - US/Michigan\n          - US/Mountain\n          - US/Pacific\n          - US/Samoa\n          - UTC\n          - Universal\n          - W-SU\n          - WET\n          - Zulu\n          enumNames: []\n          title: timezone\n          type: string\n        until:\n          description: When to stop firing new executions of this job, in dateutil\n            format\n          title: until\n          type: string\n        until_fmt:\n          description: The format to use for until, instead of ISO 8601\n          title: until_fmt\n          type: string\n        when:\n          $ref: '#/definitions/WhenFieldSchema'\n          description: A dictionary mapping of when the schedule should run\n          type: object\n      required: []\n      type: object\n    SchedulerSplaySchema:\n      properties:\n        end:\n          description: Maximum splay value, in seconds\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: end\n          type: number\n        start:\n          allow_None: false\n          default: 0\n          description: Minimum splay value, in seconds, defaults to 0\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: start\n          type: number\n      required:\n      - end\n      type: object\n    WhenFieldSchema:\n      properties:\n        daily:\n          description: List of time strings\n          items:\n            title: daily\n            type: string\n          title: daily\n          type: array\n        weekly:\n          $ref: '#/definitions/WhenWeeklyFieldSchema'\n          type: object\n      required: []\n      type: object\n    WhenWeeklyFieldSchema:\n      properties:\n        fri:\n          description: List of time strings for the respective day of the week\n          items:\n            title: fri\n            type: string\n          title: fri\n          type: array\n        mon:\n          description: List of time strings for the respective day of the week\n          items:\n            title: mon\n            type: string\n          title: mon\n          type: array\n        sat:\n          description: List of time strings for the respective day of the week\n          items:\n            title: sat\n            type: string\n          title: sat\n          type: array\n        sun:\n          description: List of time strings for the respective day of the week\n          items:\n            title: sun\n            type: string\n          title: sun\n          type: array\n        thu:\n          description: List of time strings for the respective day of the week\n          items:\n            title: thu\n            type: string\n          title: thu\n          type: array\n        tue:\n          description: List of time strings for the respective day of the week\n          items:\n            title: tue\n            type: string\n          title: tue\n          type: array\n        wed:\n          description: List of time strings for the respective day of the week\n          items:\n            title: wed\n            type: string\n          title: wed\n          type: array\n      required: []\n      type: object\nparameters:\n- - name\n- - schedule\n- - masters\n  - null\n- - cmd\n  - null\n- - arg\n  - null\n- - tgt\n  - null\n- - tgt_uuid\n  - null\n- - job_uuid\n  - null\n- - uuid\n  - null\n- - fun\n  - null\n- - function\n  - job.run\n- - enabled\n  - true"
                }, 
                "__doc__": "Interface with the time scheduler inside raas."
            }, 
            "auth": {
                "save_group_link": {
                    "detailed": {
                        "doc": "Link an external auth backend group to an SSE internal group. Users in the\nexternal group will inherit the roles assigned to the SSE group.\n\nParameters\n:group_name: Name of the SSE group to be linked to the external group\n:group_uuid: UUID of the SSE group. Pass either ``group_uuid`` or\n                ``group_name`` to uniquely identify the SSE group.\n:config_name: Name of the authentication backend of the external group\n:ext_group_name: Name of the external group to be linked to the SSE group\n:ext_group_uid: Unique ID of the external group. Pass ``config_name`` and\n                either ``ext_group_name`` or ``ext_group_uid`` to uniquely\n                identify an external group.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "LinkGroupSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "config_name": {
                                            "type": "string", 
                                            "description": "Name of the authentication backend of the external group", 
                                            "title": "config_name"
                                        }, 
                                        "ext_group_name": {
                                            "type": "string", 
                                            "description": "Name of the external group", 
                                            "title": "ext_group_name"
                                        }, 
                                        "enabled": {
                                            "default": true, 
                                            "type": "boolean", 
                                            "description": "True to enable the group link, False to disable", 
                                            "title": "enabled"
                                        }, 
                                        "group_name": {
                                            "type": "string", 
                                            "description": "SSE group name", 
                                            "title": "group_name"
                                        }, 
                                        "ext_group_uid": {
                                            "type": "string", 
                                            "description": "Unique ID of the external group", 
                                            "title": "ext_group_uid"
                                        }, 
                                        "ext_group_dn": {
                                            "type": "string", 
                                            "description": "LDAP Distinguished Name of the external group", 
                                            "title": "ext_group_dn"
                                        }, 
                                        "group_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "SSE group UUID", 
                                            "title": "group_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/LinkGroupSchema"
                        }, 
                        "parameters": [
                            [
                                "group_name", 
                                null
                            ], 
                            [
                                "group_uuid", 
                                null
                            ], 
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "ext_group_name", 
                                null
                            ], 
                            [
                                "ext_group_uid", 
                                null
                            ], 
                            [
                                "ext_group_dn", 
                                null
                            ], 
                            [
                                "enabled", 
                                true
                            ]
                        ], 
                        "signature": "save_group_link(group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID, NoneType], config_name: typing.Union[str, NoneType], ext_group_name: typing.Union[str, NoneType], ext_group_uid: typing.Union[str, NoneType], ext_group_dn: typing.Union[str, NoneType], enabled: typing.Union[bool, NoneType] = True)"
                    }, 
                    "formatted": "signature: 'save_group_link(group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID,\n  NoneType], config_name: typing.Union[str, NoneType], ext_group_name: typing.Union[str,\n  NoneType], ext_group_uid: typing.Union[str, NoneType], ext_group_dn: typing.Union[str,\n  NoneType], enabled: typing.Union[bool, NoneType] = True)'\nreturns: None\ndoc: \"Link an external auth backend group to an SSE internal group. Users in the\\n\\\n  external group will inherit the roles assigned to the SSE group.\\n\\nParameters\\n\\\n  :group_name: Name of the SSE group to be linked to the external group\\n:group_uuid:\\\n  \\ UUID of the SSE group. Pass either ``group_uuid`` or\\n                ``group_name``\\\n  \\ to uniquely identify the SSE group.\\n:config_name: Name of the authentication\\\n  \\ backend of the external group\\n:ext_group_name: Name of the external group to\\\n  \\ be linked to the SSE group\\n:ext_group_uid: Unique ID of the external group. Pass\\\n  \\ ``config_name`` and\\n                either ``ext_group_name`` or ``ext_group_uid``\\\n  \\ to uniquely\\n                identify an external group.\"\nschema:\n  $ref: '#/definitions/LinkGroupSchema'\n  definitions:\n    LinkGroupSchema:\n      properties:\n        config_name:\n          description: Name of the authentication backend of the external group\n          title: config_name\n          type: string\n        enabled:\n          default: true\n          description: True to enable the group link, False to disable\n          title: enabled\n          type: boolean\n        ext_group_dn:\n          description: LDAP Distinguished Name of the external group\n          title: ext_group_dn\n          type: string\n        ext_group_name:\n          description: Name of the external group\n          title: ext_group_name\n          type: string\n        ext_group_uid:\n          description: Unique ID of the external group\n          title: ext_group_uid\n          type: string\n        group_name:\n          description: SSE group name\n          title: group_name\n          type: string\n        group_uuid:\n          description: SSE group UUID\n          format: uuid\n          title: group_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - group_name\n  - null\n- - group_uuid\n  - null\n- - config_name\n  - null\n- - ext_group_name\n  - null\n- - ext_group_uid\n  - null\n- - ext_group_dn\n  - null\n- - enabled\n  - true"
                }, 
                "get_all_users": {
                    "detailed": {
                        "doc": "Get all users for the provided ``config_name`` or all users of all authentication\nconfigurations if the value of ``config_name`` is ``None``\n\nSee :ref:`users` for more details about the user model.\n\nParameters\n:config_name: Authentication/Authorization backend name (``internal``,\n                    ``ldap``, etc.)\n:include_roles: Include roles assigned to this user\n:include_perms: Include permissions assigned to this user\n:include_groups: Include groups to which this user belongs\n:include_custom_data: Include any custom data assigned to this user\n:last_uuid: Used in conjunction with ``page_size`` to indicate where\n                  to continue pagination\n:page_size: Limit results to this number of records.  Combine with\n                  ``last_uuid`` to achieve pagination through all records\n                  efficiently.\n:sort_order: SQL keyword for order of result set (``ASC``, ``DESC``)\n\n.. code-block:: python\n\n    client.api.auth.get_all_users(config_name='internal', include_roles=True)\n\n    RPCResponse(riq=13,\n                ret=[{'config_name': 'internal',\n                      'uuid': '80c67364-cb31-4f4b-972a-e7ea3f752bb8',\n                      'roles': ['Superuser', 'User'], 'username': 'root'},\n                     {'config_name': 'internal',\n                      'uuid': '59c4c....}], error=None, warnings=[])", 
                        "returns": "List[Dict]", 
                        "schema": {
                            "definitions": {
                                "GetAllUsersSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "include_roles": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the roles for each of the accounts on the list", 
                                            "title": "include_roles"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The configuration name, to get the users listing", 
                                            "title": "config_name"
                                        }, 
                                        "last_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Last paginated item UUID", 
                                            "title": "last_uuid"
                                        }, 
                                        "include_perms": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the permissions for each of the accounts on the list", 
                                            "title": "include_perms"
                                        }, 
                                        "page_size": {
                                            "description": "How many items per page", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "page_size", 
                                            "minimum": 1, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "include_custom_data": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the custom data for each of the accounts on the list", 
                                            "title": "include_custom_data"
                                        }, 
                                        "sort_order": {
                                            "enumNames": [], 
                                            "enum": [
                                                "ASC", 
                                                "DESC"
                                            ], 
                                            "type": "string", 
                                            "description": "Sort order. Either 'ASC' or 'DESC'", 
                                            "title": "sort_order"
                                        }, 
                                        "include_groups": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the groups for each of the accounts on the list", 
                                            "title": "include_groups"
                                        }, 
                                        "include_deleted_user": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the default deleted user account in the list", 
                                            "title": "include_deleted_user"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetAllUsersSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "include_roles", 
                                false
                            ], 
                            [
                                "include_perms", 
                                false
                            ], 
                            [
                                "include_groups", 
                                false
                            ], 
                            [
                                "include_custom_data", 
                                false
                            ], 
                            [
                                "include_deleted_user", 
                                false
                            ], 
                            [
                                "last_uuid", 
                                null
                            ], 
                            [
                                "page_size", 
                                null
                            ], 
                            [
                                "sort_order", 
                                "ASC"
                            ]
                        ], 
                        "signature": "get_all_users(config_name: typing.Union[str, NoneType], include_roles: bool, include_perms: bool, include_groups: bool, include_custom_data: bool, include_deleted_user: bool, last_uuid: typing.Union[uuid.UUID, NoneType], page_size: typing.Union[int, NoneType], sort_order: 'unicode' = ASC)"
                    }, 
                    "formatted": "signature: 'get_all_users(config_name: typing.Union[str, NoneType], include_roles:\n  bool, include_perms: bool, include_groups: bool, include_custom_data: bool, include_deleted_user:\n  bool, last_uuid: typing.Union[uuid.UUID, NoneType], page_size: typing.Union[int,\n  NoneType], sort_order: ''unicode'' = ASC)'\nreturns: List[Dict]\ndoc: \"Get all users for the provided ``config_name`` or all users of all authentication\\n\\\n  configurations if the value of ``config_name`` is ``None``\\n\\nSee :ref:`users` for\\\n  \\ more details about the user model.\\n\\nParameters\\n:config_name: Authentication/Authorization\\\n  \\ backend name (``internal``,\\n                    ``ldap``, etc.)\\n:include_roles:\\\n  \\ Include roles assigned to this user\\n:include_perms: Include permissions assigned\\\n  \\ to this user\\n:include_groups: Include groups to which this user belongs\\n:include_custom_data:\\\n  \\ Include any custom data assigned to this user\\n:last_uuid: Used in conjunction\\\n  \\ with ``page_size`` to indicate where\\n                  to continue pagination\\n\\\n  :page_size: Limit results to this number of records.  Combine with\\n           \\\n  \\       ``last_uuid`` to achieve pagination through all records\\n              \\\n  \\    efficiently.\\n:sort_order: SQL keyword for order of result set (``ASC``, ``DESC``)\\n\\\n  \\n.. code-block:: python\\n\\n    client.api.auth.get_all_users(config_name='internal',\\\n  \\ include_roles=True)\\n\\n    RPCResponse(riq=13,\\n                ret=[{'config_name':\\\n  \\ 'internal',\\n                      'uuid': '80c67364-cb31-4f4b-972a-e7ea3f752bb8',\\n\\\n  \\                      'roles': ['Superuser', 'User'], 'username': 'root'},\\n  \\\n  \\                   {'config_name': 'internal',\\n                      'uuid': '59c4c....}],\\\n  \\ error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/GetAllUsersSchema'\n  definitions:\n    GetAllUsersSchema:\n      properties:\n        config_name:\n          description: The configuration name, to get the users listing\n          title: config_name\n          type: string\n        include_custom_data:\n          default: false\n          description: Include the custom data for each of the accounts on the list\n          title: include_custom_data\n          type: boolean\n        include_deleted_user:\n          default: false\n          description: Include the default deleted user account in the list\n          title: include_deleted_user\n          type: boolean\n        include_groups:\n          default: false\n          description: Include the groups for each of the accounts on the list\n          title: include_groups\n          type: boolean\n        include_perms:\n          default: false\n          description: Include the permissions for each of the accounts on the list\n          title: include_perms\n          type: boolean\n        include_roles:\n          default: false\n          description: Include the roles for each of the accounts on the list\n          title: include_roles\n          type: boolean\n        last_uuid:\n          description: Last paginated item UUID\n          format: uuid\n          title: last_uuid\n          type: string\n        page_size:\n          description: How many items per page\n          exclusiveMinimum: true\n          format: integer\n          minimum: 1\n          title: page_size\n          type: number\n        sort_order:\n          description: Sort order. Either 'ASC' or 'DESC'\n          enum:\n          - ASC\n          - DESC\n          enumNames: []\n          title: sort_order\n          type: string\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - include_roles\n  - false\n- - include_perms\n  - false\n- - include_groups\n  - false\n- - include_custom_data\n  - false\n- - include_deleted_user\n  - false\n- - last_uuid\n  - null\n- - page_size\n  - null\n- - sort_order\n  - ASC"
                }, 
                "get_jwt": {
                    "detailed": {
                        "doc": "Get a JSON Web Token for the current user.", 
                        "returns": "Dict", 
                        "signature": "get_jwt()"
                    }, 
                    "formatted": "signature: get_jwt()\nreturns: Dict\ndoc: Get a JSON Web Token for the current user."
                }, 
                "delete_role": {
                    "detailed": {
                        "doc": "Delete a role from the system.\n\nParameters\n:role_name: Name of the group to be deleted.\n:role_uuid: UUID for this group.  When calling this endpoint, use either\n                   ``role_uuid`` or ``role_name`` to uniquely identify a role.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteRoleSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "role_name": {
                                            "type": "string", 
                                            "description": "The role name", 
                                            "title": "role_name"
                                        }, 
                                        "role_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The role UUID", 
                                            "title": "role_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteRoleSchema"
                        }, 
                        "parameters": [
                            [
                                "role_name", 
                                null
                            ], 
                            [
                                "role_uuid", 
                                null
                            ]
                        ], 
                        "signature": "delete_role(role_name: typing.Union[str, NoneType], role_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_role(role_name: typing.Union[str, NoneType], role_uuid: typing.Union[uuid.UUID,\n  NoneType])'\nreturns: None\ndoc: \"Delete a role from the system.\\n\\nParameters\\n:role_name: Name of the group\\\n  \\ to be deleted.\\n:role_uuid: UUID for this group.  When calling this endpoint,\\\n  \\ use either\\n                   ``role_uuid`` or ``role_name`` to uniquely identify\\\n  \\ a role.\"\nschema:\n  $ref: '#/definitions/DeleteRoleSchema'\n  definitions:\n    DeleteRoleSchema:\n      properties:\n        role_name:\n          description: The role name\n          title: role_name\n          type: string\n        role_uuid:\n          description: The role UUID\n          format: uuid\n          title: role_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - role_name\n  - null\n- - role_uuid\n  - null"
                }, 
                "get_group_links": {
                    "detailed": {
                        "doc": "Get information on links between external auth backend groups and SSE\ninternal groups.\n\nParameters\n:group_name: SSE group name (substring match)\n:group_uuid: SSE group UUID\n:config_name: Name of the authentication backend (substring match)\n:ext_group_name: External group name (substring match)\n:ext_group_uid: External group unique ID", 
                        "returns": "List[Dict]", 
                        "schema": {
                            "definitions": {
                                "GetGroupLinksSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "config_name": {
                                            "type": "string", 
                                            "description": "Name of the authentication backend of the external group", 
                                            "title": "config_name"
                                        }, 
                                        "ext_group_name": {
                                            "type": "string", 
                                            "description": "Name of the external group", 
                                            "title": "ext_group_name"
                                        }, 
                                        "enabled": {
                                            "type": "boolean", 
                                            "description": "Return group links that are enabled or not.  Passing None returns all links regardless.", 
                                            "name": "Return enabled links", 
                                            "title": "enabled"
                                        }, 
                                        "group_name": {
                                            "type": "string", 
                                            "description": "SSE group name", 
                                            "title": "group_name"
                                        }, 
                                        "ext_group_uid": {
                                            "type": "string", 
                                            "description": "Unique ID of the external group", 
                                            "title": "ext_group_uid"
                                        }, 
                                        "ext_group_dn": {
                                            "type": "string", 
                                            "description": "LDAP Distinguished Name of the external group", 
                                            "title": "ext_group_dn"
                                        }, 
                                        "group_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "SSE group UUID", 
                                            "title": "group_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetGroupLinksSchema"
                        }, 
                        "parameters": [
                            [
                                "group_name", 
                                null
                            ], 
                            [
                                "group_uuid", 
                                null
                            ], 
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "ext_group_name", 
                                null
                            ], 
                            [
                                "ext_group_uid", 
                                null
                            ], 
                            [
                                "ext_group_dn", 
                                null
                            ], 
                            [
                                "enabled", 
                                null
                            ]
                        ], 
                        "signature": "get_group_links(group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID, NoneType], config_name: typing.Union[str, NoneType], ext_group_name: typing.Union[str, NoneType], ext_group_uid: typing.Union[str, NoneType], ext_group_dn: typing.Union[str, NoneType], enabled: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'get_group_links(group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID,\n  NoneType], config_name: typing.Union[str, NoneType], ext_group_name: typing.Union[str,\n  NoneType], ext_group_uid: typing.Union[str, NoneType], ext_group_dn: typing.Union[str,\n  NoneType], enabled: typing.Union[bool, NoneType])'\nreturns: List[Dict]\ndoc: 'Get information on links between external auth backend groups and SSE\n\n  internal groups.\n\n\n  Parameters\n\n  :group_name: SSE group name (substring match)\n\n  :group_uuid: SSE group UUID\n\n  :config_name: Name of the authentication backend (substring match)\n\n  :ext_group_name: External group name (substring match)\n\n  :ext_group_uid: External group unique ID'\nschema:\n  $ref: '#/definitions/GetGroupLinksSchema'\n  definitions:\n    GetGroupLinksSchema:\n      properties:\n        config_name:\n          description: Name of the authentication backend of the external group\n          title: config_name\n          type: string\n        enabled:\n          description: Return group links that are enabled or not.  Passing None returns\n            all links regardless.\n          name: Return enabled links\n          title: enabled\n          type: boolean\n        ext_group_dn:\n          description: LDAP Distinguished Name of the external group\n          title: ext_group_dn\n          type: string\n        ext_group_name:\n          description: Name of the external group\n          title: ext_group_name\n          type: string\n        ext_group_uid:\n          description: Unique ID of the external group\n          title: ext_group_uid\n          type: string\n        group_name:\n          description: SSE group name\n          title: group_name\n          type: string\n        group_uuid:\n          description: SSE group UUID\n          format: uuid\n          title: group_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - group_name\n  - null\n- - group_uuid\n  - null\n- - config_name\n  - null\n- - ext_group_name\n  - null\n- - ext_group_uid\n  - null\n- - ext_group_dn\n  - null\n- - enabled\n  - null"
                }, 
                "get_group": {
                    "detailed": {
                        "doc": "Retrieve information about a group.\n\nParameters\n:config_name: Name of the authentication backend to which this group\n                    account belongs\n:group_name: Name of the group\n:group_uuid: UUID for this group.  When calling this endpoint, use\n                   either ``group_uuid`` or ``config_name`` and ``group_name`` to\n                   uniquely identify a group.\n:include_users: If this parameter is true, include the members of the group in the return.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetGroupSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "group_name": {
                                            "type": "string", 
                                            "description": "The group name part of the group_name/config_name combo", 
                                            "title": "group_name"
                                        }, 
                                        "include_users": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the group members for each of the groups on the list", 
                                            "title": "include_users"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The config_name part of the group_name/config_name combo", 
                                            "title": "config_name"
                                        }, 
                                        "group_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The group UUID", 
                                            "title": "group_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetGroupSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "group_name", 
                                null
                            ], 
                            [
                                "group_uuid", 
                                null
                            ], 
                            [
                                "include_users", 
                                false
                            ]
                        ], 
                        "signature": "get_group(config_name: typing.Union[str, NoneType], group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID, NoneType], include_users: bool)"
                    }, 
                    "formatted": "signature: 'get_group(config_name: typing.Union[str, NoneType], group_name: typing.Union[str,\n  NoneType], group_uuid: typing.Union[uuid.UUID, NoneType], include_users: bool)'\nreturns: Dict\ndoc: \"Retrieve information about a group.\\n\\nParameters\\n:config_name: Name of the\\\n  \\ authentication backend to which this group\\n                    account belongs\\n\\\n  :group_name: Name of the group\\n:group_uuid: UUID for this group.  When calling\\\n  \\ this endpoint, use\\n                   either ``group_uuid`` or ``config_name``\\\n  \\ and ``group_name`` to\\n                   uniquely identify a group.\\n:include_users:\\\n  \\ If this parameter is true, include the members of the group in the return.\"\nschema:\n  $ref: '#/definitions/GetGroupSchema'\n  definitions:\n    GetGroupSchema:\n      properties:\n        config_name:\n          description: The config_name part of the group_name/config_name combo\n          title: config_name\n          type: string\n        group_name:\n          description: The group name part of the group_name/config_name combo\n          title: group_name\n          type: string\n        group_uuid:\n          description: The group UUID\n          format: uuid\n          title: group_uuid\n          type: string\n        include_users:\n          default: false\n          description: Include the group members for each of the groups on the list\n          title: include_users\n          type: boolean\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - group_name\n  - null\n- - group_uuid\n  - null\n- - include_users\n  - false"
                }, 
                "save_user": {
                    "detailed": {
                        "doc": "Save a user account.  This call supports both creating accounts\nand updating user account information.\n\nSee :ref:`users` for more details about the user model.\n\nParameters\n:config_name: Name of the authentication backend to which this user\n                    account belongs\n:username: User's login name.  Changing a username is only supported for the ``internal``\n                 authentication backend.\n:password: Account password. (account creation only)\n:account_uuid: UUID for this account.  When calling this endpoint, use either\n                     ``account_uuid`` or ``config_name`` and ``username`` to\n                     uniquely identify an account.\n:perms: A list of permissions to assign to this account.  See :ref:`api-permissions`.\n:roles: A list of roles to assign to this account. See :ref:`roles-permissions`.\n:groups: A list of groups to assign to this account\n:custom_data: A dictionary containing arbitrary data. Authentication backends can\n                    use this to store information to assist in aligning users\n                    in RaaS with users in the backend.  For example, the Active\n                    Directory backend uses it to store the users Distinguished Name.", 
                        "returns": "UUID", 
                        "schema": {
                            "definitions": {
                                "SaveUserSchemaV5": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "username": {
                                            "type": "string", 
                                            "description": "The username part of the username/config_name combo", 
                                            "title": "username"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The config_name part of the username/config_name combo", 
                                            "title": "config_name"
                                        }, 
                                        "roles": {
                                            "items": {
                                                "type": "string", 
                                                "title": "roles"
                                            }, 
                                            "type": "array", 
                                            "description": "List of role names", 
                                            "title": "roles"
                                        }, 
                                        "perms": {
                                            "items": {
                                                "type": "string", 
                                                "title": "perms"
                                            }, 
                                            "type": "array", 
                                            "description": "List of permissions", 
                                            "title": "perms"
                                        }, 
                                        "custom_data": {
                                            "type": "object", 
                                            "description": "Custom data dictionary", 
                                            "title": "custom_data"
                                        }, 
                                        "groups": {
                                            "items": {
                                                "type": "string", 
                                                "title": "groups"
                                            }, 
                                            "type": "array", 
                                            "description": "List of group names", 
                                            "title": "groups"
                                        }, 
                                        "remote_uid": {
                                            "type": "string", 
                                            "description": "The remote uuid for this user.", 
                                            "title": "remote_uid"
                                        }, 
                                        "password": {
                                            "type": "string", 
                                            "description": "The user account password", 
                                            "title": "password"
                                        }, 
                                        "account_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The user account UUID", 
                                            "title": "account_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveUserSchemaV5"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "username", 
                                null
                            ], 
                            [
                                "account_uuid", 
                                null
                            ], 
                            [
                                "perms", 
                                null
                            ], 
                            [
                                "roles", 
                                null
                            ], 
                            [
                                "groups", 
                                null
                            ], 
                            [
                                "password", 
                                null
                            ], 
                            [
                                "remote_uid", 
                                null
                            ], 
                            [
                                "custom_data", 
                                null
                            ]
                        ], 
                        "signature": "save_user(config_name: typing.Union[str, NoneType], username: typing.Union[str, NoneType], account_uuid: typing.Union[uuid.UUID, NoneType], perms: typing.Union[typing.List[str], NoneType], roles: typing.Union[typing.List[str], NoneType], groups: typing.Union[typing.List[str], NoneType], password: typing.Union[str, NoneType], remote_uid: typing.Union[str, NoneType], custom_data: typing.Union[dict, NoneType])"
                    }, 
                    "formatted": "signature: 'save_user(config_name: typing.Union[str, NoneType], username: typing.Union[str,\n  NoneType], account_uuid: typing.Union[uuid.UUID, NoneType], perms: typing.Union[typing.List[str],\n  NoneType], roles: typing.Union[typing.List[str], NoneType], groups: typing.Union[typing.List[str],\n  NoneType], password: typing.Union[str, NoneType], remote_uid: typing.Union[str,\n  NoneType], custom_data: typing.Union[dict, NoneType])'\nreturns: UUID\ndoc: \"Save a user account.  This call supports both creating accounts\\nand updating\\\n  \\ user account information.\\n\\nSee :ref:`users` for more details about the user\\\n  \\ model.\\n\\nParameters\\n:config_name: Name of the authentication backend to which\\\n  \\ this user\\n                    account belongs\\n:username: User's login name.\\\n  \\  Changing a username is only supported for the ``internal``\\n                \\\n  \\ authentication backend.\\n:password: Account password. (account creation only)\\n\\\n  :account_uuid: UUID for this account.  When calling this endpoint, use either\\n\\\n  \\                     ``account_uuid`` or ``config_name`` and ``username`` to\\n\\\n  \\                     uniquely identify an account.\\n:perms: A list of permissions\\\n  \\ to assign to this account.  See :ref:`api-permissions`.\\n:roles: A list of roles\\\n  \\ to assign to this account. See :ref:`roles-permissions`.\\n:groups: A list of groups\\\n  \\ to assign to this account\\n:custom_data: A dictionary containing arbitrary data.\\\n  \\ Authentication backends can\\n                    use this to store information\\\n  \\ to assist in aligning users\\n                    in RaaS with users in the backend.\\\n  \\  For example, the Active\\n                    Directory backend uses it to store\\\n  \\ the users Distinguished Name.\"\nschema:\n  $ref: '#/definitions/SaveUserSchemaV5'\n  definitions:\n    SaveUserSchemaV5:\n      properties:\n        account_uuid:\n          description: The user account UUID\n          format: uuid\n          title: account_uuid\n          type: string\n        config_name:\n          description: The config_name part of the username/config_name combo\n          title: config_name\n          type: string\n        custom_data:\n          description: Custom data dictionary\n          title: custom_data\n          type: object\n        groups:\n          description: List of group names\n          items:\n            title: groups\n            type: string\n          title: groups\n          type: array\n        password:\n          description: The user account password\n          title: password\n          type: string\n        perms:\n          description: List of permissions\n          items:\n            title: perms\n            type: string\n          title: perms\n          type: array\n        remote_uid:\n          description: The remote uuid for this user.\n          title: remote_uid\n          type: string\n        roles:\n          description: List of role names\n          items:\n            title: roles\n            type: string\n          title: roles\n          type: array\n        username:\n          description: The username part of the username/config_name combo\n          title: username\n          type: string\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - username\n  - null\n- - account_uuid\n  - null\n- - perms\n  - null\n- - roles\n  - null\n- - groups\n  - null\n- - password\n  - null\n- - remote_uid\n  - null\n- - custom_data\n  - null"
                }, 
                "change_password": {
                    "detailed": {
                        "doc": "Update a password for an account_uuid.", 
                        "schema": {
                            "definitions": {
                                "ChangePasswordSchema": {
                                    "required": [
                                        "account_uuid", 
                                        "password"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "password": {
                                            "type": "string", 
                                            "description": "The new password", 
                                            "title": "password"
                                        }, 
                                        "account_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The user account UUID", 
                                            "title": "account_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/ChangePasswordSchema"
                        }, 
                        "parameters": [
                            [
                                "account_uuid"
                            ], 
                            [
                                "password"
                            ]
                        ], 
                        "signature": "change_password(account_uuid: UUID, password: 'unicode')"
                    }, 
                    "formatted": "signature: 'change_password(account_uuid: UUID, password: ''unicode'')'\ndoc: Update a password for an account_uuid.\nschema:\n  $ref: '#/definitions/ChangePasswordSchema'\n  definitions:\n    ChangePasswordSchema:\n      properties:\n        account_uuid:\n          description: The user account UUID\n          format: uuid\n          title: account_uuid\n          type: string\n        password:\n          description: The new password\n          title: password\n          type: string\n      required:\n      - account_uuid\n      - password\n      type: object\nparameters:\n- - account_uuid\n- - password"
                }, 
                "transfer_resources": {
                    "detailed": {
                        "doc": "Transfer resources that belong to one user to another.\n\nParameters\n:from_user_uuid: UUID of the user whose resources are to be transferred.\n:to_user_uuid: UUID of the user to whom the resources are to be transferred.\n:resource_types: The type of the resource that is to be transferred (Optional).\n                 ``target_groups``, ``jobs``, ``files``, ``pillars``, ``auth_configs``, ``formulas`` are valid inputs.\n:resource_uuids: The UUID of the resources that are to be transferred. (Optional).\n:revoke_access: Revoke access on the resource after transfer.\n:test: Return the number of resources to be updated without updating ownership.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "TransferResourcesSchema": {
                                    "required": [
                                        "from_user_uuid", 
                                        "to_user_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "from_user_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID of the user whose resources are to be transferred.", 
                                            "title": "from_user_uuid"
                                        }, 
                                        "resource_types": {
                                            "default": null, 
                                            "items": {
                                                "enumNames": [], 
                                                "enum": [
                                                    "target_groups", 
                                                    "jobs", 
                                                    "pillars", 
                                                    "files", 
                                                    "auth_configs", 
                                                    "formulas"
                                                ], 
                                                "type": "string", 
                                                "title": "resource_types"
                                            }, 
                                            "type": "array", 
                                            "description": "The type of the resource that is to be transferred.", 
                                            "title": "resource_types"
                                        }, 
                                        "to_user_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "UUID of the user to whom the resources are to be transferred.", 
                                            "title": "to_user_uuid"
                                        }, 
                                        "revoke_access": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Revoke access on the resource after transfer", 
                                            "title": "revoke_access"
                                        }, 
                                        "test": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Return the number of resources that will be updated without actually updating", 
                                            "title": "test"
                                        }, 
                                        "resource_uuids": {
                                            "default": null, 
                                            "items": {
                                                "format": "uuid", 
                                                "type": "string", 
                                                "title": "resource_uuids"
                                            }, 
                                            "type": "array", 
                                            "description": "UUIDs of the resources that are to be transferred.", 
                                            "title": "resource_uuids"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/TransferResourcesSchema"
                        }, 
                        "parameters": [
                            [
                                "from_user_uuid"
                            ], 
                            [
                                "to_user_uuid"
                            ], 
                            [
                                "resource_types", 
                                null
                            ], 
                            [
                                "resource_uuids", 
                                null
                            ], 
                            [
                                "revoke_access", 
                                false
                            ], 
                            [
                                "test", 
                                false
                            ]
                        ], 
                        "signature": "transfer_resources(from_user_uuid: UUID, to_user_uuid: UUID, resource_types: typing.Union[typing.List[str], NoneType], resource_uuids: typing.Union[typing.List[uuid.UUID], NoneType], revoke_access: typing.Union[bool, NoneType], test: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'transfer_resources(from_user_uuid: UUID, to_user_uuid: UUID, resource_types:\n  typing.Union[typing.List[str], NoneType], resource_uuids: typing.Union[typing.List[uuid.UUID],\n  NoneType], revoke_access: typing.Union[bool, NoneType], test: typing.Union[bool,\n  NoneType])'\nreturns: Dict\ndoc: \"Transfer resources that belong to one user to another.\\n\\nParameters\\n:from_user_uuid:\\\n  \\ UUID of the user whose resources are to be transferred.\\n:to_user_uuid: UUID of\\\n  \\ the user to whom the resources are to be transferred.\\n:resource_types: The type\\\n  \\ of the resource that is to be transferred (Optional).\\n                 ``target_groups``,\\\n  \\ ``jobs``, ``files``, ``pillars``, ``auth_configs``, ``formulas`` are valid inputs.\\n\\\n  :resource_uuids: The UUID of the resources that are to be transferred. (Optional).\\n\\\n  :revoke_access: Revoke access on the resource after transfer.\\n:test: Return the\\\n  \\ number of resources to be updated without updating ownership.\"\nschema:\n  $ref: '#/definitions/TransferResourcesSchema'\n  definitions:\n    TransferResourcesSchema:\n      properties:\n        from_user_uuid:\n          description: UUID of the user whose resources are to be transferred.\n          format: uuid\n          title: from_user_uuid\n          type: string\n        resource_types:\n          default: null\n          description: The type of the resource that is to be transferred.\n          items:\n            enum:\n            - target_groups\n            - jobs\n            - pillars\n            - files\n            - auth_configs\n            - formulas\n            enumNames: []\n            title: resource_types\n            type: string\n          title: resource_types\n          type: array\n        resource_uuids:\n          default: null\n          description: UUIDs of the resources that are to be transferred.\n          items:\n            format: uuid\n            title: resource_uuids\n            type: string\n          title: resource_uuids\n          type: array\n        revoke_access:\n          default: false\n          description: Revoke access on the resource after transfer\n          title: revoke_access\n          type: boolean\n        test:\n          default: false\n          description: Return the number of resources that will be updated without\n            actually updating\n          title: test\n          type: boolean\n        to_user_uuid:\n          description: UUID of the user to whom the resources are to be transferred.\n          format: uuid\n          title: to_user_uuid\n          type: string\n      required:\n      - from_user_uuid\n      - to_user_uuid\n      type: object\nparameters:\n- - from_user_uuid\n- - to_user_uuid\n- - resource_types\n  - null\n- - resource_uuids\n  - null\n- - revoke_access\n  - false\n- - test\n  - false"
                }, 
                "delete_user": {
                    "detailed": {
                        "doc": "Delete a user account.\n\nParameters\n:config_name: Name of the authentication backend to which this user\n                    account belongs\n:username: User's login name.\n:account_uuid: UUID for this account.  When calling this endpoint, use either\n               ``account_uuid`` or ``config_name`` and ``username`` to\n               uniquely identify an account.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteUserSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "username": {
                                            "type": "string", 
                                            "description": "The username part of the username/config_name combo", 
                                            "title": "username"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The config_name part of the username/config_name combo", 
                                            "title": "config_name"
                                        }, 
                                        "account_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The user account UUID", 
                                            "title": "account_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteUserSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "username", 
                                null
                            ], 
                            [
                                "account_uuid", 
                                null
                            ]
                        ], 
                        "signature": "delete_user(config_name: typing.Union[str, NoneType], username: typing.Union[str, NoneType], account_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_user(config_name: typing.Union[str, NoneType], username: typing.Union[str,\n  NoneType], account_uuid: typing.Union[uuid.UUID, NoneType])'\nreturns: None\ndoc: \"Delete a user account.\\n\\nParameters\\n:config_name: Name of the authentication\\\n  \\ backend to which this user\\n                    account belongs\\n:username: User's\\\n  \\ login name.\\n:account_uuid: UUID for this account.  When calling this endpoint,\\\n  \\ use either\\n               ``account_uuid`` or ``config_name`` and ``username``\\\n  \\ to\\n               uniquely identify an account.\"\nschema:\n  $ref: '#/definitions/DeleteUserSchema'\n  definitions:\n    DeleteUserSchema:\n      properties:\n        account_uuid:\n          description: The user account UUID\n          format: uuid\n          title: account_uuid\n          type: string\n        config_name:\n          description: The config_name part of the username/config_name combo\n          title: config_name\n          type: string\n        username:\n          description: The username part of the username/config_name combo\n          title: username\n          type: string\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - username\n  - null\n- - account_uuid\n  - null"
                }, 
                "get_all_groups": {
                    "detailed": {
                        "doc": "Return all groups from the provided named configuration.\n\nParameters\n:config_name: Name of the authentication backend from which groups\n                    should be retrieved.\n:include_roles: Include roles in result (see :ref:`roles-permissions`)\n:include_users: Include users belonging to this group\n:include_custom_data: Include any custom data assigned to this group.\n:last_uuid: Used in conjunction with ``page_size`` to indicate where\n                  to continue pagination\n:page_size: Limit results to this number of records.  Combine with\n                  ``last_uuid`` to achieve pagination through all records\n                  efficiently.\n:sort_order: SQL keyword for order of result set (``ASC``, ``DESC``)", 
                        "returns": [
                            "Dict", 
                            "List"
                        ], 
                        "schema": {
                            "definitions": {
                                "GetAllGroupsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "include_users": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the group members for each of the groups on the list", 
                                            "title": "include_users"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The configuration name, to get the groups listing", 
                                            "title": "config_name"
                                        }, 
                                        "last_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Last paginated item UUID", 
                                            "title": "last_uuid"
                                        }, 
                                        "include_perms": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the permissions for each of the groups on the list", 
                                            "title": "include_perms"
                                        }, 
                                        "include_custom_data": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the custom data for each of the groups on the list", 
                                            "title": "include_custom_data"
                                        }, 
                                        "include_roles": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include the roles for each of the groups on the list", 
                                            "title": "include_roles"
                                        }, 
                                        "page_size": {
                                            "description": "How many items per page", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "page_size", 
                                            "minimum": 1, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "sort_order": {
                                            "enumNames": [], 
                                            "enum": [
                                                "ASC", 
                                                "DESC"
                                            ], 
                                            "type": "string", 
                                            "description": "Sort order. Either 'ASC' or 'DESC'", 
                                            "title": "sort_order"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetAllGroupsSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "include_roles", 
                                false
                            ], 
                            [
                                "include_users", 
                                false
                            ], 
                            [
                                "include_perms", 
                                false
                            ], 
                            [
                                "include_custom_data", 
                                false
                            ], 
                            [
                                "last_uuid", 
                                null
                            ], 
                            [
                                "page_size", 
                                null
                            ], 
                            [
                                "sort_order", 
                                "ASC"
                            ]
                        ], 
                        "signature": "get_all_groups(config_name: typing.Union[str, NoneType], include_roles: bool, include_users: bool, include_perms: bool, include_custom_data: bool, last_uuid: typing.Union[uuid.UUID, NoneType], page_size: typing.Union[int, NoneType], sort_order: 'unicode' = ASC)"
                    }, 
                    "formatted": "signature: 'get_all_groups(config_name: typing.Union[str, NoneType], include_roles:\n  bool, include_users: bool, include_perms: bool, include_custom_data: bool, last_uuid:\n  typing.Union[uuid.UUID, NoneType], page_size: typing.Union[int, NoneType], sort_order:\n  ''unicode'' = ASC)'\nreturns:\n- Dict\n- List\ndoc: \"Return all groups from the provided named configuration.\\n\\nParameters\\n:config_name:\\\n  \\ Name of the authentication backend from which groups\\n                    should\\\n  \\ be retrieved.\\n:include_roles: Include roles in result (see :ref:`roles-permissions`)\\n\\\n  :include_users: Include users belonging to this group\\n:include_custom_data: Include\\\n  \\ any custom data assigned to this group.\\n:last_uuid: Used in conjunction with\\\n  \\ ``page_size`` to indicate where\\n                  to continue pagination\\n:page_size:\\\n  \\ Limit results to this number of records.  Combine with\\n                  ``last_uuid``\\\n  \\ to achieve pagination through all records\\n                  efficiently.\\n:sort_order:\\\n  \\ SQL keyword for order of result set (``ASC``, ``DESC``)\"\nschema:\n  $ref: '#/definitions/GetAllGroupsSchema'\n  definitions:\n    GetAllGroupsSchema:\n      properties:\n        config_name:\n          description: The configuration name, to get the groups listing\n          title: config_name\n          type: string\n        include_custom_data:\n          default: false\n          description: Include the custom data for each of the groups on the list\n          title: include_custom_data\n          type: boolean\n        include_perms:\n          default: false\n          description: Include the permissions for each of the groups on the list\n          title: include_perms\n          type: boolean\n        include_roles:\n          default: false\n          description: Include the roles for each of the groups on the list\n          title: include_roles\n          type: boolean\n        include_users:\n          default: false\n          description: Include the group members for each of the groups on the list\n          title: include_users\n          type: boolean\n        last_uuid:\n          description: Last paginated item UUID\n          format: uuid\n          title: last_uuid\n          type: string\n        page_size:\n          description: How many items per page\n          exclusiveMinimum: true\n          format: integer\n          minimum: 1\n          title: page_size\n          type: number\n        sort_order:\n          description: Sort order. Either 'ASC' or 'DESC'\n          enum:\n          - ASC\n          - DESC\n          enumNames: []\n          title: sort_order\n          type: string\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - include_roles\n  - false\n- - include_users\n  - false\n- - include_perms\n  - false\n- - include_custom_data\n  - false\n- - last_uuid\n  - null\n- - page_size\n  - null\n- - sort_order\n  - ASC"
                }, 
                "save_user_link": {
                    "detailed": {
                        "doc": "Create a link between an external user and an internal RaaS user.\nWill create an internal user record if necessary.\n\nParameters\n:config_name: Name of the authentication backend (substring match)\n:username: Username to link\n:user_dn: DistinguishedName in the external directory", 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "username", 
                                null
                            ], 
                            [
                                "user_dn", 
                                null
                            ], 
                            [
                                "enabled", 
                                true
                            ]
                        ], 
                        "signature": "save_user_link(config_name: typing.Union[str, NoneType], username: typing.Union[str, NoneType], user_dn: typing.Union[str, NoneType], enabled)"
                    }, 
                    "formatted": "signature: 'save_user_link(config_name: typing.Union[str, NoneType], username: typing.Union[str,\n  NoneType], user_dn: typing.Union[str, NoneType], enabled)'\ndoc: 'Create a link between an external user and an internal RaaS user.\n\n  Will create an internal user record if necessary.\n\n\n  Parameters\n\n  :config_name: Name of the authentication backend (substring match)\n\n  :username: Username to link\n\n  :user_dn: DistinguishedName in the external directory'\nparameters:\n- - config_name\n  - null\n- - username\n  - null\n- - user_dn\n  - null\n- - enabled\n  - true"
                }, 
                "delete_group_link": {
                    "detailed": {
                        "doc": "Delete the link between an external auth backend group and an SSE internal\ngroup.\n\nParameters\n:group_name: Name of the SSE group to be linked to the external group\n:group_uuid: UUID of the SSE group. Pass either ``group_uuid`` or\n                ``group_name`` to uniquely identify the SSE group.\n:config_name: Name of the authentication backend of the external group\n:ext_group_name: Name of the external group to be linked to the SSE group\n:ext_group_uid: Unique ID of the external group. Pass ``config_name`` and\n                either ``ext_group_name`` or ``ext_group_uid`` to uniquely\n                identify an external group.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "UnlinkGroupSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "config_name": {
                                            "type": "string", 
                                            "description": "Name of the authentication backend of the external group", 
                                            "title": "config_name"
                                        }, 
                                        "ext_group_name": {
                                            "type": "string", 
                                            "description": "Name of the external group", 
                                            "title": "ext_group_name"
                                        }, 
                                        "enabled": {
                                            "type": "boolean", 
                                            "description": "Return group links that are enabled or not.  Passing None returns all links regardless.", 
                                            "name": "Return enabled links", 
                                            "title": "enabled"
                                        }, 
                                        "group_name": {
                                            "type": "string", 
                                            "description": "SSE group name", 
                                            "title": "group_name"
                                        }, 
                                        "ext_group_uid": {
                                            "type": "string", 
                                            "description": "Unique ID of the external group", 
                                            "title": "ext_group_uid"
                                        }, 
                                        "ext_group_dn": {
                                            "type": "string", 
                                            "description": "LDAP Distinguished Name of the external group", 
                                            "title": "ext_group_dn"
                                        }, 
                                        "group_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "SSE group UUID", 
                                            "title": "group_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/UnlinkGroupSchema"
                        }, 
                        "parameters": [
                            [
                                "group_name", 
                                null
                            ], 
                            [
                                "group_uuid", 
                                null
                            ], 
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "ext_group_name", 
                                null
                            ], 
                            [
                                "ext_group_uid", 
                                null
                            ]
                        ], 
                        "signature": "delete_group_link(group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID, NoneType], config_name: typing.Union[str, NoneType], ext_group_name: typing.Union[str, NoneType], ext_group_uid: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_group_link(group_name: typing.Union[str, NoneType], group_uuid:\n  typing.Union[uuid.UUID, NoneType], config_name: typing.Union[str, NoneType], ext_group_name:\n  typing.Union[str, NoneType], ext_group_uid: typing.Union[str, NoneType])'\nreturns: None\ndoc: \"Delete the link between an external auth backend group and an SSE internal\\n\\\n  group.\\n\\nParameters\\n:group_name: Name of the SSE group to be linked to the external\\\n  \\ group\\n:group_uuid: UUID of the SSE group. Pass either ``group_uuid`` or\\n   \\\n  \\             ``group_name`` to uniquely identify the SSE group.\\n:config_name:\\\n  \\ Name of the authentication backend of the external group\\n:ext_group_name: Name\\\n  \\ of the external group to be linked to the SSE group\\n:ext_group_uid: Unique ID\\\n  \\ of the external group. Pass ``config_name`` and\\n                either ``ext_group_name``\\\n  \\ or ``ext_group_uid`` to uniquely\\n                identify an external group.\"\nschema:\n  $ref: '#/definitions/UnlinkGroupSchema'\n  definitions:\n    UnlinkGroupSchema:\n      properties:\n        config_name:\n          description: Name of the authentication backend of the external group\n          title: config_name\n          type: string\n        enabled:\n          description: Return group links that are enabled or not.  Passing None returns\n            all links regardless.\n          name: Return enabled links\n          title: enabled\n          type: boolean\n        ext_group_dn:\n          description: LDAP Distinguished Name of the external group\n          title: ext_group_dn\n          type: string\n        ext_group_name:\n          description: Name of the external group\n          title: ext_group_name\n          type: string\n        ext_group_uid:\n          description: Unique ID of the external group\n          title: ext_group_uid\n          type: string\n        group_name:\n          description: SSE group name\n          title: group_name\n          type: string\n        group_uuid:\n          description: SSE group UUID\n          format: uuid\n          title: group_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - group_name\n  - null\n- - group_uuid\n  - null\n- - config_name\n  - null\n- - ext_group_name\n  - null\n- - ext_group_uid\n  - null"
                }, 
                "save_role": {
                    "detailed": {
                        "doc": "Update an existing or create a new role.\n\nSee :ref:`roles-permissions` for more details about roles in SaltStack Enterprise.\n\nParameters\n:role_name: Name of the role in question.\n:role_uuid: UUID for this role.\n:perms: A list of permissions to assign to this role. See :ref:`api-permissions` and :ref:`roles-permissions`.\n:description: Text to describe nature and purpose of the role.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SaveRoleSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "perms": {
                                            "items": {
                                                "type": "string", 
                                                "title": "perms"
                                            }, 
                                            "type": "array", 
                                            "description": "List of permissions", 
                                            "title": "perms"
                                        }, 
                                        "role_name": {
                                            "type": "string", 
                                            "description": "The role name", 
                                            "title": "role_name"
                                        }, 
                                        "description": {
                                            "type": "string", 
                                            "description": "A minor description text about the role", 
                                            "title": "description"
                                        }, 
                                        "role_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The role UUID", 
                                            "title": "role_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveRoleSchema"
                        }, 
                        "parameters": [
                            [
                                "role_name", 
                                null
                            ], 
                            [
                                "role_uuid", 
                                null
                            ], 
                            [
                                "perms", 
                                null
                            ], 
                            [
                                "description", 
                                null
                            ]
                        ], 
                        "signature": "save_role(role_name: typing.Union[str, NoneType], role_uuid: typing.Union[uuid.UUID, NoneType], perms: typing.Union[typing.List[str], typing.Set[str], NoneType], description: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'save_role(role_name: typing.Union[str, NoneType], role_uuid: typing.Union[uuid.UUID,\n  NoneType], perms: typing.Union[typing.List[str], typing.Set[str], NoneType], description:\n  typing.Union[str, NoneType])'\nreturns: None\ndoc: 'Update an existing or create a new role.\n\n\n  See :ref:`roles-permissions` for more details about roles in SaltStack Enterprise.\n\n\n  Parameters\n\n  :role_name: Name of the role in question.\n\n  :role_uuid: UUID for this role.\n\n  :perms: A list of permissions to assign to this role. See :ref:`api-permissions`\n  and :ref:`roles-permissions`.\n\n  :description: Text to describe nature and purpose of the role.'\nschema:\n  $ref: '#/definitions/SaveRoleSchema'\n  definitions:\n    SaveRoleSchema:\n      properties:\n        description:\n          description: A minor description text about the role\n          title: description\n          type: string\n        perms:\n          description: List of permissions\n          items:\n            title: perms\n            type: string\n          title: perms\n          type: array\n        role_name:\n          description: The role name\n          title: role_name\n          type: string\n        role_uuid:\n          description: The role UUID\n          format: uuid\n          title: role_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - role_name\n  - null\n- - role_uuid\n  - null\n- - perms\n  - null\n- - description\n  - null"
                }, 
                "delete_group": {
                    "detailed": {
                        "doc": "Delete a group from the provided named configuration\n\nParameters\n:config_name: Name of the authentication backend to which this group\n                    belongs\n:group_name: Name of the group to be deleted.\n:group_uuid: UUID for this group.  When calling this endpoint, use either\n                   ``group_uuid`` or ``config_name`` and ``group_name`` to\n                   uniquely identify a group.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteGroupSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "group_name": {
                                            "type": "string", 
                                            "description": "The group name part of the group_name/config_name combo", 
                                            "title": "group_name"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The config_name part of the group_name/config_name combo", 
                                            "title": "config_name"
                                        }, 
                                        "group_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The group UUID", 
                                            "title": "group_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteGroupSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "group_name", 
                                null
                            ], 
                            [
                                "group_uuid", 
                                null
                            ]
                        ], 
                        "signature": "delete_group(config_name: typing.Union[str, NoneType], group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_group(config_name: typing.Union[str, NoneType], group_name: typing.Union[str,\n  NoneType], group_uuid: typing.Union[uuid.UUID, NoneType])'\nreturns: None\ndoc: \"Delete a group from the provided named configuration\\n\\nParameters\\n:config_name:\\\n  \\ Name of the authentication backend to which this group\\n                    belongs\\n\\\n  :group_name: Name of the group to be deleted.\\n:group_uuid: UUID for this group.\\\n  \\  When calling this endpoint, use either\\n                   ``group_uuid`` or\\\n  \\ ``config_name`` and ``group_name`` to\\n                   uniquely identify a\\\n  \\ group.\"\nschema:\n  $ref: '#/definitions/DeleteGroupSchema'\n  definitions:\n    DeleteGroupSchema:\n      properties:\n        config_name:\n          description: The config_name part of the group_name/config_name combo\n          title: config_name\n          type: string\n        group_name:\n          description: The group name part of the group_name/config_name combo\n          title: group_name\n          type: string\n        group_uuid:\n          description: The group UUID\n          format: uuid\n          title: group_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - group_name\n  - null\n- - group_uuid\n  - null"
                }, 
                "save_group": {
                    "detailed": {
                        "doc": "Save a group.  This call supports both creating groups\nand updating group information.\n\nParameters\n:config_name: Name of the authentication backend to which this group\n                    belongs\n:group_name: Name of this group.  Changing a group name is only supported for the ``internal``\n                   authentication backend.\n:group_uuid: UUID for this account.  When calling this endpoint, use either\n                   ``group_uuid`` or ``config_name`` and ``group_name`` to\n                   uniquely identify a group.\n:description: Text describing the group purpose.\n:roles: A list of roles to assign to this group. See :ref:`roles-permissions`\n:custom_data: A dictionary containing arbitrary data.  Authentication backends can\n                    use this to store information to assist in aligning groups\n                    in RaaS with groups in the backend.  For example, the Active\n                    Directory backend uses it to store a group's Distinguished Name.\n:remote_uid: Externally defined group unique id.", 
                        "returns": [
                            "None", 
                            "Dict"
                        ], 
                        "schema": {
                            "definitions": {
                                "SaveGroupSchemaV5": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The config_name part of the group_name/config_name combo", 
                                            "title": "config_name"
                                        }, 
                                        "description": {
                                            "type": "string", 
                                            "description": "A minor description text about the group", 
                                            "title": "description"
                                        }, 
                                        "roles": {
                                            "items": {
                                                "type": "string", 
                                                "title": "roles"
                                            }, 
                                            "type": "array", 
                                            "description": "List of role names", 
                                            "title": "roles"
                                        }, 
                                        "custom_data": {
                                            "type": "object", 
                                            "description": "Custom data dictionary", 
                                            "title": "custom_data"
                                        }, 
                                        "group_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The group UUID", 
                                            "title": "group_uuid"
                                        }, 
                                        "remote_uid": {
                                            "type": "string", 
                                            "description": "Remote UID for this group if present.", 
                                            "title": "remote_uid"
                                        }, 
                                        "group_name": {
                                            "type": "string", 
                                            "description": "The group name part of the group_name/config_name combo", 
                                            "title": "group_name"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveGroupSchemaV5"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "group_name", 
                                null
                            ], 
                            [
                                "group_uuid", 
                                null
                            ], 
                            [
                                "description", 
                                null
                            ], 
                            [
                                "roles", 
                                null
                            ], 
                            [
                                "custom_data", 
                                null
                            ], 
                            [
                                "remote_uid", 
                                null
                            ]
                        ], 
                        "signature": "save_group(config_name: typing.Union[str, NoneType], group_name: typing.Union[str, NoneType], group_uuid: typing.Union[uuid.UUID, NoneType], description: typing.Union[str, NoneType], roles: typing.Union[typing.List[str], NoneType], custom_data: typing.Union[dict, NoneType], remote_uid: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'save_group(config_name: typing.Union[str, NoneType], group_name: typing.Union[str,\n  NoneType], group_uuid: typing.Union[uuid.UUID, NoneType], description: typing.Union[str,\n  NoneType], roles: typing.Union[typing.List[str], NoneType], custom_data: typing.Union[dict,\n  NoneType], remote_uid: typing.Union[str, NoneType])'\nreturns:\n- None\n- Dict\ndoc: \"Save a group.  This call supports both creating groups\\nand updating group information.\\n\\\n  \\nParameters\\n:config_name: Name of the authentication backend to which this group\\n\\\n  \\                    belongs\\n:group_name: Name of this group.  Changing a group\\\n  \\ name is only supported for the ``internal``\\n                   authentication\\\n  \\ backend.\\n:group_uuid: UUID for this account.  When calling this endpoint, use\\\n  \\ either\\n                   ``group_uuid`` or ``config_name`` and ``group_name``\\\n  \\ to\\n                   uniquely identify a group.\\n:description: Text describing\\\n  \\ the group purpose.\\n:roles: A list of roles to assign to this group. See :ref:`roles-permissions`\\n\\\n  :custom_data: A dictionary containing arbitrary data.  Authentication backends can\\n\\\n  \\                    use this to store information to assist in aligning groups\\n\\\n  \\                    in RaaS with groups in the backend.  For example, the Active\\n\\\n  \\                    Directory backend uses it to store a group's Distinguished\\\n  \\ Name.\\n:remote_uid: Externally defined group unique id.\"\nschema:\n  $ref: '#/definitions/SaveGroupSchemaV5'\n  definitions:\n    SaveGroupSchemaV5:\n      properties:\n        config_name:\n          description: The config_name part of the group_name/config_name combo\n          title: config_name\n          type: string\n        custom_data:\n          description: Custom data dictionary\n          title: custom_data\n          type: object\n        description:\n          description: A minor description text about the group\n          title: description\n          type: string\n        group_name:\n          description: The group name part of the group_name/config_name combo\n          title: group_name\n          type: string\n        group_uuid:\n          description: The group UUID\n          format: uuid\n          title: group_uuid\n          type: string\n        remote_uid:\n          description: Remote UID for this group if present.\n          title: remote_uid\n          type: string\n        roles:\n          description: List of role names\n          items:\n            title: roles\n            type: string\n          title: roles\n          type: array\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - group_name\n  - null\n- - group_uuid\n  - null\n- - description\n  - null\n- - roles\n  - null\n- - custom_data\n  - null\n- - remote_uid\n  - null"
                }, 
                "get_user": {
                    "detailed": {
                        "doc": "Get details for a user account.  See :ref:`users` for more details about the user model.\n\nParameters\n:account_uuid: UUID of the user for which the call should retrieve details.\n                     This parameter cannot be combined with ``username``\n:username: Username of the account for which the call should retrieve details.\n                 This parameter cannot be combined with ``username``, and requires\n                 that ``config_name`` also be passed\n:config_name: Authentication/Authorization backend name (``internal``,\n                    ``ldap``, etc.)\n\n.. code-block:: python\n\n    client.api.auth.get_user(account_uuid='80c67364-cb31-4f4b-972a-e7ea3f752bb8')\n\n    RPCResponse(riq=12,\n                ret={'uuid': '80c67364-cb31-4f4b-972a-e7ea3f52bb8',\n                     'groups': [],\n                     'perms': ['cmd-read', 'master-config-read',\n                               'job-run', 'fs-read', 'cloud-read',\n                               'job-read', 'superuser', 'returner-read',\n                               'metadata-auth-read', 'target-read',\n                               'license-read', 'master-fs-read',\n                               'minion-read', 'master-read'],\n                     'config_name': 'internal',\n                     'custom_data': None,\n                     'roles': ['Superuser', 'User'],\n                     'username': 'root'}, error=None, warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetUserSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "username": {
                                            "type": "string", 
                                            "description": "The username part of the username/config_name combo", 
                                            "title": "username"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The config_name part of the username/config_name combo", 
                                            "title": "config_name"
                                        }, 
                                        "account_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The user account UUID", 
                                            "title": "account_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetUserSchema"
                        }, 
                        "parameters": [
                            [
                                "account_uuid", 
                                null
                            ], 
                            [
                                "username", 
                                null
                            ], 
                            [
                                "config_name", 
                                null
                            ]
                        ], 
                        "signature": "get_user(account_uuid: typing.Union[uuid.UUID, NoneType], username: typing.Union[str, NoneType], config_name: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'get_user(account_uuid: typing.Union[uuid.UUID, NoneType], username: typing.Union[str,\n  NoneType], config_name: typing.Union[str, NoneType])'\nreturns: Dict\ndoc: \"Get details for a user account.  See :ref:`users` for more details about the\\\n  \\ user model.\\n\\nParameters\\n:account_uuid: UUID of the user for which the call\\\n  \\ should retrieve details.\\n                     This parameter cannot be combined\\\n  \\ with ``username``\\n:username: Username of the account for which the call should\\\n  \\ retrieve details.\\n                 This parameter cannot be combined with ``username``,\\\n  \\ and requires\\n                 that ``config_name`` also be passed\\n:config_name:\\\n  \\ Authentication/Authorization backend name (``internal``,\\n                   \\\n  \\ ``ldap``, etc.)\\n\\n.. code-block:: python\\n\\n    client.api.auth.get_user(account_uuid='80c67364-cb31-4f4b-972a-e7ea3f752bb8')\\n\\\n  \\n    RPCResponse(riq=12,\\n                ret={'uuid': '80c67364-cb31-4f4b-972a-e7ea3f52bb8',\\n\\\n  \\                     'groups': [],\\n                     'perms': ['cmd-read',\\\n  \\ 'master-config-read',\\n                               'job-run', 'fs-read', 'cloud-read',\\n\\\n  \\                               'job-read', 'superuser', 'returner-read',\\n    \\\n  \\                           'metadata-auth-read', 'target-read',\\n             \\\n  \\                  'license-read', 'master-fs-read',\\n                         \\\n  \\      'minion-read', 'master-read'],\\n                     'config_name': 'internal',\\n\\\n  \\                     'custom_data': None,\\n                     'roles': ['Superuser',\\\n  \\ 'User'],\\n                     'username': 'root'}, error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/GetUserSchema'\n  definitions:\n    GetUserSchema:\n      properties:\n        account_uuid:\n          description: The user account UUID\n          format: uuid\n          title: account_uuid\n          type: string\n        config_name:\n          description: The config_name part of the username/config_name combo\n          title: config_name\n          type: string\n        username:\n          description: The username part of the username/config_name combo\n          title: username\n          type: string\n      required: []\n      type: object\nparameters:\n- - account_uuid\n  - null\n- - username\n  - null\n- - config_name\n  - null"
                }, 
                "get_all_roles": {
                    "detailed": {
                        "doc": "Retrieve details about all roles in the system.\n\nExample:\n\n.. code-block: python\n\n    c.api.auth.get_all_roles(sort_order=sort_order)\n\n    RPCResponse(riq=4,\n                ret={'User':\n                        {'name': 'User',\n                         'desc': None,\n                         'uuid': 'd5a0ea2e-c65c-11e7-a04b-0242ac110002',\n                         'perms': ['cmd-read', 'cloud-read', 'job-run',\n                                   'master-config-read', 'license-read',\n                                   'fs-read', 'master-read', 'minion-read'. [...]},\n                        {'name': 'Administrator', 'desc': None, 'uuid': 'd5a [...]}},\n                error=None, warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetAllRolesSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "sort_order": {
                                            "enumNames": [], 
                                            "enum": [
                                                "ASC", 
                                                "DESC"
                                            ], 
                                            "type": "string", 
                                            "description": "Sort order. Either 'ASC' or 'DESC'", 
                                            "title": "sort_order"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetAllRolesSchema"
                        }, 
                        "parameters": [
                            [
                                "sort_order", 
                                "ASC"
                            ]
                        ], 
                        "signature": "get_all_roles(sort_order: typing.Union[str, NoneType] = ASC)"
                    }, 
                    "formatted": "signature: 'get_all_roles(sort_order: typing.Union[str, NoneType] = ASC)'\nreturns: Dict\ndoc: \"Retrieve details about all roles in the system.\\n\\nExample:\\n\\n.. code-block:\\\n  \\ python\\n\\n    c.api.auth.get_all_roles(sort_order=sort_order)\\n\\n    RPCResponse(riq=4,\\n\\\n  \\                ret={'User':\\n                        {'name': 'User',\\n      \\\n  \\                   'desc': None,\\n                         'uuid': 'd5a0ea2e-c65c-11e7-a04b-0242ac110002',\\n\\\n  \\                         'perms': ['cmd-read', 'cloud-read', 'job-run',\\n     \\\n  \\                              'master-config-read', 'license-read',\\n         \\\n  \\                          'fs-read', 'master-read', 'minion-read'. [...]},\\n  \\\n  \\                      {'name': 'Administrator', 'desc': None, 'uuid': 'd5a [...]}},\\n\\\n  \\                error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/GetAllRolesSchema'\n  definitions:\n    GetAllRolesSchema:\n      properties:\n        sort_order:\n          description: Sort order. Either 'ASC' or 'DESC'\n          enum:\n          - ASC\n          - DESC\n          enumNames: []\n          title: sort_order\n          type: string\n      required: []\n      type: object\nparameters:\n- - sort_order\n  - ASC"
                }, 
                "__doc__": "Users/Groups/Roles RPC Management", 
                "get_role": {
                    "detailed": {
                        "doc": "Retrieve details about a particular role.  See :ref:`roles-permissions` for more information\non roles and how they function.\n\nParameters\n:role_name: Name of the role to retrieve.\n:role_uuid: UUID of the role to retrieve.  Use ``role_name`` or ``role_uuid``\n                  but not both.\n\nExample:\n\n.. code-block: python\n\n    c.api.auth.get_role(role_name='Superuser')\n\n    RPCResponse(riq=3,\n                ret={'Superuser':\n                        {'name': 'Superuser',\n                         'desc': None,\n                         'uuid': 'd59f824c-c65c-11e7-a04b-0242ac110002',\n                         'perms': ['superuser']}},\n                error=None, warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetRoleSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "role_name": {
                                            "type": "string", 
                                            "description": "The role name", 
                                            "title": "role_name"
                                        }, 
                                        "role_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The role UUID", 
                                            "title": "role_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetRoleSchema"
                        }, 
                        "parameters": [
                            [
                                "role_name", 
                                null
                            ], 
                            [
                                "role_uuid", 
                                null
                            ]
                        ], 
                        "signature": "get_role(role_name: typing.Union[str, NoneType], role_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'get_role(role_name: typing.Union[str, NoneType], role_uuid: typing.Union[uuid.UUID,\n  NoneType])'\nreturns: Dict\ndoc: \"Retrieve details about a particular role.  See :ref:`roles-permissions` for\\\n  \\ more information\\non roles and how they function.\\n\\nParameters\\n:role_name: Name\\\n  \\ of the role to retrieve.\\n:role_uuid: UUID of the role to retrieve.  Use ``role_name``\\\n  \\ or ``role_uuid``\\n                  but not both.\\n\\nExample:\\n\\n.. code-block:\\\n  \\ python\\n\\n    c.api.auth.get_role(role_name='Superuser')\\n\\n    RPCResponse(riq=3,\\n\\\n  \\                ret={'Superuser':\\n                        {'name': 'Superuser',\\n\\\n  \\                         'desc': None,\\n                         'uuid': 'd59f824c-c65c-11e7-a04b-0242ac110002',\\n\\\n  \\                         'perms': ['superuser']}},\\n                error=None,\\\n  \\ warnings=[])\"\nschema:\n  $ref: '#/definitions/GetRoleSchema'\n  definitions:\n    GetRoleSchema:\n      properties:\n        role_name:\n          description: The role name\n          title: role_name\n          type: string\n        role_uuid:\n          description: The role UUID\n          format: uuid\n          title: role_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - role_name\n  - null\n- - role_uuid\n  - null"
                }
            }, 
            "job": {
                "save_job": {
                    "detailed": {
                        "doc": "Create or update a job\n\nParameters\n:name: Name to give to the job.\n:desc: Descriptive text for job.\n:cmd: One of `local` (for targeting minions), `ssh` (aka salt-ssh),\n            `runner` (master-level command), `wheel` (master wheel calls)\n:fun: Dotted-notation function to run (e.g. `test.ping` or `network.ipaddrs`)\n:arg: A dictionary containing the keys `arg` and/or `kwarg` representing\n            arguments to pass to the `fun` being called.\n:masters: A list of master names that should receive this command.\n:job_uuid: UUID referencing job.  If left blank, one will be generated.\n                 If not blank, but no job with this UUID exists, a new job is created.\n                 If not blank and a UUID exists, that job is updated with the passed\n                 information.\n:tgt_uuid: UUID for a target group.\n\nThis endpoint returns the UUID for the job.", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "SaveJobSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "description": "List of Masters", 
                                            "title": "masters"
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "Job Name", 
                                            "title": "name"
                                        }, 
                                        "cmd": {
                                            "enumNames": [], 
                                            "enum": [
                                                "cloud", 
                                                "local", 
                                                "runner", 
                                                "wheel"
                                            ], 
                                            "type": "string", 
                                            "description": "The job command", 
                                            "title": "cmd"
                                        }, 
                                        "arg": {
                                            "type": "object", 
                                            "description": "Arguments", 
                                            "title": "arg"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "Function", 
                                            "title": "fun"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Job ID", 
                                            "title": "job_uuid"
                                        }, 
                                        "desc": {
                                            "type": "string", 
                                            "description": "Job Description", 
                                            "title": "desc"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveJobSchema"
                        }, 
                        "parameters": [
                            [
                                "name", 
                                null
                            ], 
                            [
                                "desc", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "arg", 
                                null
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ]
                        ], 
                        "signature": "save_job(name: typing.Union[str, NoneType], desc: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType], fun: typing.Union[str, NoneType], arg: typing.Union[typing.Dict, NoneType], masters: typing.Union[typing.List[str], NoneType], job_uuid: typing.Union[uuid.UUID, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'save_job(name: typing.Union[str, NoneType], desc: typing.Union[str, NoneType],\n  cmd: typing.Union[str, NoneType], fun: typing.Union[str, NoneType], arg: typing.Union[typing.Dict,\n  NoneType], masters: typing.Union[typing.List[str], NoneType], job_uuid: typing.Union[uuid.UUID,\n  NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType])'\nreturns: '''unicode'''\ndoc: \"Create or update a job\\n\\nParameters\\n:name: Name to give to the job.\\n:desc:\\\n  \\ Descriptive text for job.\\n:cmd: One of `local` (for targeting minions), `ssh`\\\n  \\ (aka salt-ssh),\\n            `runner` (master-level command), `wheel` (master\\\n  \\ wheel calls)\\n:fun: Dotted-notation function to run (e.g. `test.ping` or `network.ipaddrs`)\\n\\\n  :arg: A dictionary containing the keys `arg` and/or `kwarg` representing\\n     \\\n  \\       arguments to pass to the `fun` being called.\\n:masters: A list of master\\\n  \\ names that should receive this command.\\n:job_uuid: UUID referencing job.  If\\\n  \\ left blank, one will be generated.\\n                 If not blank, but no job\\\n  \\ with this UUID exists, a new job is created.\\n                 If not blank and\\\n  \\ a UUID exists, that job is updated with the passed\\n                 information.\\n\\\n  :tgt_uuid: UUID for a target group.\\n\\nThis endpoint returns the UUID for the job.\"\nschema:\n  $ref: '#/definitions/SaveJobSchema'\n  definitions:\n    SaveJobSchema:\n      properties:\n        arg:\n          description: Arguments\n          title: arg\n          type: object\n        cmd:\n          description: The job command\n          enum:\n          - cloud\n          - local\n          - runner\n          - wheel\n          enumNames: []\n          title: cmd\n          type: string\n        desc:\n          description: Job Description\n          title: desc\n          type: string\n        fun:\n          description: Function\n          title: fun\n          type: string\n        job_uuid:\n          description: Job ID\n          format: uuid\n          title: job_uuid\n          type: string\n        masters:\n          description: List of Masters\n          items:\n            title: masters\n            type: string\n          title: masters\n          type: array\n        name:\n          description: Job Name\n          title: name\n          type: string\n        tgt_uuid:\n          description: Target UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - name\n  - null\n- - desc\n  - null\n- - cmd\n  - null\n- - fun\n  - null\n- - arg\n  - null\n- - masters\n  - null\n- - job_uuid\n  - null\n- - tgt_uuid\n  - null"
                }, 
                "delete_job": {
                    "detailed": {
                        "doc": "Delete a job.\n\nParameters\n:job_uuid: UUID referencing job to be deleted.\n:force: Force deletion of target group even with schedule jobs depending on it(which will also get deleted).\n\n:raises FailedResourceDependency: The job has one or more schedules that depend on it and `force` is false.\n                                  The details of the exception contain the results of get_schedules with the\n                                  dependent schedules.", 
                        "schema": {
                            "definitions": {
                                "DeleteJobSchema": {
                                    "required": [
                                        "job_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "force": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Force deletion of job.", 
                                            "title": "force"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Job UUID", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteJobSchema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid"
                            ], 
                            [
                                "force", 
                                false
                            ]
                        ], 
                        "signature": "delete_job(job_uuid: UUID, force: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_job(job_uuid: UUID, force: typing.Union[bool, NoneType])'\ndoc: \"Delete a job.\\n\\nParameters\\n:job_uuid: UUID referencing job to be deleted.\\n\\\n  :force: Force deletion of target group even with schedule jobs depending on it(which\\\n  \\ will also get deleted).\\n\\n:raises FailedResourceDependency: The job has one or\\\n  \\ more schedules that depend on it and `force` is false.\\n                     \\\n  \\             The details of the exception contain the results of get_schedules\\\n  \\ with the\\n                                  dependent schedules.\"\nschema:\n  $ref: '#/definitions/DeleteJobSchema'\n  definitions:\n    DeleteJobSchema:\n      properties:\n        force:\n          default: false\n          description: Force deletion of job.\n          title: force\n          type: boolean\n        job_uuid:\n          description: Job UUID\n          format: uuid\n          title: job_uuid\n          type: string\n      required:\n      - job_uuid\n      type: object\nparameters:\n- - job_uuid\n- - force\n  - false"
                }, 
                "save_job_access": {
                    "detailed": {
                        "doc": "Save access metadata for this job.\n\nParameters\n:job_uuid: UUID referencing desired job.\n:access_payload: Dictionary containing role names as keys and a list of allowed\n                 access types as values", 
                        "returns": "UUID", 
                        "schema": {
                            "definitions": {
                                "SaveJobAccessSchema": {
                                    "required": [
                                        "access_payload"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "access_payload": {
                                            "type": "object", 
                                            "description": "Dictionary containing access data for a resource. The keys need to be valid role names. The values need to be valid access permissions", 
                                            "title": "access_payload"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Job UUID", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveJobAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid"
                            ], 
                            [
                                "access_payload"
                            ]
                        ], 
                        "signature": "save_job_access(job_uuid: UUID, access_payload: Dict)"
                    }, 
                    "formatted": "signature: 'save_job_access(job_uuid: UUID, access_payload: Dict)'\nreturns: UUID\ndoc: \"Save access metadata for this job.\\n\\nParameters\\n:job_uuid: UUID referencing\\\n  \\ desired job.\\n:access_payload: Dictionary containing role names as keys and a\\\n  \\ list of allowed\\n                 access types as values\"\nschema:\n  $ref: '#/definitions/SaveJobAccessSchema'\n  definitions:\n    SaveJobAccessSchema:\n      properties:\n        access_payload:\n          description: Dictionary containing access data for a resource. The keys\n            need to be valid role names. The values need to be valid access permissions\n          title: access_payload\n          type: object\n        job_uuid:\n          description: Job UUID\n          format: uuid\n          title: job_uuid\n          type: string\n      required:\n      - access_payload\n      type: object\nparameters:\n- - job_uuid\n- - access_payload"
                }, 
                "get_jobs": {
                    "detailed": {
                        "doc": "Get a job by uuid or search jobs by other query parameters.\n\nParameters\n:param uuid job_uuid: UUID referencing job.  If left blank, all jobs are returned.\n:param str name: Text to search for in the job name\n:param str desc: Text to search for in the job description\n:param str cmd: Job command to match ('local', 'runner', 'wheel', or 'ssh')\n:param UUID tgt_uuid: Target group UUID to match\n:param UUID role_uuid: Role UUID to match (Admins only)\n:param bool include_no_tgt_jobs: Include jobs that have no tgt_uuid as well\n:param str fun: Salt function to match (e.g., 'test.ping')\n:param list masters: List of salt master ids to match\n:param str sort_by: Field to sort by ('name', 'desc', 'cmd', or 'fun')\n:param bool reverse: Whether to sort in descending order\n:param int limit: Maximum number of jobs to return, default 50\n:param int page: Page of jobs to return (offset = page * limit)\n\nThe flag `include_no_tgt_jobs` is intended to be used when a list of jobs\nthat can be run at the time is desired.  For example, if a user clicks on\na target in the GUI and is presented with a list of jobs that go with that\ntarget, we may also want to show jobs that have NO target attached since\nthose jobs may be run regardless of what target is selected.\n\nThis flag has no effect if tgt_uuid is None.\n\nThe return payload is a dict with the following elements:\n\n.. code-block:: python\n\n    {\n        'count': 100,     # total job count\n        'limit': 50,  # results count\n        'results': [...]  # jobs\n    }", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetJobsv2Schema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "description": "List of masters to match", 
                                            "title": "masters"
                                        }, 
                                        "reverse": {
                                            "type": "boolean", 
                                            "description": "Sort ascending (False), or descending (True)", 
                                            "title": "reverse"
                                        }, 
                                        "include_no_tgt_jobs": {
                                            "type": "boolean", 
                                            "description": "Include jobs that have no tgt_uuid", 
                                            "title": "include_no_tgt_jobs"
                                        }, 
                                        "cmd": {
                                            "type": "string", 
                                            "description": "Job command to match", 
                                            "title": "cmd"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "name", 
                                                "desc", 
                                                "cmd", 
                                                "fun"
                                            ], 
                                            "type": "string", 
                                            "description": "Field to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Job UUID", 
                                            "title": "job_uuid"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "role_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Role UUID to match", 
                                            "title": "role_uuid"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "String to match against job function", 
                                            "title": "fun"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target UUID to match", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "desc": {
                                            "type": "string", 
                                            "description": "String to match against job description", 
                                            "title": "desc"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "String to match against job name", 
                                            "title": "name"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetJobsv2Schema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "name", 
                                null
                            ], 
                            [
                                "desc", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "role_uuid", 
                                null
                            ], 
                            [
                                "include_no_tgt_jobs", 
                                false
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "page", 
                                0
                            ]
                        ], 
                        "signature": "get_jobs(job_uuid: typing.Union[uuid.UUID, NoneType], name: typing.Union[str, NoneType], desc: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], role_uuid: typing.Union[uuid.UUID, NoneType], include_no_tgt_jobs: typing.Union[bool, NoneType], fun: typing.Union[str, NoneType], masters: typing.Union[typing.List[str], NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], limit: typing.Union[int, NoneType] = 50, page: typing.Union[int, NoneType])"
                    }, 
                    "formatted": "signature: 'get_jobs(job_uuid: typing.Union[uuid.UUID, NoneType], name: typing.Union[str,\n  NoneType], desc: typing.Union[str, NoneType], cmd: typing.Union[str, NoneType],\n  tgt_uuid: typing.Union[uuid.UUID, NoneType], role_uuid: typing.Union[uuid.UUID,\n  NoneType], include_no_tgt_jobs: typing.Union[bool, NoneType], fun: typing.Union[str,\n  NoneType], masters: typing.Union[typing.List[str], NoneType], sort_by: typing.Union[str,\n  NoneType], reverse: typing.Union[bool, NoneType], limit: typing.Union[int, NoneType]\n  = 50, page: typing.Union[int, NoneType])'\nreturns: Dict\ndoc: \"Get a job by uuid or search jobs by other query parameters.\\n\\nParameters\\n\\\n  :param uuid job_uuid: UUID referencing job.  If left blank, all jobs are returned.\\n\\\n  :param str name: Text to search for in the job name\\n:param str desc: Text to search\\\n  \\ for in the job description\\n:param str cmd: Job command to match ('local', 'runner',\\\n  \\ 'wheel', or 'ssh')\\n:param UUID tgt_uuid: Target group UUID to match\\n:param UUID\\\n  \\ role_uuid: Role UUID to match (Admins only)\\n:param bool include_no_tgt_jobs:\\\n  \\ Include jobs that have no tgt_uuid as well\\n:param str fun: Salt function to match\\\n  \\ (e.g., 'test.ping')\\n:param list masters: List of salt master ids to match\\n:param\\\n  \\ str sort_by: Field to sort by ('name', 'desc', 'cmd', or 'fun')\\n:param bool reverse:\\\n  \\ Whether to sort in descending order\\n:param int limit: Maximum number of jobs\\\n  \\ to return, default 50\\n:param int page: Page of jobs to return (offset = page\\\n  \\ * limit)\\n\\nThe flag `include_no_tgt_jobs` is intended to be used when a list\\\n  \\ of jobs\\nthat can be run at the time is desired.  For example, if a user clicks\\\n  \\ on\\na target in the GUI and is presented with a list of jobs that go with that\\n\\\n  target, we may also want to show jobs that have NO target attached since\\nthose\\\n  \\ jobs may be run regardless of what target is selected.\\n\\nThis flag has no effect\\\n  \\ if tgt_uuid is None.\\n\\nThe return payload is a dict with the following elements:\\n\\\n  \\n.. code-block:: python\\n\\n    {\\n        'count': 100,     # total job count\\n\\\n  \\        'limit': 50,  # results count\\n        'results': [...]  # jobs\\n    }\"\nschema:\n  $ref: '#/definitions/GetJobsv2Schema'\n  definitions:\n    GetJobsv2Schema:\n      properties:\n        cmd:\n          description: Job command to match\n          title: cmd\n          type: string\n        desc:\n          description: String to match against job description\n          title: desc\n          type: string\n        fun:\n          description: String to match against job function\n          title: fun\n          type: string\n        include_no_tgt_jobs:\n          description: Include jobs that have no tgt_uuid\n          title: include_no_tgt_jobs\n          type: boolean\n        job_uuid:\n          description: Job UUID\n          format: uuid\n          title: job_uuid\n          type: string\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        masters:\n          description: List of masters to match\n          items:\n            title: masters\n            type: string\n          title: masters\n          type: array\n        name:\n          description: String to match against job name\n          title: name\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          description: Sort ascending (False), or descending (True)\n          title: reverse\n          type: boolean\n        role_uuid:\n          description: Role UUID to match\n          format: uuid\n          title: role_uuid\n          type: string\n        sort_by:\n          description: Field to sort by\n          enum:\n          - name\n          - desc\n          - cmd\n          - fun\n          enumNames: []\n          title: sort_by\n          type: string\n        tgt_uuid:\n          description: Target UUID to match\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - job_uuid\n  - null\n- - name\n  - null\n- - desc\n  - null\n- - cmd\n  - null\n- - tgt_uuid\n  - null\n- - role_uuid\n  - null\n- - include_no_tgt_jobs\n  - false\n- - fun\n  - null\n- - masters\n  - null\n- - sort_by\n  - null\n- - reverse\n  - false\n- - limit\n  - 50\n- - page\n  - 0"
                }, 
                "__doc__": "The RPC methods for the jobs interface", 
                "get_job_access": {
                    "detailed": {
                        "doc": "Return access metadata for this job.\n\nParameters\n:job_uuid: UUID referencing desired job.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetJobAccessSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Job UUID", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetJobAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid"
                            ]
                        ], 
                        "signature": "get_job_access(job_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'get_job_access(job_uuid: UUID)'\nreturns: Dict\ndoc: 'Return access metadata for this job.\n\n\n  Parameters\n\n  :job_uuid: UUID referencing desired job.'\nschema:\n  $ref: '#/definitions/GetJobAccessSchema'\n  definitions:\n    GetJobAccessSchema:\n      properties:\n        job_uuid:\n          description: Job UUID\n          format: uuid\n          title: job_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - job_uuid"
                }
            }, 
            "background_jobs": {
                "get_task_status": {
                    "detailed": {
                        "doc": "Get the status of background tasks\n\n:task_ids: list of task IDs", 
                        "returns": "List", 
                        "schema": {
                            "definitions": {
                                "GetTaskStatusSchema": {
                                    "required": [
                                        "task_ids"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "task_ids": {
                                            "items": {
                                                "type": "string", 
                                                "title": "task_ids"
                                            }, 
                                            "type": "array", 
                                            "description": "List of task IDs", 
                                            "title": "task_ids"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetTaskStatusSchema"
                        }, 
                        "parameters": [
                            [
                                "task_ids"
                            ]
                        ], 
                        "signature": "get_task_status(task_ids: List[str])"
                    }, 
                    "formatted": "signature: 'get_task_status(task_ids: List[str])'\nreturns: List\ndoc: 'Get the status of background tasks\n\n\n  :task_ids: list of task IDs'\nschema:\n  $ref: '#/definitions/GetTaskStatusSchema'\n  definitions:\n    GetTaskStatusSchema:\n      properties:\n        task_ids:\n          description: List of task IDs\n          items:\n            title: task_ids\n            type: string\n          title: task_ids\n          type: array\n      required:\n      - task_ids\n      type: object\nparameters:\n- - task_ids"
                }, 
                "get_background_job": {
                    "detailed": {
                        "doc": "Return the status information about a background running job", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetBackgroundJobSchema": {
                                    "required": [
                                        "job_id"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "job_id": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "title": "job_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetBackgroundJobSchema"
                        }, 
                        "parameters": [
                            [
                                "job_id"
                            ]
                        ], 
                        "signature": "get_background_job(job_id: UUID)"
                    }, 
                    "formatted": "signature: 'get_background_job(job_id: UUID)'\nreturns: Dict\ndoc: Return the status information about a background running job\nschema:\n  $ref: '#/definitions/GetBackgroundJobSchema'\n  definitions:\n    GetBackgroundJobSchema:\n      properties:\n        job_id:\n          format: uuid\n          title: job_id\n          type: string\n      required:\n      - job_id\n      type: object\nparameters:\n- - job_id"
                }, 
                "__doc__": "Endpoint to query running background jobs for their status"
            }, 
            "minions": {
                "get_minion_grain_values": {
                    "detailed": {
                        "doc": "Get a list of unique minion grain values for a particular key, optionally\nfiltering by master id, minion id, or target group.\n\nParameters\n:key: Get possible minion grain values for this minion grain key\n:master_id: Limit the query to minion grains reported by this master\n:minion_id: Limit the query to grains from this minion\n:tgt_uuid: Limit the query to minions matching this target group\n\nNote: when ``enable_grains_indexing: False`` this will always return an empty list.", 
                        "returns": "List[str]", 
                        "schema": {
                            "definitions": {
                                "GetMinionGrainValuesSchema": {
                                    "required": [
                                        "key"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Limit the query to minions matching this target group", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "key": {
                                            "type": "string", 
                                            "description": "Minion grain key", 
                                            "title": "key"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Salt Minion ID", 
                                            "title": "minion_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMinionGrainValuesSchema"
                        }, 
                        "parameters": [
                            [
                                "key"
                            ], 
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ]
                        ], 
                        "signature": "get_minion_grain_values(key: 'unicode', master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'get_minion_grain_values(key: ''unicode'', master_id: typing.Union[str,\n  NoneType], minion_id: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID,\n  NoneType])'\nreturns: List[str]\ndoc: 'Get a list of unique minion grain values for a particular key, optionally\n\n  filtering by master id, minion id, or target group.\n\n\n  Parameters\n\n  :key: Get possible minion grain values for this minion grain key\n\n  :master_id: Limit the query to minion grains reported by this master\n\n  :minion_id: Limit the query to grains from this minion\n\n  :tgt_uuid: Limit the query to minions matching this target group\n\n\n  Note: when ``enable_grains_indexing: False`` this will always return an empty list.'\nschema:\n  $ref: '#/definitions/GetMinionGrainValuesSchema'\n  definitions:\n    GetMinionGrainValuesSchema:\n      properties:\n        key:\n          description: Minion grain key\n          title: key\n          type: string\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        minion_id:\n          description: Salt Minion ID\n          title: minion_id\n          type: string\n        tgt_uuid:\n          description: Limit the query to minions matching this target group\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required:\n      - key\n      type: object\nparameters:\n- - key\n- - master_id\n  - null\n- - minion_id\n  - null\n- - tgt_uuid\n  - null"
                }, 
                "get_minion_presence": {
                    "detailed": {
                        "doc": "Retrieve presence status for all minions in the infrastructure.\n\nExample:\n\n.. code-block:: python\n\n    client.api.minions.get_minion_presence()\n\n    RPCResponse(riq=6543, ret={\n          'results': [\n                  {'minion': 's01-m01', 'master': 'saltmaster1_master', 'status': 'present', 'timestamp': u'2017-11-27T23:06:12.674176'},\n                  {'minion': 's01-m02', 'master': 'saltmaster1_master', 'status': 'lost', 'timestamp': u'2017-11-27T23:06:12.674176'}\n              ],\n          'count': 2\n        },\n        error=None, warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetMinionPresenceSchemaV3": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "status": {
                                            "enumNames": [], 
                                            "enum": [
                                                "present", 
                                                "lost", 
                                                "unknown"
                                            ], 
                                            "type": "string", 
                                            "title": "status"
                                        }, 
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Salt Minion ID", 
                                            "title": "minion_id"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "minion", 
                                                "master", 
                                                "status", 
                                                "timestamp"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMinionPresenceSchemaV3"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "status", 
                                null
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                100
                            ]
                        ], 
                        "signature": "get_minion_presence(master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], status: typing.Union[str, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 100)"
                    }, 
                    "formatted": "signature: 'get_minion_presence(master_id: typing.Union[str, NoneType], minion_id:\n  typing.Union[str, NoneType], status: typing.Union[str, NoneType], sort_by: typing.Union[str,\n  NoneType], reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType],\n  limit: typing.Union[int, NoneType] = 100)'\nreturns: Dict\ndoc: \"Retrieve presence status for all minions in the infrastructure.\\n\\nExample:\\n\\\n  \\n.. code-block:: python\\n\\n    client.api.minions.get_minion_presence()\\n\\n   \\\n  \\ RPCResponse(riq=6543, ret={\\n          'results': [\\n                  {'minion':\\\n  \\ 's01-m01', 'master': 'saltmaster1_master', 'status': 'present', 'timestamp': u'2017-11-27T23:06:12.674176'},\\n\\\n  \\                  {'minion': 's01-m02', 'master': 'saltmaster1_master', 'status':\\\n  \\ 'lost', 'timestamp': u'2017-11-27T23:06:12.674176'}\\n              ],\\n      \\\n  \\    'count': 2\\n        },\\n        error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/GetMinionPresenceSchemaV3'\n  definitions:\n    GetMinionPresenceSchemaV3:\n      properties:\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        minion_id:\n          description: Salt Minion ID\n          title: minion_id\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - minion\n          - master\n          - status\n          - timestamp\n          enumNames: []\n          title: sort_by\n          type: string\n        status:\n          enum:\n          - present\n          - lost\n          - unknown\n          enumNames: []\n          title: status\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - minion_id\n  - null\n- - status\n  - null\n- - sort_by\n  - null\n- - reverse\n  - false\n- - page\n  - 0\n- - limit\n  - 100"
                }, 
                "delete_minion_cache": {
                    "detailed": {
                        "doc": "Flush the minion's cache on a master.\n\nParameters\n:master_id: ID (not UUID) of master\n:minion_id: ID of minion for which the cache should be flushed.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteMinionCacheSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Salt Minion ID", 
                                            "title": "minion_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteMinionCacheSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ]
                        ], 
                        "signature": "delete_minion_cache(master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_minion_cache(master_id: typing.Union[str, NoneType], minion_id:\n  typing.Union[str, NoneType])'\nreturns: None\ndoc: 'Flush the minion''s cache on a master.\n\n\n  Parameters\n\n  :master_id: ID (not UUID) of master\n\n  :minion_id: ID of minion for which the cache should be flushed.'\nschema:\n  $ref: '#/definitions/DeleteMinionCacheSchema'\n  definitions:\n    DeleteMinionCacheSchema:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        minion_id:\n          description: Salt Minion ID\n          title: minion_id\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - minion_id\n  - null"
                }, 
                "get_minion_details": {
                    "detailed": {
                        "doc": "Get minion details.\n\nParameters\n:master_id: Filter minions by master id.\n:minion_id: Filter minions by minion id.\n:tgt_uuid: Limit the query to minions matching this target group.\n:grains: Filter the minions by matching grains.\n:sort_by: Sort results by this minion grain.\n:reverse: Pass True to sort results in descending order.\n:page: Return data from this page number.\n:limit: Set page size (maximum number of minions to return).", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetMinionDetailsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "reverse": {
                                            "type": "boolean", 
                                            "description": "Sort results in ascending (False) or descending (True) order", 
                                            "title": "reverse"
                                        }, 
                                        "grains": {
                                            "type": "object", 
                                            "description": "Include only minions matching these grains, e.g. {'kernel': 'Linux'}", 
                                            "title": "grains"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Match only minions with this minion id", 
                                            "title": "minion_id"
                                        }, 
                                        "sort_by": {
                                            "type": "string", 
                                            "description": "Sort by this minion grain, or 'master_id' to sort by master", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Include only minions matching this target group", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Match only minions from this master", 
                                            "title": "master_id"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMinionDetailsSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "grains", 
                                null
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                50
                            ]
                        ], 
                        "signature": "get_minion_details(master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], grains: typing.Union[typing.Dict, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 50)"
                    }, 
                    "formatted": "signature: 'get_minion_details(master_id: typing.Union[str, NoneType], minion_id:\n  typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], grains:\n  typing.Union[typing.Dict, NoneType], sort_by: typing.Union[str, NoneType], reverse:\n  typing.Union[bool, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int,\n  NoneType] = 50)'\nreturns: Dict\ndoc: 'Get minion details.\n\n\n  Parameters\n\n  :master_id: Filter minions by master id.\n\n  :minion_id: Filter minions by minion id.\n\n  :tgt_uuid: Limit the query to minions matching this target group.\n\n  :grains: Filter the minions by matching grains.\n\n  :sort_by: Sort results by this minion grain.\n\n  :reverse: Pass True to sort results in descending order.\n\n  :page: Return data from this page number.\n\n  :limit: Set page size (maximum number of minions to return).'\nschema:\n  $ref: '#/definitions/GetMinionDetailsSchema'\n  definitions:\n    GetMinionDetailsSchema:\n      properties:\n        grains:\n          description: 'Include only minions matching these grains, e.g. {''kernel'':\n            ''Linux''}'\n          title: grains\n          type: object\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Match only minions from this master\n          title: master_id\n          type: string\n        minion_id:\n          description: Match only minions with this minion id\n          title: minion_id\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          description: Sort results in ascending (False) or descending (True) order\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Sort by this minion grain, or 'master_id' to sort by master\n          title: sort_by\n          type: string\n        tgt_uuid:\n          description: Include only minions matching this target group\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - minion_id\n  - null\n- - tgt_uuid\n  - null\n- - grains\n  - null\n- - sort_by\n  - null\n- - reverse\n  - false\n- - page\n  - 0\n- - limit\n  - 50"
                }, 
                "get_minion_grain_keys": {
                    "detailed": {
                        "doc": "Get a list of unique minion grain keys, optionally filtering by master id,\nminion id, or target group.\n\nParameters\n:master_id: Limit the query to minion grains reported by this master\n:minion_id: Limit the query to grains from this minion\n:tgt_uuid: Limit the query to minions matching this target group\n\nNote: when ``enable_grains_indexing: False`` this will always return an empty list.", 
                        "returns": "List[str]", 
                        "schema": {
                            "definitions": {
                                "GetMinionGrainKeysSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Limit the query to minions matching this target group", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Salt Minion ID", 
                                            "title": "minion_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMinionGrainKeysSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ]
                        ], 
                        "signature": "get_minion_grain_keys(master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'get_minion_grain_keys(master_id: typing.Union[str, NoneType], minion_id:\n  typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType])'\nreturns: List[str]\ndoc: 'Get a list of unique minion grain keys, optionally filtering by master id,\n\n  minion id, or target group.\n\n\n  Parameters\n\n  :master_id: Limit the query to minion grains reported by this master\n\n  :minion_id: Limit the query to grains from this minion\n\n  :tgt_uuid: Limit the query to minions matching this target group\n\n\n  Note: when ``enable_grains_indexing: False`` this will always return an empty list.'\nschema:\n  $ref: '#/definitions/GetMinionGrainKeysSchema'\n  definitions:\n    GetMinionGrainKeysSchema:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        minion_id:\n          description: Salt Minion ID\n          title: minion_id\n          type: string\n        tgt_uuid:\n          description: Limit the query to minions matching this target group\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - minion_id\n  - null\n- - tgt_uuid\n  - null"
                }, 
                "set_minion_key_state": {
                    "detailed": {
                        "doc": "Set the minion key state on the provided master id/cluster id.\n\nParameters\n:state: accept, delete, or reject\n:minions: list of [master_id, minion_id] pairs to set\n:include_accepted: include accepted keys along with pending keys, works with reject state only\n:include_rejected: include rejected keys along with pending keys, works with accept state only\n:include_denied: include denied keys along with pending keys, works with accept and reject state only", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "SetMinionKeyStateSchema": {
                                    "required": [
                                        "minions", 
                                        "state"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "include_denied": {
                                            "type": "boolean", 
                                            "description": "include denied keys along with pending keys, works with accept and reject state only", 
                                            "title": "include_denied"
                                        }, 
                                        "include_rejected": {
                                            "type": "boolean", 
                                            "description": "include rejected keys along with pending keys, works with accept state only", 
                                            "title": "include_rejected"
                                        }, 
                                        "state": {
                                            "enumNames": [], 
                                            "enum": [
                                                "accept", 
                                                "delete", 
                                                "reject"
                                            ], 
                                            "type": "string", 
                                            "description": "Key state: accept, delete, or reject", 
                                            "title": "state"
                                        }, 
                                        "include_accepted": {
                                            "type": "boolean", 
                                            "description": "include accepted keys along with pending keys, works with reject state only", 
                                            "title": "include_accepted"
                                        }, 
                                        "minions": {
                                            "items": {
                                                "minItems": 2, 
                                                "items": {
                                                    "type": "string", 
                                                    "title": null
                                                }, 
                                                "type": "array", 
                                                "maxItems": 2, 
                                                "title": "minions"
                                            }, 
                                            "type": "array", 
                                            "description": "List of [master_id, minion_id]", 
                                            "title": "minions"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SetMinionKeyStateSchema"
                        }, 
                        "parameters": [
                            [
                                "state"
                            ], 
                            [
                                "minions"
                            ], 
                            [
                                "include_accepted", 
                                false
                            ], 
                            [
                                "include_rejected", 
                                false
                            ], 
                            [
                                "include_denied", 
                                false
                            ]
                        ], 
                        "signature": "set_minion_key_state(state: 'unicode', minions: List[List[str]], include_accepted: typing.Union[bool, NoneType], include_rejected: typing.Union[bool, NoneType], include_denied: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'set_minion_key_state(state: ''unicode'', minions: List[List[str]], include_accepted:\n  typing.Union[bool, NoneType], include_rejected: typing.Union[bool, NoneType], include_denied:\n  typing.Union[bool, NoneType])'\nreturns: Dict\ndoc: 'Set the minion key state on the provided master id/cluster id.\n\n\n  Parameters\n\n  :state: accept, delete, or reject\n\n  :minions: list of [master_id, minion_id] pairs to set\n\n  :include_accepted: include accepted keys along with pending keys, works with reject\n  state only\n\n  :include_rejected: include rejected keys along with pending keys, works with accept\n  state only\n\n  :include_denied: include denied keys along with pending keys, works with accept\n  and reject state only'\nschema:\n  $ref: '#/definitions/SetMinionKeyStateSchema'\n  definitions:\n    SetMinionKeyStateSchema:\n      properties:\n        include_accepted:\n          description: include accepted keys along with pending keys, works with reject\n            state only\n          title: include_accepted\n          type: boolean\n        include_denied:\n          description: include denied keys along with pending keys, works with accept\n            and reject state only\n          title: include_denied\n          type: boolean\n        include_rejected:\n          description: include rejected keys along with pending keys, works with accept\n            state only\n          title: include_rejected\n          type: boolean\n        minions:\n          description: List of [master_id, minion_id]\n          items:\n            items:\n              title: null\n              type: string\n            maxItems: 2\n            minItems: 2\n            title: minions\n            type: array\n          title: minions\n          type: array\n        state:\n          description: 'Key state: accept, delete, or reject'\n          enum:\n          - accept\n          - delete\n          - reject\n          enumNames: []\n          title: state\n          type: string\n      required:\n      - minions\n      - state\n      type: object\nparameters:\n- - state\n- - minions\n- - include_accepted\n  - false\n- - include_rejected\n  - false\n- - include_denied\n  - false"
                }, 
                "save_minion_cache": {
                    "detailed": {
                        "doc": "Update the minion data cache for a given master. Note that data about\nminions with unaccepted keys will be ignored. This function should be\ncalled only by a salt-master.\n\nParameters\n:master_id: ID (not UUID) of master\n:minions: A dictionary keyed by minion id where each value is the set of\n                grains to be saved to RaaS for that minion. All existing\n                minion grains from this master will be discarded before the\n                new minion grains are saved. This parameter is mutually\n                exclusive with ``minions_delta``.\n:minions_delta: A dictionary specifying changes to minion grains data to be\n                made in RaaS. The top-level key ``save`` contains a\n                dictionary keyed by minion id where each value contains the\n                grains to save for that minion. Any existing grains data\n                for a particular minion will be discarded before the new\n                grains are saved. The top-level key ``remove`` contains a\n                list of minion ids identifying grains data to remove from\n                RaaS.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SaveMinionCacheSchemaV2": {
                                    "required": [
                                        "master_id"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "minions": {
                                            "type": "object", 
                                            "title": "minions"
                                        }, 
                                        "minions_delta": {
                                            "type": "object", 
                                            "title": "minions_delta"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveMinionCacheSchemaV2"
                        }, 
                        "parameters": [
                            [
                                "master_id"
                            ], 
                            [
                                "minions", 
                                null
                            ], 
                            [
                                "minions_delta", 
                                null
                            ]
                        ], 
                        "signature": "save_minion_cache(master_id: 'unicode', minions: typing.Union[typing.Dict, NoneType], minions_delta: typing.Union[typing.Dict, NoneType])"
                    }, 
                    "formatted": "signature: 'save_minion_cache(master_id: ''unicode'', minions: typing.Union[typing.Dict,\n  NoneType], minions_delta: typing.Union[typing.Dict, NoneType])'\nreturns: None\ndoc: \"Update the minion data cache for a given master. Note that data about\\nminions\\\n  \\ with unaccepted keys will be ignored. This function should be\\ncalled only by\\\n  \\ a salt-master.\\n\\nParameters\\n:master_id: ID (not UUID) of master\\n:minions: A\\\n  \\ dictionary keyed by minion id where each value is the set of\\n               \\\n  \\ grains to be saved to RaaS for that minion. All existing\\n                minion\\\n  \\ grains from this master will be discarded before the\\n                new minion\\\n  \\ grains are saved. This parameter is mutually\\n                exclusive with ``minions_delta``.\\n\\\n  :minions_delta: A dictionary specifying changes to minion grains data to be\\n  \\\n  \\              made in RaaS. The top-level key ``save`` contains a\\n           \\\n  \\     dictionary keyed by minion id where each value contains the\\n            \\\n  \\    grains to save for that minion. Any existing grains data\\n                for\\\n  \\ a particular minion will be discarded before the new\\n                grains are\\\n  \\ saved. The top-level key ``remove`` contains a\\n                list of minion\\\n  \\ ids identifying grains data to remove from\\n                RaaS.\"\nschema:\n  $ref: '#/definitions/SaveMinionCacheSchemaV2'\n  definitions:\n    SaveMinionCacheSchemaV2:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        minions:\n          title: minions\n          type: object\n        minions_delta:\n          title: minions_delta\n          type: object\n      required:\n      - master_id\n      type: object\nparameters:\n- - master_id\n- - minions\n  - null\n- - minions_delta\n  - null"
                }, 
                "__doc__": "The RPC methods for the salt minions interface", 
                "get_minion_cache": {
                    "detailed": {
                        "doc": "Retrieve the minion cache for a particular master.\n\nParameters\n:master_id: ID for master.\n:minion_id: ID for minion.\n\nExample:\n\n.. code-block:: python\n\n    client.api.minions.get_minion_cache(master_id='saltmaster1_master',\n                                        minion_id='s01-m01')\n\n    RPCResponse(riq=28, ret=\n        {u'saltmaster1_master':\n            {u's01-m01':\n                {u'grains':\n                   {u'biosversion': u'4.2.amazon',\n                    u'kernel': u'Linux',\n                    u'domain': u'us-west-1.compute.internal', ..... }}}},\n        error=None, warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetMinionCacheSchemaV2": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Salt Minion ID", 
                                            "title": "minion_id"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "alter_time", 
                                                "minion", 
                                                "master", 
                                                "saltversion", 
                                                "osfullname", 
                                                "ipv4", 
                                                "ipv6", 
                                                "presence"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Include only minions matching this target group", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMinionCacheSchemaV2"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "sort_by", 
                                "alter_time"
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                100
                            ], 
                            [
                                "reverse", 
                                false
                            ]
                        ], 
                        "signature": "get_minion_cache(master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], sort_by: typing.Union[str, NoneType] = alter_time, page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 100, reverse: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'get_minion_cache(master_id: typing.Union[str, NoneType], minion_id: typing.Union[str,\n  NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], sort_by: typing.Union[str,\n  NoneType] = alter_time, page: typing.Union[int, NoneType], limit: typing.Union[int,\n  NoneType] = 100, reverse: typing.Union[bool, NoneType])'\nreturns: Dict\ndoc: \"Retrieve the minion cache for a particular master.\\n\\nParameters\\n:master_id:\\\n  \\ ID for master.\\n:minion_id: ID for minion.\\n\\nExample:\\n\\n.. code-block:: python\\n\\\n  \\n    client.api.minions.get_minion_cache(master_id='saltmaster1_master',\\n    \\\n  \\                                    minion_id='s01-m01')\\n\\n    RPCResponse(riq=28,\\\n  \\ ret=\\n        {u'saltmaster1_master':\\n            {u's01-m01':\\n            \\\n  \\    {u'grains':\\n                   {u'biosversion': u'4.2.amazon',\\n         \\\n  \\           u'kernel': u'Linux',\\n                    u'domain': u'us-west-1.compute.internal',\\\n  \\ ..... }}}},\\n        error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/GetMinionCacheSchemaV2'\n  definitions:\n    GetMinionCacheSchemaV2:\n      properties:\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        minion_id:\n          description: Salt Minion ID\n          title: minion_id\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - alter_time\n          - minion\n          - master\n          - saltversion\n          - osfullname\n          - ipv4\n          - ipv6\n          - presence\n          enumNames: []\n          title: sort_by\n          type: string\n        tgt_uuid:\n          description: Include only minions matching this target group\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - minion_id\n  - null\n- - tgt_uuid\n  - null\n- - sort_by\n  - alter_time\n- - page\n  - 0\n- - limit\n  - 100\n- - reverse\n  - false"
                }, 
                "get_minion_key_state": {
                    "detailed": {
                        "doc": "Get minion key states\n\nParameters\n:master_id: Filter results by master id.\n:minion_id: Filter results by minion id.\n:key_state: Limit results to this minion key state (``accepted``, ``rejected``,\n            ``pending``, or ``denied``).\n:sort_by: Sort results by this field (``master_id``, ``minion_id``, or ``key_state``).\n:reverse: Pass True to sort results in descending order.\n:page: Return data from this page number.\n:limit: Set page size (maximum number of results to return).", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetMinionKeyStateSchemaV3": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Salt Minion ID", 
                                            "title": "minion_id"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "master_id", 
                                                "minion_id", 
                                                "key_state"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "key_state": {
                                            "enumNames": [], 
                                            "enum": [
                                                "accepted", 
                                                "rejected", 
                                                "pending", 
                                                "denied"
                                            ], 
                                            "type": "string", 
                                            "description": "Limit results to this key state", 
                                            "title": "key_state"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetMinionKeyStateSchemaV3"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "key_state", 
                                null
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                50
                            ]
                        ], 
                        "signature": "get_minion_key_state(master_id: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], key_state: typing.Union[str, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 50)"
                    }, 
                    "formatted": "signature: 'get_minion_key_state(master_id: typing.Union[str, NoneType], minion_id:\n  typing.Union[str, NoneType], key_state: typing.Union[str, NoneType], sort_by: typing.Union[str,\n  NoneType], reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType],\n  limit: typing.Union[int, NoneType] = 50)'\nreturns: Dict\ndoc: \"Get minion key states\\n\\nParameters\\n:master_id: Filter results by master id.\\n\\\n  :minion_id: Filter results by minion id.\\n:key_state: Limit results to this minion\\\n  \\ key state (``accepted``, ``rejected``,\\n            ``pending``, or ``denied``).\\n\\\n  :sort_by: Sort results by this field (``master_id``, ``minion_id``, or ``key_state``).\\n\\\n  :reverse: Pass True to sort results in descending order.\\n:page: Return data from\\\n  \\ this page number.\\n:limit: Set page size (maximum number of results to return).\"\nschema:\n  $ref: '#/definitions/GetMinionKeyStateSchemaV3'\n  definitions:\n    GetMinionKeyStateSchemaV3:\n      properties:\n        key_state:\n          description: Limit results to this key state\n          enum:\n          - accepted\n          - rejected\n          - pending\n          - denied\n          enumNames: []\n          title: key_state\n          type: string\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n        minion_id:\n          description: Salt Minion ID\n          title: minion_id\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - master_id\n          - minion_id\n          - key_state\n          enumNames: []\n          title: sort_by\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null\n- - minion_id\n  - null\n- - key_state\n  - null\n- - sort_by\n  - null\n- - reverse\n  - false\n- - page\n  - 0\n- - limit\n  - 50"
                }, 
                "delete_minion_key_state": {
                    "detailed": {
                        "doc": "Remove all key states from a particular master.\n\nParameters\n:master_id: ID (not UUID) of master.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteMinionKeyStateSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteMinionKeyStateSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id", 
                                null
                            ]
                        ], 
                        "signature": "delete_minion_key_state(master_id: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'delete_minion_key_state(master_id: typing.Union[str, NoneType])'\nreturns: None\ndoc: 'Remove all key states from a particular master.\n\n\n  Parameters\n\n  :master_id: ID (not UUID) of master.'\nschema:\n  $ref: '#/definitions/DeleteMinionKeyStateSchema'\n  definitions:\n    DeleteMinionKeyStateSchema:\n      properties:\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n      required: []\n      type: object\nparameters:\n- - master_id\n  - null"
                }, 
                "save_minion_key_state": {
                    "detailed": {
                        "doc": "Save minion key state for a given master.\n\nThis function should only be called by a salt-master.\n\nParameters\n:master_id: ID (not UUID) for the master to update.\n:keys: Dictionary containing key state for minions.  This dictionary\n        needs to be in this format:\n\n.. code-block: python\n    {'minions': ['minion1','minion2','minion3',...],\n     'minions_rejected': ['rejected_1', 'rejected_2', ...],\n     'minions_pre': ['pending_minion1', 'pending_minion2', ...],\n     'minions_denied': ['evil_minion1', 'evil_minion2', ...]}", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SaveMinionKeyStateSchema": {
                                    "required": [
                                        "keys", 
                                        "master_id"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "keys": {
                                            "type": "object", 
                                            "$ref": "#/definitions/MinionKeysSchema"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Salt Master ID", 
                                            "title": "master_id"
                                        }
                                    }
                                }, 
                                "MinionKeysSchema": {
                                    "required": [
                                        "minions", 
                                        "minions_denied", 
                                        "minions_pre", 
                                        "minions_rejected"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "minions_rejected": {
                                            "items": {
                                                "type": "string", 
                                                "title": "minions_rejected"
                                            }, 
                                            "type": "array", 
                                            "description": "List of rejected minions keys", 
                                            "title": "minions_rejected"
                                        }, 
                                        "minions_denied": {
                                            "items": {
                                                "type": "string", 
                                                "title": "minions_denied"
                                            }, 
                                            "type": "array", 
                                            "description": "List of denied minions keys", 
                                            "title": "minions_denied"
                                        }, 
                                        "minions_pre": {
                                            "items": {
                                                "type": "string", 
                                                "title": "minions_pre"
                                            }, 
                                            "type": "array", 
                                            "description": "List of minions keys in a pending state", 
                                            "title": "minions_pre"
                                        }, 
                                        "minions": {
                                            "items": {
                                                "type": "string", 
                                                "title": "minions"
                                            }, 
                                            "type": "array", 
                                            "description": "List of accepted minions keys", 
                                            "title": "minions"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveMinionKeyStateSchema"
                        }, 
                        "parameters": [
                            [
                                "master_id"
                            ], 
                            [
                                "keys"
                            ]
                        ], 
                        "signature": "save_minion_key_state(master_id: 'unicode', keys: Dict)"
                    }, 
                    "formatted": "signature: 'save_minion_key_state(master_id: ''unicode'', keys: Dict)'\nreturns: None\ndoc: \"Save minion key state for a given master.\\n\\nThis function should only be called\\\n  \\ by a salt-master.\\n\\nParameters\\n:master_id: ID (not UUID) for the master to update.\\n\\\n  :keys: Dictionary containing key state for minions.  This dictionary\\n        needs\\\n  \\ to be in this format:\\n\\n.. code-block: python\\n    {'minions': ['minion1','minion2','minion3',...],\\n\\\n  \\     'minions_rejected': ['rejected_1', 'rejected_2', ...],\\n     'minions_pre':\\\n  \\ ['pending_minion1', 'pending_minion2', ...],\\n     'minions_denied': ['evil_minion1',\\\n  \\ 'evil_minion2', ...]}\"\nschema:\n  $ref: '#/definitions/SaveMinionKeyStateSchema'\n  definitions:\n    MinionKeysSchema:\n      properties:\n        minions:\n          description: List of accepted minions keys\n          items:\n            title: minions\n            type: string\n          title: minions\n          type: array\n        minions_denied:\n          description: List of denied minions keys\n          items:\n            title: minions_denied\n            type: string\n          title: minions_denied\n          type: array\n        minions_pre:\n          description: List of minions keys in a pending state\n          items:\n            title: minions_pre\n            type: string\n          title: minions_pre\n          type: array\n        minions_rejected:\n          description: List of rejected minions keys\n          items:\n            title: minions_rejected\n            type: string\n          title: minions_rejected\n          type: array\n      required:\n      - minions\n      - minions_denied\n      - minions_pre\n      - minions_rejected\n      type: object\n    SaveMinionKeyStateSchema:\n      properties:\n        keys:\n          $ref: '#/definitions/MinionKeysSchema'\n          type: object\n        master_id:\n          description: Salt Master ID\n          title: master_id\n          type: string\n      required:\n      - keys\n      - master_id\n      type: object\nparameters:\n- - master_id\n- - keys"
                }
            }, 
            "audit": {
                "get_audit": {
                    "detailed": {
                        "doc": "Return a list of audit records matching search criteria.\n\nParameters\n:account_uuid: Account UUID to match on audit records. Cannot be combined with ``username``\n:username: Username to match on audit records. Cannot be combined with ``account_uuid``\n:session_uuid: Session UUID, to match retrieve audit records from a particular client session\n:event_type: ``'system'``, ``'auth'``, ``'rpc'``, or ``'task'``\n:event_name: For ``system`` events, ``'startup'`` or ``'shutdown'``. For ``auth`` events,\n                ``'login'`` or ``'logout'``. For ``rpc`` events, ``'<resource>.<method>'`` of\n                the API call. For ``task`` events, the name of the background task.\n:failed: True to match failed events, False to match successful events\n:daterange: List of two date strings in ISO 8601 format\n:elapsed_msec_min: Minimum event duration, in milliseconds\n:elapsed_msec_max: Maximum event duration, in milliseconds\n:page: Which page of the records to return (offset = page * limit)\n:limit: How many records to return at a time\n:sort_by: Field to sort by (``'username'``, ``'event_type'``, ``'event_name'``,\n            ``'failed'``, ``'start_time'``, ``'end_time'``, ``'elapsed_msec'``)\n:reverse: True to reverse sort order\n\n.. code-block:: python\n\n    client.api.audit.get_audit(username='root', event_type='auth', failed=True)\n\n    RPCResponse(\n        riq=4,\n        ret={'count': 1,\n             'results': [\n                {'id': 175,\n                 'start_time': '2019-06-05T21:12:53.190506+00:00',\n                 'end_time': '2019-06-05T21:13:24.729561+00:00',\n                 'event_type': 'auth',\n                 'event_name': 'login',\n                 'username': 'root',\n                 'account_uuid': None,\n                 'session_uuid': '4642ef92-d5ac-4ea2-b95d-2055b43f2193',\n                 'failed': True,\n                 'event_data': {\n                    'note': 'User root: authentication failed: invalid basic-auth credentials',\n                    'status': 401,\n                    'headers': {\n                        'Host': 'localhost:8080',\n                        'Accept': '*/*',\n                        'User-Agent': 'curl/7.65.0',\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'Authorization': 'Basic cm9vdDpzYWx0MQ==',\n                        'Content-Length': '41'}}}],\n        error=None,\n        warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetAuditSchemaV5": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "username": {
                                            "type": "string", 
                                            "description": "Username", 
                                            "title": "username"
                                        }, 
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }, 
                                        "elapsed_msec_min": {
                                            "format": "integer", 
                                            "type": "number", 
                                            "description": "Minimum elapsed event time, in milliseconds", 
                                            "title": "elapsed_msec_min"
                                        }, 
                                        "event_name": {
                                            "type": "string", 
                                            "description": "For system events, 'startup' or 'shutdown'. For auth events, 'login' or 'logout'. For rpc events, '<resource>.<method>' of the API call. For task events, the name of the background task.", 
                                            "title": "event_name"
                                        }, 
                                        "daterange": {
                                            "description": "A list of two date strings in ISO 8601 format", 
                                            "title": "daterange", 
                                            "minItems": 2, 
                                            "items": {
                                                "type": "string", 
                                                "title": "daterange"
                                            }, 
                                            "maxItems": 2, 
                                            "type": "array"
                                        }, 
                                        "account_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "User account UUID", 
                                            "title": "account_uuid"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "username", 
                                                "event_type", 
                                                "event_name", 
                                                "failed", 
                                                "start_time", 
                                                "end_time", 
                                                "elapsed_msec"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "failed": {
                                            "type": "boolean", 
                                            "description": "True to match only failed events, False to match only successful events", 
                                            "title": "failed"
                                        }, 
                                        "elapsed_msec_max": {
                                            "format": "integer", 
                                            "type": "number", 
                                            "description": "Maximum elapsed event time, in milliseconds", 
                                            "title": "elapsed_msec_max"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "session_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Session UUID, a unique identifier for each client session", 
                                            "title": "session_uuid"
                                        }, 
                                        "daterange_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for daterange", 
                                            "title": "daterange_fmt"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "event_type": {
                                            "enumNames": [], 
                                            "enum": [
                                                "system", 
                                                "auth", 
                                                "rpc", 
                                                "task"
                                            ], 
                                            "type": "string", 
                                            "description": "Event type", 
                                            "title": "event_type"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetAuditSchemaV5"
                        }, 
                        "parameters": [
                            [
                                "account_uuid", 
                                null
                            ], 
                            [
                                "username", 
                                null
                            ], 
                            [
                                "session_uuid", 
                                null
                            ], 
                            [
                                "event_type", 
                                null
                            ], 
                            [
                                "event_name", 
                                null
                            ], 
                            [
                                "failed", 
                                null
                            ], 
                            [
                                "daterange", 
                                null
                            ], 
                            [
                                "elapsed_msec_min", 
                                null
                            ], 
                            [
                                "elapsed_msec_max", 
                                null
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ]
                        ], 
                        "signature": "get_audit(account_uuid: typing.Union[uuid.UUID, NoneType], username: typing.Union[str, NoneType], session_uuid: typing.Union[uuid.UUID, NoneType], event_type: typing.Union[str, NoneType], event_name: typing.Union[str, NoneType], failed: typing.Union[bool, NoneType], daterange: typing.Union[typing.List, NoneType], elapsed_msec_min: typing.Union[int, NoneType], elapsed_msec_max: typing.Union[int, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 50, sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'get_audit(account_uuid: typing.Union[uuid.UUID, NoneType], username: typing.Union[str,\n  NoneType], session_uuid: typing.Union[uuid.UUID, NoneType], event_type: typing.Union[str,\n  NoneType], event_name: typing.Union[str, NoneType], failed: typing.Union[bool, NoneType],\n  daterange: typing.Union[typing.List, NoneType], elapsed_msec_min: typing.Union[int,\n  NoneType], elapsed_msec_max: typing.Union[int, NoneType], page: typing.Union[int,\n  NoneType], limit: typing.Union[int, NoneType] = 50, sort_by: typing.Union[str, NoneType],\n  reverse: typing.Union[bool, NoneType])'\nreturns: Dict\ndoc: \"Return a list of audit records matching search criteria.\\n\\nParameters\\n:account_uuid:\\\n  \\ Account UUID to match on audit records. Cannot be combined with ``username``\\n\\\n  :username: Username to match on audit records. Cannot be combined with ``account_uuid``\\n\\\n  :session_uuid: Session UUID, to match retrieve audit records from a particular client\\\n  \\ session\\n:event_type: ``'system'``, ``'auth'``, ``'rpc'``, or ``'task'``\\n:event_name:\\\n  \\ For ``system`` events, ``'startup'`` or ``'shutdown'``. For ``auth`` events,\\n\\\n  \\                ``'login'`` or ``'logout'``. For ``rpc`` events, ``'<resource>.<method>'``\\\n  \\ of\\n                the API call. For ``task`` events, the name of the background\\\n  \\ task.\\n:failed: True to match failed events, False to match successful events\\n\\\n  :daterange: List of two date strings in ISO 8601 format\\n:elapsed_msec_min: Minimum\\\n  \\ event duration, in milliseconds\\n:elapsed_msec_max: Maximum event duration, in\\\n  \\ milliseconds\\n:page: Which page of the records to return (offset = page * limit)\\n\\\n  :limit: How many records to return at a time\\n:sort_by: Field to sort by (``'username'``,\\\n  \\ ``'event_type'``, ``'event_name'``,\\n            ``'failed'``, ``'start_time'``,\\\n  \\ ``'end_time'``, ``'elapsed_msec'``)\\n:reverse: True to reverse sort order\\n\\n\\\n  .. code-block:: python\\n\\n    client.api.audit.get_audit(username='root', event_type='auth',\\\n  \\ failed=True)\\n\\n    RPCResponse(\\n        riq=4,\\n        ret={'count': 1,\\n \\\n  \\            'results': [\\n                {'id': 175,\\n                 'start_time':\\\n  \\ '2019-06-05T21:12:53.190506+00:00',\\n                 'end_time': '2019-06-05T21:13:24.729561+00:00',\\n\\\n  \\                 'event_type': 'auth',\\n                 'event_name': 'login',\\n\\\n  \\                 'username': 'root',\\n                 'account_uuid': None,\\n\\\n  \\                 'session_uuid': '4642ef92-d5ac-4ea2-b95d-2055b43f2193',\\n    \\\n  \\             'failed': True,\\n                 'event_data': {\\n              \\\n  \\      'note': 'User root: authentication failed: invalid basic-auth credentials',\\n\\\n  \\                    'status': 401,\\n                    'headers': {\\n        \\\n  \\                'Host': 'localhost:8080',\\n                        'Accept': '*/*',\\n\\\n  \\                        'User-Agent': 'curl/7.65.0',\\n                        'Content-Type':\\\n  \\ 'application/x-www-form-urlencoded',\\n                        'Authorization':\\\n  \\ 'Basic cm9vdDpzYWx0MQ==',\\n                        'Content-Length': '41'}}}],\\n\\\n  \\        error=None,\\n        warnings=[])\"\nschema:\n  $ref: '#/definitions/GetAuditSchemaV5'\n  definitions:\n    GetAuditSchemaV5:\n      properties:\n        account_uuid:\n          description: User account UUID\n          format: uuid\n          title: account_uuid\n          type: string\n        daterange:\n          description: A list of two date strings in ISO 8601 format\n          items:\n            title: daterange\n            type: string\n          maxItems: 2\n          minItems: 2\n          title: daterange\n          type: array\n        daterange_fmt:\n          description: An alternate date format for daterange\n          title: daterange_fmt\n          type: string\n        elapsed_msec_max:\n          description: Maximum elapsed event time, in milliseconds\n          format: integer\n          title: elapsed_msec_max\n          type: number\n        elapsed_msec_min:\n          description: Minimum elapsed event time, in milliseconds\n          format: integer\n          title: elapsed_msec_min\n          type: number\n        event_name:\n          description: For system events, 'startup' or 'shutdown'. For auth events,\n            'login' or 'logout'. For rpc events, '<resource>.<method>' of the API\n            call. For task events, the name of the background task.\n          title: event_name\n          type: string\n        event_type:\n          description: Event type\n          enum:\n          - system\n          - auth\n          - rpc\n          - task\n          enumNames: []\n          title: event_type\n          type: string\n        failed:\n          description: True to match only failed events, False to match only successful\n            events\n          title: failed\n          type: boolean\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        session_uuid:\n          description: Session UUID, a unique identifier for each client session\n          format: uuid\n          title: session_uuid\n          type: string\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - username\n          - event_type\n          - event_name\n          - failed\n          - start_time\n          - end_time\n          - elapsed_msec\n          enumNames: []\n          title: sort_by\n          type: string\n        username:\n          description: Username\n          title: username\n          type: string\n      required: []\n      type: object\nparameters:\n- - account_uuid\n  - null\n- - username\n  - null\n- - session_uuid\n  - null\n- - event_type\n  - null\n- - event_name\n  - null\n- - failed\n  - null\n- - daterange\n  - null\n- - elapsed_msec_min\n  - null\n- - elapsed_msec_max\n  - null\n- - page\n  - 0\n- - limit\n  - 50\n- - sort_by\n  - null\n- - reverse\n  - false"
                }, 
                "__doc__": "Audit RPC endpoint"
            }, 
            "remote": {
                "__doc__": "Remote control raas"
            }, 
            "license": {
                "delete_license": {
                    "detailed": {
                        "doc": "Delete the license for this uuid.  Deleting the active license with no alternative\nlicense in place can cause RaaS to stop working.\n\nParameters\n----------\n:license_uuid: UUID for the license to be deleted.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "GetLicenseSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "license_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "License UUID", 
                                            "title": "license_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetLicenseSchema"
                        }, 
                        "parameters": [
                            [
                                "license_uuid"
                            ]
                        ], 
                        "signature": "delete_license(license_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'delete_license(license_uuid: UUID)'\nreturns: None\ndoc: 'Delete the license for this uuid.  Deleting the active license with no alternative\n\n  license in place can cause RaaS to stop working.\n\n\n  Parameters\n\n  ----------\n\n  :license_uuid: UUID for the license to be deleted.'\nschema:\n  $ref: '#/definitions/GetLicenseSchema'\n  definitions:\n    GetLicenseSchema:\n      properties:\n        license_uuid:\n          description: License UUID\n          format: uuid\n          title: license_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - license_uuid"
                }, 
                "get_usage_snapshots": {
                    "detailed": {
                        "doc": "Return snapshots of license usage for a given date range.\n\nSnapshots are normally taken every hour.\n\nParameters\n:date_start: Initial snapshot date.\n:date_end: Final snapshot date.\n\nExample:\n\n.. code-block:: python\n\n    client.api.license.get_usage_snapshots('2017-11-01','2017-11-17')\n\n    RPCResponse(riq=25,\n        ret=[{u'license_uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\n              u'masters': 4,\n              u'minions': 4212,\n              u'datetime': u'2017-11-16T18:06:49.171497'},\n             {u'license_uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\n              u'masters': 4, u'minions': 4243,\n              u'datetime': u'2017-11-16T19:55:26.095901'},\n             {u'license_uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\n              u'masters': 4,\n              u'minions': 4222,\n              u'datetime': u'2017-11-16T20:55:26.092793'} .... ],\n        error=None, warnings=[])", 
                        "returns": "List", 
                        "schema": {
                            "definitions": {
                                "LicenseGetUsageSnapSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "date_end": {
                                            "type": "string", 
                                            "description": "End date for license usage window.", 
                                            "title": "date_end"
                                        }, 
                                        "date_start": {
                                            "type": "string", 
                                            "description": "Start date for license usage window.", 
                                            "title": "date_start"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/LicenseGetUsageSnapSchema"
                        }, 
                        "parameters": [
                            [
                                "date_start", 
                                null
                            ], 
                            [
                                "date_end", 
                                null
                            ]
                        ], 
                        "signature": "get_usage_snapshots(date_start: typing.Union[str, NoneType], date_end: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'get_usage_snapshots(date_start: typing.Union[str, NoneType], date_end:\n  typing.Union[str, NoneType])'\nreturns: List\ndoc: \"Return snapshots of license usage for a given date range.\\n\\nSnapshots are normally\\\n  \\ taken every hour.\\n\\nParameters\\n:date_start: Initial snapshot date.\\n:date_end:\\\n  \\ Final snapshot date.\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    client.api.license.get_usage_snapshots('2017-11-01','2017-11-17')\\n\\\n  \\n    RPCResponse(riq=25,\\n        ret=[{u'license_uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\\n\\\n  \\              u'masters': 4,\\n              u'minions': 4212,\\n              u'datetime':\\\n  \\ u'2017-11-16T18:06:49.171497'},\\n             {u'license_uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\\n\\\n  \\              u'masters': 4, u'minions': 4243,\\n              u'datetime': u'2017-11-16T19:55:26.095901'},\\n\\\n  \\             {u'license_uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\\n     \\\n  \\         u'masters': 4,\\n              u'minions': 4222,\\n              u'datetime':\\\n  \\ u'2017-11-16T20:55:26.092793'} .... ],\\n        error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/LicenseGetUsageSnapSchema'\n  definitions:\n    LicenseGetUsageSnapSchema:\n      properties:\n        date_end:\n          description: End date for license usage window.\n          title: date_end\n          type: string\n        date_start:\n          description: Start date for license usage window.\n          title: date_start\n          type: string\n      required: []\n      type: object\nparameters:\n- - date_start\n  - null\n- - date_end\n  - null"
                }, 
                "get_current_license": {
                    "detailed": {
                        "doc": "Retrieve the current active license for RaaS.\n\n.. note::\n    Make sure to track your license status and keep it active.\n    If your license expires, the SaltStack Enterprise service will stop.\n\nExample:\n\n.. code-block:: python\n\n    c.api.license.get_current_license()\n\n    RPCResponse(riq=16,\n       ret={u'alter_time': u'2017-11-15T23:39:04.227752',\n            u'uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\n            u'license': {u'masters':\n                           {u'policy': u'fixed',\n                            u'hard_limit': 10},\n                         u'term': {u'duration': -1,\n                                   u'policy': u'fixed'},\n                         u'features': [u'*'],\n                         u'minions': {u'policy': u'fixed',\n                                      u'hard_limit': 10000},\n                         u'metadata': {u'customer': u'SaltStack',\n                                       u'uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\n                                       u'created': u'2016-12-19'}},\n            u'desc': [u'Customer:     SaltStack',\n                      u'License UUID: 1dbb6f3c-c622-11e6-874c-002590058d18',\n                      u'Created:      2016-12-19',\n                      u'Duration:     UNLIMITED',\n                      u'Masters:      up to 10',\n                      u'Minions:      up to 10000',\n                      u'Features:     *']},\n        error=None, warnings=[])", 
                        "returns": "Dict", 
                        "signature": "get_current_license()"
                    }, 
                    "formatted": "signature: get_current_license()\nreturns: Dict\ndoc: \"Retrieve the current active license for RaaS.\\n\\n.. note::\\n    Make sure to\\\n  \\ track your license status and keep it active.\\n    If your license expires, the\\\n  \\ SaltStack Enterprise service will stop.\\n\\nExample:\\n\\n.. code-block:: python\\n\\\n  \\n    c.api.license.get_current_license()\\n\\n    RPCResponse(riq=16,\\n       ret={u'alter_time':\\\n  \\ u'2017-11-15T23:39:04.227752',\\n            u'uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\\n\\\n  \\            u'license': {u'masters':\\n                           {u'policy': u'fixed',\\n\\\n  \\                            u'hard_limit': 10},\\n                         u'term':\\\n  \\ {u'duration': -1,\\n                                   u'policy': u'fixed'},\\n\\\n  \\                         u'features': [u'*'],\\n                         u'minions':\\\n  \\ {u'policy': u'fixed',\\n                                      u'hard_limit': 10000},\\n\\\n  \\                         u'metadata': {u'customer': u'SaltStack',\\n           \\\n  \\                            u'uuid': u'1dbb6f3c-c622-11e6-874c-002590058d18',\\n\\\n  \\                                       u'created': u'2016-12-19'}},\\n         \\\n  \\   u'desc': [u'Customer:     SaltStack',\\n                      u'License UUID:\\\n  \\ 1dbb6f3c-c622-11e6-874c-002590058d18',\\n                      u'Created:     \\\n  \\ 2016-12-19',\\n                      u'Duration:     UNLIMITED',\\n            \\\n  \\          u'Masters:      up to 10',\\n                      u'Minions:      up\\\n  \\ to 10000',\\n                      u'Features:     *']},\\n        error=None, warnings=[])\""
                }, 
                "check_usage": {
                    "detailed": {
                        "doc": "Return a dictionary that contains information about the license status.\n\nParameters\n:force_check: If ``False`` uses information cached over time since\n                    getting actual usage can be somewhat time-consuming for\n                    large environments.  If ``True`` forces the usage calculation\n                    and then returns results.\n\n.. note::\n    Make sure to track your license status and keep it active.\n    If your license expires, the SaltStack Enterprise service will stop.\n\nExample:\n\n.. code-block:: python\n\n    client.api.license.check_usage()\n\n    RPCResponse(riq=17,\n        ret={u'timestamp': u'2017-11-30T15:58:24.475034',\n             u'messages': [{u'detail': u'license expires 2018-06-01',\n                            u'level': u'info'},\n                           {u'detail': u'4 masters in use is within hard limit of 10',\n                            u'level': u'info'},\n                           {u'detail': u'4243 minions in use is within hard limit of 10000',\n                            u'level': u'info'}]},\n        error=None, warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "LicenseCheckSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "license_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "License UUID", 
                                            "title": "license_uuid"
                                        }, 
                                        "force_check": {
                                            "type": "boolean", 
                                            "description": "Force a check on the license instead of returning from cache", 
                                            "title": "force_check"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/LicenseCheckSchema"
                        }, 
                        "parameters": [
                            [
                                "force_check", 
                                false
                            ], 
                            [
                                "license_uuid", 
                                null
                            ]
                        ], 
                        "signature": "check_usage(force_check: typing.Union[bool, NoneType], license_uuid: typing.Union[uuid.UUID, NoneType])"
                    }, 
                    "formatted": "signature: 'check_usage(force_check: typing.Union[bool, NoneType], license_uuid: typing.Union[uuid.UUID,\n  NoneType])'\nreturns: Dict\ndoc: \"Return a dictionary that contains information about the license status.\\n\\n\\\n  Parameters\\n:force_check: If ``False`` uses information cached over time since\\n\\\n  \\                    getting actual usage can be somewhat time-consuming for\\n \\\n  \\                   large environments.  If ``True`` forces the usage calculation\\n\\\n  \\                    and then returns results.\\n\\n.. note::\\n    Make sure to track\\\n  \\ your license status and keep it active.\\n    If your license expires, the SaltStack\\\n  \\ Enterprise service will stop.\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    client.api.license.check_usage()\\n\\\n  \\n    RPCResponse(riq=17,\\n        ret={u'timestamp': u'2017-11-30T15:58:24.475034',\\n\\\n  \\             u'messages': [{u'detail': u'license expires 2018-06-01',\\n       \\\n  \\                     u'level': u'info'},\\n                           {u'detail':\\\n  \\ u'4 masters in use is within hard limit of 10',\\n                            u'level':\\\n  \\ u'info'},\\n                           {u'detail': u'4243 minions in use is within\\\n  \\ hard limit of 10000',\\n                            u'level': u'info'}]},\\n   \\\n  \\     error=None, warnings=[])\"\nschema:\n  $ref: '#/definitions/LicenseCheckSchema'\n  definitions:\n    LicenseCheckSchema:\n      properties:\n        force_check:\n          description: Force a check on the license instead of returning from cache\n          title: force_check\n          type: boolean\n        license_uuid:\n          description: License UUID\n          format: uuid\n          title: license_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - force_check\n  - false\n- - license_uuid\n  - null"
                }, 
                "get_license": {
                    "detailed": {
                        "doc": "Return license for the passed uuid.\n\nParameters\n----------\n:license_uuid: UUID for the desired license.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetLicenseSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "license_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "License UUID", 
                                            "title": "license_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetLicenseSchema"
                        }, 
                        "parameters": [
                            [
                                "license_uuid"
                            ]
                        ], 
                        "signature": "get_license(license_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'get_license(license_uuid: UUID)'\nreturns: Dict\ndoc: 'Return license for the passed uuid.\n\n\n  Parameters\n\n  ----------\n\n  :license_uuid: UUID for the desired license.'\nschema:\n  $ref: '#/definitions/GetLicenseSchema'\n  definitions:\n    GetLicenseSchema:\n      properties:\n        license_uuid:\n          description: License UUID\n          format: uuid\n          title: license_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - license_uuid"
                }, 
                "__doc__": "The RPC methods for license management"
            }, 
            "settings": {
                "get_auth_config_access": {
                    "detailed": {
                        "doc": "Return access metadata for this authentication configuration.\n\nParameters\n:config_uuid: UUID referencing desired authentication configuration.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetAuthConfigAccessSchema": {
                                    "required": [
                                        "config_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "config_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The authentication configuration UUID", 
                                            "title": "config_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetAuthConfigAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "config_uuid"
                            ]
                        ], 
                        "signature": "get_auth_config_access(config_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'get_auth_config_access(config_uuid: UUID)'\nreturns: Dict\ndoc: 'Return access metadata for this authentication configuration.\n\n\n  Parameters\n\n  :config_uuid: UUID referencing desired authentication configuration.'\nschema:\n  $ref: '#/definitions/GetAuthConfigAccessSchema'\n  definitions:\n    GetAuthConfigAccessSchema:\n      properties:\n        config_uuid:\n          description: The authentication configuration UUID\n          format: uuid\n          title: config_uuid\n          type: string\n      required:\n      - config_uuid\n      type: object\nparameters:\n- - config_uuid"
                }, 
                "end_directory_preview": {
                    "detailed": {
                        "doc": "Clears out the Redis cache entry for this particular preview job.\nThis does not stop the background task, to stop a background\nCelery task is somewhat ugly, we can revisit this later if it appears\nwe really need to make sure the task is dead.", 
                        "parameters": [
                            [
                                "config_name"
                            ], 
                            [
                                "preview_type", 
                                "user"
                            ], 
                            [
                                "task_id", 
                                ""
                            ]
                        ], 
                        "signature": "end_directory_preview(config_name: 'unicode', preview_type: 'unicode' = user, task_id: 'unicode')"
                    }, 
                    "formatted": "signature: 'end_directory_preview(config_name: ''unicode'', preview_type: ''unicode''\n  = user, task_id: ''unicode'')'\ndoc: 'Clears out the Redis cache entry for this particular preview job.\n\n  This does not stop the background task, to stop a background\n\n  Celery task is somewhat ugly, we can revisit this later if it appears\n\n  we really need to make sure the task is dead.'\nparameters:\n- - config_name\n- - preview_type\n  - user\n- - task_id\n  - ''"
                }, 
                "save_auth_config_access": {
                    "detailed": {
                        "doc": "Save access metadata for this authentication configuration.\n\nParameters\n:config_uuid: UUID referencing desired authentication configuration.\n:access_payload: Dictionary containing role names as keys and a list of allowed\n                 access types as values", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SaveAuthConfigAccessSchema": {
                                    "required": [
                                        "access_payload", 
                                        "config_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "config_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "The authentication configuration UUID", 
                                            "title": "config_uuid"
                                        }, 
                                        "access_payload": {
                                            "type": "object", 
                                            "description": "Dictionary containing access data for a resource. The keys need to be valid role names. The values need to be valid access permissions", 
                                            "title": "access_payload"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveAuthConfigAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "config_uuid"
                            ], 
                            [
                                "access_payload"
                            ]
                        ], 
                        "signature": "save_auth_config_access(config_uuid: UUID, access_payload: Dict)"
                    }, 
                    "formatted": "signature: 'save_auth_config_access(config_uuid: UUID, access_payload: Dict)'\nreturns: None\ndoc: \"Save access metadata for this authentication configuration.\\n\\nParameters\\n\\\n  :config_uuid: UUID referencing desired authentication configuration.\\n:access_payload:\\\n  \\ Dictionary containing role names as keys and a list of allowed\\n             \\\n  \\    access types as values\"\nschema:\n  $ref: '#/definitions/SaveAuthConfigAccessSchema'\n  definitions:\n    SaveAuthConfigAccessSchema:\n      properties:\n        access_payload:\n          description: Dictionary containing access data for a resource. The keys\n            need to be valid role names. The values need to be valid access permissions\n          title: access_payload\n          type: object\n        config_uuid:\n          description: The authentication configuration UUID\n          format: uuid\n          title: config_uuid\n          type: string\n      required:\n      - access_payload\n      - config_uuid\n      type: object\nparameters:\n- - config_uuid\n- - access_payload"
                }, 
                "get_directory_preview_records": {
                    "detailed": {
                        "doc": "Return the records retrieved from the LDAP directory as collected so far.\nThe return payload will contain the LDAP records under the `entries` key\nas well as the status of the background job that is querying the directory.\nThe status will appear in the `status` key of the return payload.", 
                        "parameters": [
                            [
                                "config_name"
                            ], 
                            [
                                "preview_type", 
                                "user"
                            ], 
                            [
                                "task_id", 
                                null
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                1000
                            ]
                        ], 
                        "signature": "get_directory_preview_records(config_name: 'unicode', preview_type: 'unicode' = user, task_id: typing.Union[str, NoneType], page: 'int', limit: 'int' = 1000)"
                    }, 
                    "formatted": "signature: 'get_directory_preview_records(config_name: ''unicode'', preview_type:\n  ''unicode'' = user, task_id: typing.Union[str, NoneType], page: ''int'', limit:\n  ''int'' = 1000)'\ndoc: 'Return the records retrieved from the LDAP directory as collected so far.\n\n  The return payload will contain the LDAP records under the `entries` key\n\n  as well as the status of the background job that is querying the directory.\n\n  The status will appear in the `status` key of the return payload.'\nparameters:\n- - config_name\n- - preview_type\n  - user\n- - task_id\n  - null\n- - page\n  - 0\n- - limit\n  - 1000"
                }, 
                "get_auth_config": {
                    "detailed": {
                        "doc": "Return the authentication configuration by the provided ``name``, or all\nauthentication configurations if ``name`` is not specified.\n\nParameters\n:config_name: Name of the configuration to retrieve.  Retrieve all if ``config_name`` is ``None``.\n:include_preview: Include any auth_configs that are marked Preview.\n                  Defaults to False.  Only matters if config_name is None,\n                  if\n                  a config_name is passed, always return the config whether it is a preview config or not.", 
                        "returns": [
                            "Dict", 
                            "List"
                        ], 
                        "schema": {
                            "definitions": {
                                "GetAuthConfigSchemaV5": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The short authentication configuration name", 
                                            "title": "Name"
                                        }, 
                                        "include_preview": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Include or filter auth configurations that are marked for preview.", 
                                            "title": "Include Preview Auth Config"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetAuthConfigSchemaV5"
                        }, 
                        "parameters": [
                            [
                                "config_name", 
                                null
                            ], 
                            [
                                "include_preview", 
                                false
                            ]
                        ], 
                        "signature": "get_auth_config(config_name: typing.Union[str, NoneType], include_preview: typing.Union[bool, NoneType])"
                    }, 
                    "formatted": "signature: 'get_auth_config(config_name: typing.Union[str, NoneType], include_preview:\n  typing.Union[bool, NoneType])'\nreturns:\n- Dict\n- List\ndoc: \"Return the authentication configuration by the provided ``name``, or all\\nauthentication\\\n  \\ configurations if ``name`` is not specified.\\n\\nParameters\\n:config_name: Name\\\n  \\ of the configuration to retrieve.  Retrieve all if ``config_name`` is ``None``.\\n\\\n  :include_preview: Include any auth_configs that are marked Preview.\\n          \\\n  \\        Defaults to False.  Only matters if config_name is None,\\n            \\\n  \\      if\\n                  a config_name is passed, always return the config whether\\\n  \\ it is a preview config or not.\"\nschema:\n  $ref: '#/definitions/GetAuthConfigSchemaV5'\n  definitions:\n    GetAuthConfigSchemaV5:\n      properties:\n        config_name:\n          description: The short authentication configuration name\n          title: Name\n          type: string\n        include_preview:\n          default: false\n          description: Include or filter auth configurations that are marked for preview.\n          title: Include Preview Auth Config\n          type: boolean\n      required: []\n      type: object\nparameters:\n- - config_name\n  - null\n- - include_preview\n  - false"
                }, 
                "delete_auth_config": {
                    "detailed": {
                        "doc": "Delete the authentication configuration by the provided ``name``\n\nParameters\n:name: The name of the authentication configuration to delete.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeleteAuthConfigSchema": {
                                    "required": [
                                        "config_name"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The short authentication configuration name", 
                                            "title": "Name"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteAuthConfigSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name"
                            ]
                        ], 
                        "signature": "delete_auth_config(config_name: 'unicode')"
                    }, 
                    "formatted": "signature: 'delete_auth_config(config_name: ''unicode'')'\nreturns: None\ndoc: 'Delete the authentication configuration by the provided ``name``\n\n\n  Parameters\n\n  :name: The name of the authentication configuration to delete.'\nschema:\n  $ref: '#/definitions/DeleteAuthConfigSchema'\n  definitions:\n    DeleteAuthConfigSchema:\n      properties:\n        config_name:\n          description: The short authentication configuration name\n          title: Name\n          type: string\n      required:\n      - config_name\n      type: object\nparameters:\n- - config_name"
                }, 
                "start_directory_preview": {
                    "detailed": {
                        "doc": "Execute a background task that will return a set of example records\nfrom the defined LDAP or Active Directory.  Returns a `task_id`\nthat can be used to check on the status of the preview.  LDAP records\nare cached in Redis and can be retrieved with `get_directory_preview_records()`.", 
                        "parameters": [
                            [
                                "config_name"
                            ], 
                            [
                                "preview_type", 
                                "user"
                            ], 
                            [
                                "custom_directory_filter", 
                                null
                            ], 
                            [
                                "max_entries", 
                                1000
                            ], 
                            [
                                "include_raas_links", 
                                false
                            ]
                        ], 
                        "signature": "start_directory_preview(config_name: 'unicode', preview_type: 'unicode' = user, custom_directory_filter: typing.Union[str, NoneType], max_entries: 'int' = 1000, include_raas_links: bool)"
                    }, 
                    "formatted": "signature: 'start_directory_preview(config_name: ''unicode'', preview_type: ''unicode''\n  = user, custom_directory_filter: typing.Union[str, NoneType], max_entries: ''int''\n  = 1000, include_raas_links: bool)'\ndoc: 'Execute a background task that will return a set of example records\n\n  from the defined LDAP or Active Directory.  Returns a `task_id`\n\n  that can be used to check on the status of the preview.  LDAP records\n\n  are cached in Redis and can be retrieved with `get_directory_preview_records()`.'\nparameters:\n- - config_name\n- - preview_type\n  - user\n- - custom_directory_filter\n  - null\n- - max_entries\n  - 1000\n- - include_raas_links\n  - false"
                }, 
                "test_auth_config": {
                    "detailed": {
                        "doc": "Test Active Directory/LDAP connectability and credentials for the provided\nauthentication configuration details\n\nParameters\n:details: Connection details for the AD/LDAP backend.\n\nReturns a dictionary with at least one key, ``validation_passed``, for which the\nvalue is ``True`` or ``False`` depending on the outcome of the validation routines.\nIf validation failed, an extra key, ``details`` is also included with an explanation\non what failed..", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "TestAuthConfigSchema": {
                                    "required": [
                                        "account_attr_name", 
                                        "base_dn", 
                                        "bind_dn", 
                                        "driver", 
                                        "group_attr_name", 
                                        "group_class", 
                                        "host", 
                                        "person_class", 
                                        "port"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "ssl_validate_cert": {
                                            "default": true, 
                                            "type": "boolean", 
                                            "description": "When SSL is in use, certificates will be validated against the system CA contents.", 
                                            "title": "Validate SSL Certificate"
                                        }, 
                                        "group_class": {
                                            "default": "posixGroup", 
                                            "type": "string", 
                                            "description": "The object class name to use when searching for groups. Example: `(&(...)(objectClass={group_class}))`", 
                                            "title": "Group Class"
                                        }, 
                                        "group_search_filter": {
                                            "default": "(objectClass=group)", 
                                            "type": "string", 
                                            "description": "The LDAP search string that will retrieve groups from the directory.  Usually `(objectClass=group)`", 
                                            "title": "Group Search Filter"
                                        }, 
                                        "base_dn": {
                                            "type": "string", 
                                            "description": "LDAP base DN for any search operations", 
                                            "title": "Base DN"
                                        }, 
                                        "bind_pw": {
                                            "format": "secret", 
                                            "type": "string", 
                                            "description": "The password to be used when trying to bind to LDAP using \"Bind DN\"", 
                                            "title": "Bind Password"
                                        }, 
                                        "use_ssl": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Use SSL in the connection", 
                                            "title": "Use SSL"
                                        }, 
                                        "config_uuid": {
                                            "format": "hidden", 
                                            "type": "string", 
                                            "description": "The authentication configuration UUID", 
                                            "title": "UUID"
                                        }, 
                                        "port": {
                                            "exclusiveMaximum": true, 
                                            "description": "The LDAP port to connect to", 
                                            "title": "Port", 
                                            "exclusiveMinimum": true, 
                                            "format": "integer", 
                                            "maximum": 65535, 
                                            "minimum": 1, 
                                            "type": "number"
                                        }, 
                                        "display_name": {
                                            "type": "string", 
                                            "description": "The authentication configuration display name", 
                                            "title": "Display Name"
                                        }, 
                                        "auth_bind_dn": {
                                            "type": "string", 
                                            "description": "This is the DN to authenticate regular users. This setting expects a `{{username}}` format string place holder to interpolate the full DN.\nFor example, if user `John` is trying to authenticate and `auth_bind_dn` is `cn={username},ou=Users,dc=example,dc=com`, the driver will try to bind the user to the LDAP server using `cn=John,ou=Users,dc=example,dc=com` as the bind DN.", 
                                            "title": "Auth Bind DN"
                                        }, 
                                        "bind_dn": {
                                            "type": "string", 
                                            "description": "The bind DN to authenticate when connecting to the LDAP server. This setting will be used for all administrative tasks required by RaaS, it will not be used to authenticate regular users. The driver will try to bind regular users against LDAP using their own DN, see \"Auth Bind DN\".", 
                                            "title": "Bind DN"
                                        }, 
                                        "preview_config": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Use this backend for preview only, do not authenticate with it.", 
                                            "title": "Authentication Backend Preview"
                                        }, 
                                        "user_search_filter": {
                                            "default": "(objectClass=person)", 
                                            "type": "string", 
                                            "description": "The LDAP search string that will retrieve users from the directory.  Usually `(objectClass=person)`", 
                                            "title": "User Search Filter"
                                        }, 
                                        "group_member_is_dn": {
                                            "default": true, 
                                            "type": "boolean", 
                                            "description": "Some directories, notably Active Directory, store the full DN of group members instead of just the memberUid. Setting this flag to True indicates group membership is determined by full DN.", 
                                            "title": "Group Attribute Name"
                                        }, 
                                        "account_attr_name": {
                                            "default": "memberUid", 
                                            "type": "string", 
                                            "description": "The account attribute name to be used when searching for group membership. Example: `({account_attr_name}={username})`", 
                                            "title": "Account Attribute Name"
                                        }, 
                                        "driver": {
                                            "description": "The authentication config driver to use. Only 'ldap' is allowed as a value right now.", 
                                            "title": "driver", 
                                            "default": "ldap", 
                                            "format": "hidden", 
                                            "enum": [
                                                "ldap"
                                            ], 
                                            "enumNames": [], 
                                            "type": "string"
                                        }, 
                                        "host": {
                                            "type": "string", 
                                            "description": "The LDAP host to connect to", 
                                            "title": "Host"
                                        }, 
                                        "sync_schedule": {
                                            "description": "The number of minutes to sync the managed data with the authentication backend.", 
                                            "title": "Sync Scheduling", 
                                            "default": 60, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 1, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "remote_uid_attr_name": {
                                            "default": "objectGUID", 
                                            "type": "string", 
                                            "description": "Most directories assign a UUID or GUID for each object in the directory.  This is the name of the attribute that contains this ID.  For Active Directory this is `objectGUID`, for OpenLDAP it is generally `entryUUID`.  For FreeIPA it is `IpaUniqueId`", 
                                            "title": "Name of directory-supplied unique ID"
                                        }, 
                                        "auth_bind_dn_filter": {
                                            "type": "string", 
                                            "description": "This is an LDAP filter to search for the user account in order to find it's DN which will then be used to authenticate. An example filter is: `(&(objectclass=user)(sAMAccountName={{username}})(|(memberOf=CN=Core Devs,OU=Groups,OU=Test Company HQ,DC=adtest,DC=com)(memberOf=UI Devs,OU=Groups,DC=adtest,DC=com)))`. This would only return an account matching the provided username which belonged to groups \"Core Devs\" or \"UI Devs\".", 
                                            "title": "User Search DN Filter"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The short authentication configuration name", 
                                            "title": "Name"
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "The short authentication configuration name", 
                                            "title": "Name"
                                        }, 
                                        "person_class": {
                                            "default": "person", 
                                            "type": "string", 
                                            "description": "The object class name to use when searching for users. Example: `(&(...)(objectClass={person_class}))`", 
                                            "title": "Person Object Class"
                                        }, 
                                        "user_search_scope": {
                                            "default": "SUBTREE", 
                                            "type": "string", 
                                            "description": "How deep to search for users in the directory. This is generally set to Base from the LDAP RFC 4520, this corresponds to `ldap3.BASE` from the ldap3 library.", 
                                            "title": "User Search Scope"
                                        }, 
                                        "user_search_base_dn": {
                                            "type": "string", 
                                            "description": "Search base for users in the directory", 
                                            "title": "User Search DN"
                                        }, 
                                        "group_attr_name": {
                                            "default": "cn", 
                                            "type": "string", 
                                            "description": "The group attribute name which will be used for the group name. Considering a group DN like `cn=Managers,ou=Groups,dc=example,dc=com`, this value should be `cn`.", 
                                            "title": "Group Attribute Name"
                                        }, 
                                        "group_search_base_dn": {
                                            "type": "string", 
                                            "description": "Search base for groups in the directory", 
                                            "title": "Group Search DN"
                                        }, 
                                        "group_search_scope": {
                                            "default": "LEVEL", 
                                            "type": "string", 
                                            "description": "How deep to search for groups in the directory. This is generally set to singleLevel from the LDAP RFC 4520, this corresponds to `ldap3.LEVEL` from the ldap3 library.", 
                                            "title": "Group Search Scope"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/TestAuthConfigSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name"
                            ], 
                            [
                                "driver"
                            ], 
                            [
                                "host"
                            ], 
                            [
                                "port"
                            ], 
                            [
                                "bind_dn"
                            ], 
                            [
                                "bind_pw"
                            ], 
                            [
                                "base_dn"
                            ], 
                            [
                                "person_class"
                            ], 
                            [
                                "account_attr_name"
                            ], 
                            [
                                "group_class"
                            ], 
                            [
                                "group_attr_name"
                            ], 
                            [
                                "remote_uid_attr_name"
                            ], 
                            [
                                "preview_config", 
                                false
                            ], 
                            [
                                "auth_bind_dn", 
                                null
                            ], 
                            [
                                "auth_bind_dn_filter", 
                                null
                            ], 
                            [
                                "use_ssl", 
                                false
                            ], 
                            [
                                "ssl_validate_cert", 
                                true
                            ], 
                            [
                                "display_name", 
                                null
                            ], 
                            [
                                "sync_schedule", 
                                60
                            ]
                        ], 
                        "signature": "test_auth_config(config_name: 'unicode', driver: 'unicode', host: 'unicode', port: 'int', bind_dn: 'unicode', bind_pw: 'unicode', base_dn: 'unicode', person_class: 'unicode', account_attr_name: 'unicode', group_class: 'unicode', group_attr_name: 'unicode', remote_uid_attr_name: 'unicode', preview_config: bool, auth_bind_dn: typing.Union[str, NoneType], auth_bind_dn_filter: typing.Union[str, NoneType], use_ssl: typing.Union[bool, NoneType], ssl_validate_cert: typing.Union[bool, NoneType] = True, display_name: typing.Union[str, NoneType], sync_schedule: typing.Union[int, NoneType] = 60)"
                    }, 
                    "formatted": "signature: 'test_auth_config(config_name: ''unicode'', driver: ''unicode'', host:\n  ''unicode'', port: ''int'', bind_dn: ''unicode'', bind_pw: ''unicode'', base_dn:\n  ''unicode'', person_class: ''unicode'', account_attr_name: ''unicode'', group_class:\n  ''unicode'', group_attr_name: ''unicode'', remote_uid_attr_name: ''unicode'', preview_config:\n  bool, auth_bind_dn: typing.Union[str, NoneType], auth_bind_dn_filter: typing.Union[str,\n  NoneType], use_ssl: typing.Union[bool, NoneType], ssl_validate_cert: typing.Union[bool,\n  NoneType] = True, display_name: typing.Union[str, NoneType], sync_schedule: typing.Union[int,\n  NoneType] = 60)'\nreturns: Dict\ndoc: 'Test Active Directory/LDAP connectability and credentials for the provided\n\n  authentication configuration details\n\n\n  Parameters\n\n  :details: Connection details for the AD/LDAP backend.\n\n\n  Returns a dictionary with at least one key, ``validation_passed``, for which the\n\n  value is ``True`` or ``False`` depending on the outcome of the validation routines.\n\n  If validation failed, an extra key, ``details`` is also included with an explanation\n\n  on what failed..'\nschema:\n  $ref: '#/definitions/TestAuthConfigSchema'\n  definitions:\n    TestAuthConfigSchema:\n      properties:\n        account_attr_name:\n          default: memberUid\n          description: 'The account attribute name to be used when searching for group\n            membership. Example: `({account_attr_name}={username})`'\n          title: Account Attribute Name\n          type: string\n        auth_bind_dn:\n          description: 'This is the DN to authenticate regular users. This setting\n            expects a `{{username}}` format string place holder to interpolate the\n            full DN.\n\n            For example, if user `John` is trying to authenticate and `auth_bind_dn`\n            is `cn={username},ou=Users,dc=example,dc=com`, the driver will try to\n            bind the user to the LDAP server using `cn=John,ou=Users,dc=example,dc=com`\n            as the bind DN.'\n          title: Auth Bind DN\n          type: string\n        auth_bind_dn_filter:\n          description: 'This is an LDAP filter to search for the user account in order\n            to find it''s DN which will then be used to authenticate. An example filter\n            is: `(&(objectclass=user)(sAMAccountName={{username}})(|(memberOf=CN=Core\n            Devs,OU=Groups,OU=Test Company HQ,DC=adtest,DC=com)(memberOf=UI Devs,OU=Groups,DC=adtest,DC=com)))`.\n            This would only return an account matching the provided username which\n            belonged to groups \"Core Devs\" or \"UI Devs\".'\n          title: User Search DN Filter\n          type: string\n        base_dn:\n          description: LDAP base DN for any search operations\n          title: Base DN\n          type: string\n        bind_dn:\n          description: The bind DN to authenticate when connecting to the LDAP server.\n            This setting will be used for all administrative tasks required by RaaS,\n            it will not be used to authenticate regular users. The driver will try\n            to bind regular users against LDAP using their own DN, see \"Auth Bind\n            DN\".\n          title: Bind DN\n          type: string\n        bind_pw:\n          description: The password to be used when trying to bind to LDAP using \"Bind\n            DN\"\n          format: secret\n          title: Bind Password\n          type: string\n        config_name:\n          description: The short authentication configuration name\n          title: Name\n          type: string\n        config_uuid:\n          description: The authentication configuration UUID\n          format: hidden\n          title: UUID\n          type: string\n        display_name:\n          description: The authentication configuration display name\n          title: Display Name\n          type: string\n        driver:\n          default: ldap\n          description: The authentication config driver to use. Only 'ldap' is allowed\n            as a value right now.\n          enum:\n          - ldap\n          enumNames: []\n          format: hidden\n          title: driver\n          type: string\n        group_attr_name:\n          default: cn\n          description: The group attribute name which will be used for the group name.\n            Considering a group DN like `cn=Managers,ou=Groups,dc=example,dc=com`,\n            this value should be `cn`.\n          title: Group Attribute Name\n          type: string\n        group_class:\n          default: posixGroup\n          description: 'The object class name to use when searching for groups. Example:\n            `(&(...)(objectClass={group_class}))`'\n          title: Group Class\n          type: string\n        group_member_is_dn:\n          default: true\n          description: Some directories, notably Active Directory, store the full\n            DN of group members instead of just the memberUid. Setting this flag to\n            True indicates group membership is determined by full DN.\n          title: Group Attribute Name\n          type: boolean\n        group_search_base_dn:\n          description: Search base for groups in the directory\n          title: Group Search DN\n          type: string\n        group_search_filter:\n          default: (objectClass=group)\n          description: The LDAP search string that will retrieve groups from the directory.  Usually\n            `(objectClass=group)`\n          title: Group Search Filter\n          type: string\n        group_search_scope:\n          default: LEVEL\n          description: How deep to search for groups in the directory. This is generally\n            set to singleLevel from the LDAP RFC 4520, this corresponds to `ldap3.LEVEL`\n            from the ldap3 library.\n          title: Group Search Scope\n          type: string\n        host:\n          description: The LDAP host to connect to\n          title: Host\n          type: string\n        name:\n          description: The short authentication configuration name\n          title: Name\n          type: string\n        person_class:\n          default: person\n          description: 'The object class name to use when searching for users. Example:\n            `(&(...)(objectClass={person_class}))`'\n          title: Person Object Class\n          type: string\n        port:\n          description: The LDAP port to connect to\n          exclusiveMaximum: true\n          exclusiveMinimum: true\n          format: integer\n          maximum: 65535\n          minimum: 1\n          title: Port\n          type: number\n        preview_config:\n          default: false\n          description: Use this backend for preview only, do not authenticate with\n            it.\n          title: Authentication Backend Preview\n          type: boolean\n        remote_uid_attr_name:\n          default: objectGUID\n          description: Most directories assign a UUID or GUID for each object in the\n            directory.  This is the name of the attribute that contains this ID.  For\n            Active Directory this is `objectGUID`, for OpenLDAP it is generally `entryUUID`.  For\n            FreeIPA it is `IpaUniqueId`\n          title: Name of directory-supplied unique ID\n          type: string\n        ssl_validate_cert:\n          default: true\n          description: When SSL is in use, certificates will be validated against\n            the system CA contents.\n          title: Validate SSL Certificate\n          type: boolean\n        sync_schedule:\n          default: 60\n          description: The number of minutes to sync the managed data with the authentication\n            backend.\n          exclusiveMinimum: true\n          format: integer\n          minimum: 1\n          title: Sync Scheduling\n          type: number\n        use_ssl:\n          default: false\n          description: Use SSL in the connection\n          title: Use SSL\n          type: boolean\n        user_search_base_dn:\n          description: Search base for users in the directory\n          title: User Search DN\n          type: string\n        user_search_filter:\n          default: (objectClass=person)\n          description: The LDAP search string that will retrieve users from the directory.  Usually\n            `(objectClass=person)`\n          title: User Search Filter\n          type: string\n        user_search_scope:\n          default: SUBTREE\n          description: How deep to search for users in the directory. This is generally\n            set to Base from the LDAP RFC 4520, this corresponds to `ldap3.BASE` from\n            the ldap3 library.\n          title: User Search Scope\n          type: string\n      required:\n      - account_attr_name\n      - base_dn\n      - bind_dn\n      - driver\n      - group_attr_name\n      - group_class\n      - host\n      - person_class\n      - port\n      type: object\nparameters:\n- - config_name\n- - driver\n- - host\n- - port\n- - bind_dn\n- - bind_pw\n- - base_dn\n- - person_class\n- - account_attr_name\n- - group_class\n- - group_attr_name\n- - remote_uid_attr_name\n- - preview_config\n  - false\n- - auth_bind_dn\n  - null\n- - auth_bind_dn_filter\n  - null\n- - use_ssl\n  - false\n- - ssl_validate_cert\n  - true\n- - display_name\n  - null\n- - sync_schedule\n  - 60"
                }, 
                "save_auth_config": {
                    "detailed": {
                        "doc": "Create or update the authentication configuration by the provided ``config_name``.\n\nParameters\n:config_name: Name of the auth configuration\n:details: Dictionary with details defining this authentication configuration.\n:skip_job_scheduling: If False, no scheduler jobs which maintain synchronization\n                            with the Active Directory/LDAP backend are created.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SaveAuthConfigSchema": {
                                    "required": [
                                        "account_attr_name", 
                                        "base_dn", 
                                        "bind_dn", 
                                        "driver", 
                                        "group_attr_name", 
                                        "group_class", 
                                        "host", 
                                        "person_class", 
                                        "port", 
                                        "skip_job_scheduling"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "ssl_validate_cert": {
                                            "default": true, 
                                            "type": "boolean", 
                                            "description": "When SSL is in use, certificates will be validated against the system CA contents.", 
                                            "title": "Validate SSL Certificate"
                                        }, 
                                        "group_class": {
                                            "default": "posixGroup", 
                                            "type": "string", 
                                            "description": "The object class name to use when searching for groups. Example: `(&(...)(objectClass={group_class}))`", 
                                            "title": "Group Class"
                                        }, 
                                        "group_search_filter": {
                                            "default": "(objectClass=group)", 
                                            "type": "string", 
                                            "description": "The LDAP search string that will retrieve groups from the directory.  Usually `(objectClass=group)`", 
                                            "title": "Group Search Filter"
                                        }, 
                                        "base_dn": {
                                            "type": "string", 
                                            "description": "LDAP base DN for any search operations", 
                                            "title": "Base DN"
                                        }, 
                                        "bind_pw": {
                                            "format": "secret", 
                                            "type": "string", 
                                            "description": "The password to be used when trying to bind to LDAP using \"Bind DN\"", 
                                            "title": "Bind Password"
                                        }, 
                                        "use_ssl": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Use SSL in the connection", 
                                            "title": "Use SSL"
                                        }, 
                                        "config_uuid": {
                                            "format": "hidden", 
                                            "type": "string", 
                                            "description": "The authentication configuration UUID", 
                                            "title": "UUID"
                                        }, 
                                        "port": {
                                            "exclusiveMaximum": true, 
                                            "description": "The LDAP port to connect to", 
                                            "title": "Port", 
                                            "exclusiveMinimum": true, 
                                            "format": "integer", 
                                            "maximum": 65535, 
                                            "minimum": 1, 
                                            "type": "number"
                                        }, 
                                        "display_name": {
                                            "type": "string", 
                                            "description": "The authentication configuration display name", 
                                            "title": "Display Name"
                                        }, 
                                        "auth_bind_dn": {
                                            "type": "string", 
                                            "description": "This is the DN to authenticate regular users. This setting expects a `{{username}}` format string place holder to interpolate the full DN.\nFor example, if user `John` is trying to authenticate and `auth_bind_dn` is `cn={username},ou=Users,dc=example,dc=com`, the driver will try to bind the user to the LDAP server using `cn=John,ou=Users,dc=example,dc=com` as the bind DN.", 
                                            "title": "Auth Bind DN"
                                        }, 
                                        "bind_dn": {
                                            "type": "string", 
                                            "description": "The bind DN to authenticate when connecting to the LDAP server. This setting will be used for all administrative tasks required by RaaS, it will not be used to authenticate regular users. The driver will try to bind regular users against LDAP using their own DN, see \"Auth Bind DN\".", 
                                            "title": "Bind DN"
                                        }, 
                                        "preview_config": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Use this backend for preview only, do not authenticate with it.", 
                                            "title": "Authentication Backend Preview"
                                        }, 
                                        "user_search_filter": {
                                            "default": "(objectClass=person)", 
                                            "type": "string", 
                                            "description": "The LDAP search string that will retrieve users from the directory.  Usually `(objectClass=person)`", 
                                            "title": "User Search Filter"
                                        }, 
                                        "group_member_is_dn": {
                                            "default": true, 
                                            "type": "boolean", 
                                            "description": "Some directories, notably Active Directory, store the full DN of group members instead of just the memberUid. Setting this flag to True indicates group membership is determined by full DN.", 
                                            "title": "Group Attribute Name"
                                        }, 
                                        "account_attr_name": {
                                            "default": "memberUid", 
                                            "type": "string", 
                                            "description": "The account attribute name to be used when searching for group membership. Example: `({account_attr_name}={username})`", 
                                            "title": "Account Attribute Name"
                                        }, 
                                        "driver": {
                                            "description": "The authentication config driver to use. Only 'ldap' is allowed as a value right now.", 
                                            "title": "driver", 
                                            "default": "ldap", 
                                            "format": "hidden", 
                                            "enum": [
                                                "ldap"
                                            ], 
                                            "enumNames": [], 
                                            "type": "string"
                                        }, 
                                        "host": {
                                            "type": "string", 
                                            "description": "The LDAP host to connect to", 
                                            "title": "Host"
                                        }, 
                                        "sync_schedule": {
                                            "description": "The number of minutes to sync the managed data with the authentication backend.", 
                                            "title": "Sync Scheduling", 
                                            "default": 60, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 1, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "remote_uid_attr_name": {
                                            "default": "objectGUID", 
                                            "type": "string", 
                                            "description": "Most directories assign a UUID or GUID for each object in the directory.  This is the name of the attribute that contains this ID.  For Active Directory this is `objectGUID`, for OpenLDAP it is generally `entryUUID`.  For FreeIPA it is `IpaUniqueId`", 
                                            "title": "Name of directory-supplied unique ID"
                                        }, 
                                        "skip_job_scheduling": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "If True, no scheduler jobs which maintain synchronicity with the Active Directory/LDAP backend are created", 
                                            "title": "Skip Job Scheduling"
                                        }, 
                                        "auth_bind_dn_filter": {
                                            "type": "string", 
                                            "description": "This is an LDAP filter to search for the user account in order to find it's DN which will then be used to authenticate. An example filter is: `(&(objectclass=user)(sAMAccountName={{username}})(|(memberOf=CN=Core Devs,OU=Groups,OU=Test Company HQ,DC=adtest,DC=com)(memberOf=UI Devs,OU=Groups,DC=adtest,DC=com)))`. This would only return an account matching the provided username which belonged to groups \"Core Devs\" or \"UI Devs\".", 
                                            "title": "User Search DN Filter"
                                        }, 
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The short authentication configuration name", 
                                            "title": "Name"
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "The short authentication configuration name", 
                                            "title": "Name"
                                        }, 
                                        "person_class": {
                                            "default": "person", 
                                            "type": "string", 
                                            "description": "The object class name to use when searching for users. Example: `(&(...)(objectClass={person_class}))`", 
                                            "title": "Person Object Class"
                                        }, 
                                        "user_search_scope": {
                                            "default": "SUBTREE", 
                                            "type": "string", 
                                            "description": "How deep to search for users in the directory. This is generally set to Base from the LDAP RFC 4520, this corresponds to `ldap3.BASE` from the ldap3 library.", 
                                            "title": "User Search Scope"
                                        }, 
                                        "user_search_base_dn": {
                                            "type": "string", 
                                            "description": "Search base for users in the directory", 
                                            "title": "User Search DN"
                                        }, 
                                        "group_attr_name": {
                                            "default": "cn", 
                                            "type": "string", 
                                            "description": "The group attribute name which will be used for the group name. Considering a group DN like `cn=Managers,ou=Groups,dc=example,dc=com`, this value should be `cn`.", 
                                            "title": "Group Attribute Name"
                                        }, 
                                        "group_search_base_dn": {
                                            "type": "string", 
                                            "description": "Search base for groups in the directory", 
                                            "title": "Group Search DN"
                                        }, 
                                        "group_search_scope": {
                                            "default": "LEVEL", 
                                            "type": "string", 
                                            "description": "How deep to search for groups in the directory. This is generally set to singleLevel from the LDAP RFC 4520, this corresponds to `ldap3.LEVEL` from the ldap3 library.", 
                                            "title": "Group Search Scope"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SaveAuthConfigSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name"
                            ], 
                            [
                                "driver"
                            ], 
                            [
                                "host"
                            ], 
                            [
                                "port"
                            ], 
                            [
                                "bind_dn"
                            ], 
                            [
                                "bind_pw"
                            ], 
                            [
                                "base_dn"
                            ], 
                            [
                                "person_class"
                            ], 
                            [
                                "user_search_base_dn", 
                                null
                            ], 
                            [
                                "user_search_scope", 
                                null
                            ], 
                            [
                                "user_search_filter", 
                                null
                            ], 
                            [
                                "account_attr_name", 
                                "sAMAccountName"
                            ], 
                            [
                                "group_class", 
                                "group"
                            ], 
                            [
                                "group_search_base_dn", 
                                null
                            ], 
                            [
                                "group_search_scope", 
                                null
                            ], 
                            [
                                "group_search_filter", 
                                null
                            ], 
                            [
                                "group_attr_name", 
                                "memberOf"
                            ], 
                            [
                                "group_member_is_dn", 
                                true
                            ], 
                            [
                                "remote_uid_attr_name", 
                                null
                            ], 
                            [
                                "preview_config", 
                                false
                            ], 
                            [
                                "auth_bind_dn", 
                                null
                            ], 
                            [
                                "auth_bind_dn_filter", 
                                null
                            ], 
                            [
                                "use_ssl", 
                                false
                            ], 
                            [
                                "ssl_validate_cert", 
                                true
                            ], 
                            [
                                "display_name", 
                                null
                            ], 
                            [
                                "sync_schedule", 
                                60
                            ], 
                            [
                                "config_uuid", 
                                null
                            ], 
                            [
                                "skip_job_scheduling", 
                                false
                            ]
                        ], 
                        "signature": "save_auth_config(config_name: 'unicode', driver: 'unicode', host: 'unicode', port: 'int', bind_dn: 'unicode', bind_pw: 'unicode', base_dn: 'unicode', person_class: 'unicode', user_search_base_dn: typing.Union[str, NoneType], user_search_scope: typing.Union[str, NoneType], user_search_filter: typing.Union[str, NoneType], account_attr_name: 'unicode' = sAMAccountName, group_class: 'unicode' = group, group_search_base_dn: typing.Union[str, NoneType], group_search_scope: typing.Union[str, NoneType], group_search_filter: typing.Union[str, NoneType], group_attr_name: 'unicode' = memberOf, group_member_is_dn: typing.Union[bool, NoneType] = True, remote_uid_attr_name: typing.Union[str, NoneType], preview_config: bool, auth_bind_dn: typing.Union[str, NoneType], auth_bind_dn_filter: typing.Union[str, NoneType], use_ssl: typing.Union[bool, NoneType], ssl_validate_cert: typing.Union[bool, NoneType] = True, display_name: typing.Union[str, NoneType], sync_schedule: typing.Union[int, NoneType] = 60, config_uuid: typing.Union[uuid.UUID, NoneType], skip_job_scheduling: bool)"
                    }, 
                    "formatted": "signature: 'save_auth_config(config_name: ''unicode'', driver: ''unicode'', host:\n  ''unicode'', port: ''int'', bind_dn: ''unicode'', bind_pw: ''unicode'', base_dn:\n  ''unicode'', person_class: ''unicode'', user_search_base_dn: typing.Union[str, NoneType],\n  user_search_scope: typing.Union[str, NoneType], user_search_filter: typing.Union[str,\n  NoneType], account_attr_name: ''unicode'' = sAMAccountName, group_class: ''unicode''\n  = group, group_search_base_dn: typing.Union[str, NoneType], group_search_scope:\n  typing.Union[str, NoneType], group_search_filter: typing.Union[str, NoneType], group_attr_name:\n  ''unicode'' = memberOf, group_member_is_dn: typing.Union[bool, NoneType] = True,\n  remote_uid_attr_name: typing.Union[str, NoneType], preview_config: bool, auth_bind_dn:\n  typing.Union[str, NoneType], auth_bind_dn_filter: typing.Union[str, NoneType], use_ssl:\n  typing.Union[bool, NoneType], ssl_validate_cert: typing.Union[bool, NoneType] =\n  True, display_name: typing.Union[str, NoneType], sync_schedule: typing.Union[int,\n  NoneType] = 60, config_uuid: typing.Union[uuid.UUID, NoneType], skip_job_scheduling:\n  bool)'\nreturns: None\ndoc: \"Create or update the authentication configuration by the provided ``config_name``.\\n\\\n  \\nParameters\\n:config_name: Name of the auth configuration\\n:details: Dictionary\\\n  \\ with details defining this authentication configuration.\\n:skip_job_scheduling:\\\n  \\ If False, no scheduler jobs which maintain synchronization\\n                 \\\n  \\           with the Active Directory/LDAP backend are created.\"\nschema:\n  $ref: '#/definitions/SaveAuthConfigSchema'\n  definitions:\n    SaveAuthConfigSchema:\n      properties:\n        account_attr_name:\n          default: memberUid\n          description: 'The account attribute name to be used when searching for group\n            membership. Example: `({account_attr_name}={username})`'\n          title: Account Attribute Name\n          type: string\n        auth_bind_dn:\n          description: 'This is the DN to authenticate regular users. This setting\n            expects a `{{username}}` format string place holder to interpolate the\n            full DN.\n\n            For example, if user `John` is trying to authenticate and `auth_bind_dn`\n            is `cn={username},ou=Users,dc=example,dc=com`, the driver will try to\n            bind the user to the LDAP server using `cn=John,ou=Users,dc=example,dc=com`\n            as the bind DN.'\n          title: Auth Bind DN\n          type: string\n        auth_bind_dn_filter:\n          description: 'This is an LDAP filter to search for the user account in order\n            to find it''s DN which will then be used to authenticate. An example filter\n            is: `(&(objectclass=user)(sAMAccountName={{username}})(|(memberOf=CN=Core\n            Devs,OU=Groups,OU=Test Company HQ,DC=adtest,DC=com)(memberOf=UI Devs,OU=Groups,DC=adtest,DC=com)))`.\n            This would only return an account matching the provided username which\n            belonged to groups \"Core Devs\" or \"UI Devs\".'\n          title: User Search DN Filter\n          type: string\n        base_dn:\n          description: LDAP base DN for any search operations\n          title: Base DN\n          type: string\n        bind_dn:\n          description: The bind DN to authenticate when connecting to the LDAP server.\n            This setting will be used for all administrative tasks required by RaaS,\n            it will not be used to authenticate regular users. The driver will try\n            to bind regular users against LDAP using their own DN, see \"Auth Bind\n            DN\".\n          title: Bind DN\n          type: string\n        bind_pw:\n          description: The password to be used when trying to bind to LDAP using \"Bind\n            DN\"\n          format: secret\n          title: Bind Password\n          type: string\n        config_name:\n          description: The short authentication configuration name\n          title: Name\n          type: string\n        config_uuid:\n          description: The authentication configuration UUID\n          format: hidden\n          title: UUID\n          type: string\n        display_name:\n          description: The authentication configuration display name\n          title: Display Name\n          type: string\n        driver:\n          default: ldap\n          description: The authentication config driver to use. Only 'ldap' is allowed\n            as a value right now.\n          enum:\n          - ldap\n          enumNames: []\n          format: hidden\n          title: driver\n          type: string\n        group_attr_name:\n          default: cn\n          description: The group attribute name which will be used for the group name.\n            Considering a group DN like `cn=Managers,ou=Groups,dc=example,dc=com`,\n            this value should be `cn`.\n          title: Group Attribute Name\n          type: string\n        group_class:\n          default: posixGroup\n          description: 'The object class name to use when searching for groups. Example:\n            `(&(...)(objectClass={group_class}))`'\n          title: Group Class\n          type: string\n        group_member_is_dn:\n          default: true\n          description: Some directories, notably Active Directory, store the full\n            DN of group members instead of just the memberUid. Setting this flag to\n            True indicates group membership is determined by full DN.\n          title: Group Attribute Name\n          type: boolean\n        group_search_base_dn:\n          description: Search base for groups in the directory\n          title: Group Search DN\n          type: string\n        group_search_filter:\n          default: (objectClass=group)\n          description: The LDAP search string that will retrieve groups from the directory.  Usually\n            `(objectClass=group)`\n          title: Group Search Filter\n          type: string\n        group_search_scope:\n          default: LEVEL\n          description: How deep to search for groups in the directory. This is generally\n            set to singleLevel from the LDAP RFC 4520, this corresponds to `ldap3.LEVEL`\n            from the ldap3 library.\n          title: Group Search Scope\n          type: string\n        host:\n          description: The LDAP host to connect to\n          title: Host\n          type: string\n        name:\n          description: The short authentication configuration name\n          title: Name\n          type: string\n        person_class:\n          default: person\n          description: 'The object class name to use when searching for users. Example:\n            `(&(...)(objectClass={person_class}))`'\n          title: Person Object Class\n          type: string\n        port:\n          description: The LDAP port to connect to\n          exclusiveMaximum: true\n          exclusiveMinimum: true\n          format: integer\n          maximum: 65535\n          minimum: 1\n          title: Port\n          type: number\n        preview_config:\n          default: false\n          description: Use this backend for preview only, do not authenticate with\n            it.\n          title: Authentication Backend Preview\n          type: boolean\n        remote_uid_attr_name:\n          default: objectGUID\n          description: Most directories assign a UUID or GUID for each object in the\n            directory.  This is the name of the attribute that contains this ID.  For\n            Active Directory this is `objectGUID`, for OpenLDAP it is generally `entryUUID`.  For\n            FreeIPA it is `IpaUniqueId`\n          title: Name of directory-supplied unique ID\n          type: string\n        skip_job_scheduling:\n          default: false\n          description: If True, no scheduler jobs which maintain synchronicity with\n            the Active Directory/LDAP backend are created\n          title: Skip Job Scheduling\n          type: boolean\n        ssl_validate_cert:\n          default: true\n          description: When SSL is in use, certificates will be validated against\n            the system CA contents.\n          title: Validate SSL Certificate\n          type: boolean\n        sync_schedule:\n          default: 60\n          description: The number of minutes to sync the managed data with the authentication\n            backend.\n          exclusiveMinimum: true\n          format: integer\n          minimum: 1\n          title: Sync Scheduling\n          type: number\n        use_ssl:\n          default: false\n          description: Use SSL in the connection\n          title: Use SSL\n          type: boolean\n        user_search_base_dn:\n          description: Search base for users in the directory\n          title: User Search DN\n          type: string\n        user_search_filter:\n          default: (objectClass=person)\n          description: The LDAP search string that will retrieve users from the directory.  Usually\n            `(objectClass=person)`\n          title: User Search Filter\n          type: string\n        user_search_scope:\n          default: SUBTREE\n          description: How deep to search for users in the directory. This is generally\n            set to Base from the LDAP RFC 4520, this corresponds to `ldap3.BASE` from\n            the ldap3 library.\n          title: User Search Scope\n          type: string\n      required:\n      - account_attr_name\n      - base_dn\n      - bind_dn\n      - driver\n      - group_attr_name\n      - group_class\n      - host\n      - person_class\n      - port\n      - skip_job_scheduling\n      type: object\nparameters:\n- - config_name\n- - driver\n- - host\n- - port\n- - bind_dn\n- - bind_pw\n- - base_dn\n- - person_class\n- - user_search_base_dn\n  - null\n- - user_search_scope\n  - null\n- - user_search_filter\n  - null\n- - account_attr_name\n  - sAMAccountName\n- - group_class\n  - group\n- - group_search_base_dn\n  - null\n- - group_search_scope\n  - null\n- - group_search_filter\n  - null\n- - group_attr_name\n  - memberOf\n- - group_member_is_dn\n  - true\n- - remote_uid_attr_name\n  - null\n- - preview_config\n  - false\n- - auth_bind_dn\n  - null\n- - auth_bind_dn_filter\n  - null\n- - use_ssl\n  - false\n- - ssl_validate_cert\n  - true\n- - display_name\n  - null\n- - sync_schedule\n  - 60\n- - config_uuid\n  - null\n- - skip_job_scheduling\n  - false"
                }, 
                "__doc__": "RaaS settings RPC handler", 
                "get_directory_preview_status": {
                    "detailed": {
                        "doc": "Return a status for the background LDAP query job.", 
                        "parameters": [
                            [
                                "config_name"
                            ], 
                            [
                                "preview_type", 
                                "user"
                            ], 
                            [
                                "task_id", 
                                null
                            ]
                        ], 
                        "signature": "get_directory_preview_status(config_name: 'unicode', preview_type: 'unicode' = user, task_id: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'get_directory_preview_status(config_name: ''unicode'', preview_type: ''unicode''\n  = user, task_id: typing.Union[str, NoneType])'\ndoc: Return a status for the background LDAP query job.\nparameters:\n- - config_name\n- - preview_type\n  - user\n- - task_id\n  - null"
                }, 
                "sync_auth_config": {
                    "detailed": {
                        "doc": "Get updated information from the LDAP backend on users currently in use in\nSSE.\n\nParameters\n:config_name: Name of the configuration to synchronize.", 
                        "returns": "List", 
                        "schema": {
                            "definitions": {
                                "SyncAuthConfigSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "config_name": {
                                            "type": "string", 
                                            "description": "The short authentication configuration name", 
                                            "title": "Name"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SyncAuthConfigSchema"
                        }, 
                        "parameters": [
                            [
                                "config_name"
                            ]
                        ], 
                        "signature": "sync_auth_config(config_name: 'unicode')"
                    }, 
                    "formatted": "signature: 'sync_auth_config(config_name: ''unicode'')'\nreturns: List\ndoc: 'Get updated information from the LDAP backend on users currently in use in\n\n  SSE.\n\n\n  Parameters\n\n  :config_name: Name of the configuration to synchronize.'\nschema:\n  $ref: '#/definitions/SyncAuthConfigSchema'\n  definitions:\n    SyncAuthConfigSchema:\n      properties:\n        config_name:\n          description: The short authentication configuration name\n          title: Name\n          type: string\n      required: []\n      type: object\nparameters:\n- - config_name"
                }
            }, 
            "admin": {
                "trim_database": {
                    "detailed": {
                        "doc": "Trim records from various database tables.\nReturns number of records of each type that would be deleted from the\ndatabase.  When ``test=True`` these records will not be deleted.  If\n``test`` is ``None`` or ``False`` this call will delete the records as\nwell.\n\nParameters\n:audit: Number of days of data from the audit trail tables to retain.\n:events: Number of days of data from the event tables to retain.\n:jobs: Number of days of data from the jobs tables to retain.\n:schedule: Number of days of schedule history to retain.\n:test: When test=True no records will be deleted.\n\nReturns\n^^^^^^^\nDictionary with audit, events, jobs, and/or schedule keys, matching the\narguments passed to the call.  Each key is associated with the number of\ncorresponding records removed from the database, except ``jobs``, which is\na dictionary containing the number of commands, minions-expected, returns,\nand jids entries that were deleted.\n\nThese results are also logged in the RaaS log at ``info`` level.\n\nExample using the Python client\n\n.. code-block:: python\n\n    from sseapiclient.tornado import SyncClient\n    host = 'http://localhost'\n    user = 'root'\n    password = 'salt'\n    client = SyncClient.connect(host, user, password)\n    client.api.admin.trim_database(\n        audit=30, events=30, jobs=30, schedule=30, test=True)\n\nAdditional connect arguments:\nIf you have a large dataset and you want to wait longer than 15 seconds\n(default timeout) for the request.\n``request_timeout=None``\n\nNeeded sometimes if your SSL Certificate is self signed.\n``ssl_validate_cert=False``\n\nExample response\n\n.. code-block:: python\n\n    RPCResponse(\n      warnings=[],\n      error=None,\n      riq=139727129350384,\n      ret={\n        \"test\": True,\n        \"jobs\": {\n          \"commands\": 5394,\n          \"minions-expected\": 231,\n          \"returns\": 4403,\n          \"jids\": 299\n        },\n        \"events\": 30,\n        \"audit\": 123,\n        \"schedule\": 48\n      }\n    )", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "TrimDatabaseSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "audit": {
                                            "description": "Number of days before today to keep in database.", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "audit", 
                                            "minimum": -1, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "test": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Perform a non destructive dry-run", 
                                            "title": "test"
                                        }, 
                                        "jobs": {
                                            "description": "Number of days before today to keep in database.", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "jobs", 
                                            "minimum": -1, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "events": {
                                            "description": "Number of days before today to keep in database.", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "events", 
                                            "minimum": -1, 
                                            "exclusiveMinimum": true
                                        }, 
                                        "schedule": {
                                            "description": "Number of days before today to keep in database.", 
                                            "format": "integer", 
                                            "type": "number", 
                                            "title": "schedule", 
                                            "minimum": -1, 
                                            "exclusiveMinimum": true
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/TrimDatabaseSchema"
                        }, 
                        "parameters": [
                            [
                                "audit", 
                                null
                            ], 
                            [
                                "events", 
                                null
                            ], 
                            [
                                "jobs", 
                                null
                            ], 
                            [
                                "schedule", 
                                null
                            ], 
                            [
                                "test", 
                                false
                            ]
                        ], 
                        "signature": "trim_database(audit: typing.Union[int, NoneType], events: typing.Union[int, NoneType], jobs: typing.Union[int, NoneType], schedule: typing.Union[int, NoneType], test: bool)"
                    }, 
                    "formatted": "signature: 'trim_database(audit: typing.Union[int, NoneType], events: typing.Union[int,\n  NoneType], jobs: typing.Union[int, NoneType], schedule: typing.Union[int, NoneType],\n  test: bool)'\nreturns: Dict\ndoc: \"Trim records from various database tables.\\nReturns number of records of each\\\n  \\ type that would be deleted from the\\ndatabase.  When ``test=True`` these records\\\n  \\ will not be deleted.  If\\n``test`` is ``None`` or ``False`` this call will delete\\\n  \\ the records as\\nwell.\\n\\nParameters\\n:audit: Number of days of data from the audit\\\n  \\ trail tables to retain.\\n:events: Number of days of data from the event tables\\\n  \\ to retain.\\n:jobs: Number of days of data from the jobs tables to retain.\\n:schedule:\\\n  \\ Number of days of schedule history to retain.\\n:test: When test=True no records\\\n  \\ will be deleted.\\n\\nReturns\\n^^^^^^^\\nDictionary with audit, events, jobs, and/or\\\n  \\ schedule keys, matching the\\narguments passed to the call.  Each key is associated\\\n  \\ with the number of\\ncorresponding records removed from the database, except ``jobs``,\\\n  \\ which is\\na dictionary containing the number of commands, minions-expected, returns,\\n\\\n  and jids entries that were deleted.\\n\\nThese results are also logged in the RaaS\\\n  \\ log at ``info`` level.\\n\\nExample using the Python client\\n\\n.. code-block:: python\\n\\\n  \\n    from sseapiclient.tornado import SyncClient\\n    host = 'http://localhost'\\n\\\n  \\    user = 'root'\\n    password = 'salt'\\n    client = SyncClient.connect(host,\\\n  \\ user, password)\\n    client.api.admin.trim_database(\\n        audit=30, events=30,\\\n  \\ jobs=30, schedule=30, test=True)\\n\\nAdditional connect arguments:\\nIf you have\\\n  \\ a large dataset and you want to wait longer than 15 seconds\\n(default timeout)\\\n  \\ for the request.\\n``request_timeout=None``\\n\\nNeeded sometimes if your SSL Certificate\\\n  \\ is self signed.\\n``ssl_validate_cert=False``\\n\\nExample response\\n\\n.. code-block::\\\n  \\ python\\n\\n    RPCResponse(\\n      warnings=[],\\n      error=None,\\n      riq=139727129350384,\\n\\\n  \\      ret={\\n        \\\"test\\\": True,\\n        \\\"jobs\\\": {\\n          \\\"commands\\\"\\\n  : 5394,\\n          \\\"minions-expected\\\": 231,\\n          \\\"returns\\\": 4403,\\n  \\\n  \\        \\\"jids\\\": 299\\n        },\\n        \\\"events\\\": 30,\\n        \\\"audit\\\":\\\n  \\ 123,\\n        \\\"schedule\\\": 48\\n      }\\n    )\"\nschema:\n  $ref: '#/definitions/TrimDatabaseSchema'\n  definitions:\n    TrimDatabaseSchema:\n      properties:\n        audit:\n          description: Number of days before today to keep in database.\n          exclusiveMinimum: true\n          format: integer\n          minimum: -1\n          title: audit\n          type: number\n        events:\n          description: Number of days before today to keep in database.\n          exclusiveMinimum: true\n          format: integer\n          minimum: -1\n          title: events\n          type: number\n        jobs:\n          description: Number of days before today to keep in database.\n          exclusiveMinimum: true\n          format: integer\n          minimum: -1\n          title: jobs\n          type: number\n        schedule:\n          description: Number of days before today to keep in database.\n          exclusiveMinimum: true\n          format: integer\n          minimum: -1\n          title: schedule\n          type: number\n        test:\n          default: false\n          description: Perform a non destructive dry-run\n          title: test\n          type: boolean\n      required: []\n      type: object\nparameters:\n- - audit\n  - null\n- - events\n  - null\n- - jobs\n  - null\n- - schedule\n  - null\n- - test\n  - false"
                }, 
                "__doc__": "Admin RPC endpoint"
            }, 
            "pillar": {
                "get_pillar_access": {
                    "detailed": {
                        "doc": "Get the access metadata for a pillar entry.\n\nParameters\n:pillar_uuid: Retrieve metadata for pillar matching this UUID.", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetPillarAccessSchema": {
                                    "required": [
                                        "pillar_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "pillar_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Pillar UUID", 
                                            "title": "pillar_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetPillarAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "pillar_uuid"
                            ]
                        ], 
                        "signature": "get_pillar_access(pillar_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'get_pillar_access(pillar_uuid: UUID)'\nreturns: Dict\ndoc: 'Get the access metadata for a pillar entry.\n\n\n  Parameters\n\n  :pillar_uuid: Retrieve metadata for pillar matching this UUID.'\nschema:\n  $ref: '#/definitions/GetPillarAccessSchema'\n  definitions:\n    GetPillarAccessSchema:\n      properties:\n        pillar_uuid:\n          description: Pillar UUID\n          format: uuid\n          title: pillar_uuid\n          type: string\n      required:\n      - pillar_uuid\n      type: object\nparameters:\n- - pillar_uuid"
                }, 
                "get_pillars": {
                    "detailed": {
                        "doc": "Get the data for the given pillar.  See :ref:`pillar` for more information.\n\nParameters\n:param pillar_uuid: UUID of the pillar structure desired.\n:param name: name for this particular pillar entry\n\nThe return payload is a dict with the following elements:\n\n.. code-block:: python\n\n    {\n        'count': 100,     # total job count\n        'limit': 50,  # results count\n        'results': [...]  # jobs\n    }", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetPillarsSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "reverse": {
                                            "type": "boolean", 
                                            "description": "Sort ascending (False), or descending (True)", 
                                            "title": "reverse"
                                        }, 
                                        "pillar_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Pillar UUID", 
                                            "title": "pillar_uuid"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "name"
                                            ], 
                                            "type": "string", 
                                            "description": "Field to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "Pillar name", 
                                            "title": "name"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetPillarsSchema"
                        }, 
                        "parameters": [
                            [
                                "pillar_uuid", 
                                null
                            ], 
                            [
                                "name", 
                                null
                            ], 
                            [
                                "sort_by", 
                                null
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "limit", 
                                50
                            ], 
                            [
                                "page", 
                                0
                            ]
                        ], 
                        "signature": "get_pillars(pillar_uuid: typing.Union[uuid.UUID, NoneType], name: typing.Union[str, NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType], limit: typing.Union[int, NoneType] = 50, page: typing.Union[int, NoneType])"
                    }, 
                    "formatted": "signature: 'get_pillars(pillar_uuid: typing.Union[uuid.UUID, NoneType], name: typing.Union[str,\n  NoneType], sort_by: typing.Union[str, NoneType], reverse: typing.Union[bool, NoneType],\n  limit: typing.Union[int, NoneType] = 50, page: typing.Union[int, NoneType])'\nreturns: Dict\ndoc: \"Get the data for the given pillar.  See :ref:`pillar` for more information.\\n\\\n  \\nParameters\\n:param pillar_uuid: UUID of the pillar structure desired.\\n:param\\\n  \\ name: name for this particular pillar entry\\n\\nThe return payload is a dict with\\\n  \\ the following elements:\\n\\n.. code-block:: python\\n\\n    {\\n        'count': 100,\\\n  \\     # total job count\\n        'limit': 50,  # results count\\n        'results':\\\n  \\ [...]  # jobs\\n    }\"\nschema:\n  $ref: '#/definitions/GetPillarsSchema'\n  definitions:\n    GetPillarsSchema:\n      properties:\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        name:\n          description: Pillar name\n          title: name\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        pillar_uuid:\n          description: Pillar UUID\n          format: uuid\n          title: pillar_uuid\n          type: string\n        reverse:\n          description: Sort ascending (False), or descending (True)\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Field to sort by\n          enum:\n          - name\n          enumNames: []\n          title: sort_by\n          type: string\n      required: []\n      type: object\nparameters:\n- - pillar_uuid\n  - null\n- - name\n  - null\n- - sort_by\n  - null\n- - reverse\n  - false\n- - limit\n  - 50\n- - page\n  - 0"
                }, 
                "delete_pillar": {
                    "detailed": {
                        "doc": "Delete pillar for the given UUID.\n\nParameters\n:pillar_uuid: UUID of pillar to delete.", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "DeletePillarSchema": {
                                    "required": [
                                        "pillar_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "pillar_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Pillar UUID", 
                                            "title": "pillar_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeletePillarSchema"
                        }, 
                        "parameters": [
                            [
                                "pillar_uuid"
                            ]
                        ], 
                        "signature": "delete_pillar(pillar_uuid: UUID)"
                    }, 
                    "formatted": "signature: 'delete_pillar(pillar_uuid: UUID)'\nreturns: None\ndoc: 'Delete pillar for the given UUID.\n\n\n  Parameters\n\n  :pillar_uuid: UUID of pillar to delete.'\nschema:\n  $ref: '#/definitions/DeletePillarSchema'\n  definitions:\n    DeletePillarSchema:\n      properties:\n        pillar_uuid:\n          description: Pillar UUID\n          format: uuid\n          title: pillar_uuid\n          type: string\n      required:\n      - pillar_uuid\n      type: object\nparameters:\n- - pillar_uuid"
                }, 
                "save_pillar_access": {
                    "detailed": {
                        "doc": "Save the access metadata for a target group.\n\nParameters\n:pillar_uuid: Save metadata for pillar matching this UUID.\n:access_payload: Dictionary containing role names as keys and a list of allowed\n                 access types as values", 
                        "returns": "None", 
                        "schema": {
                            "definitions": {
                                "SavePillarAccessSchema": {
                                    "required": [
                                        "access_payload", 
                                        "pillar_uuid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "pillar_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Pillar UUID", 
                                            "title": "pillar_uuid"
                                        }, 
                                        "access_payload": {
                                            "type": "object", 
                                            "description": "Dictionary containing access data for a resource. The keys need to be valid role names. The values need to be valid access permissions", 
                                            "title": "access_payload"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SavePillarAccessSchema"
                        }, 
                        "parameters": [
                            [
                                "pillar_uuid"
                            ], 
                            [
                                "access_payload"
                            ]
                        ], 
                        "signature": "save_pillar_access(pillar_uuid: UUID, access_payload: Dict)"
                    }, 
                    "formatted": "signature: 'save_pillar_access(pillar_uuid: UUID, access_payload: Dict)'\nreturns: None\ndoc: \"Save the access metadata for a target group.\\n\\nParameters\\n:pillar_uuid: Save\\\n  \\ metadata for pillar matching this UUID.\\n:access_payload: Dictionary containing\\\n  \\ role names as keys and a list of allowed\\n                 access types as values\"\nschema:\n  $ref: '#/definitions/SavePillarAccessSchema'\n  definitions:\n    SavePillarAccessSchema:\n      properties:\n        access_payload:\n          description: Dictionary containing access data for a resource. The keys\n            need to be valid role names. The values need to be valid access permissions\n          title: access_payload\n          type: object\n        pillar_uuid:\n          description: Pillar UUID\n          format: uuid\n          title: pillar_uuid\n          type: string\n      required:\n      - access_payload\n      - pillar_uuid\n      type: object\nparameters:\n- - pillar_uuid\n- - access_payload"
                }, 
                "save_pillar": {
                    "detailed": {
                        "doc": "Set data in the requested pillar.  See :ref:`pillar` for more information.\n\nParameters\n:pillar: Data structure to save for this pillar.\n:pillar_type: Type of pillar\n:pillar_uuid: UUID for pillar--if blank a new one will be generated\n:name: Name for this particular pillar entry\n:desc: Text describing this pillar entry.", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "SavePillarSchema": {
                                    "required": [
                                        "name", 
                                        "pillar", 
                                        "pillar_type"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "pillar_type": {
                                            "type": "string", 
                                            "description": "Pillar type", 
                                            "title": "pillar_type"
                                        }, 
                                        "pillar_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Pillar UUID", 
                                            "title": "pillar_uuid"
                                        }, 
                                        "pillar": {
                                            "type": "object", 
                                            "description": "Pillar contents", 
                                            "title": "pillar"
                                        }, 
                                        "name": {
                                            "type": "string", 
                                            "description": "Pillar name", 
                                            "title": "name"
                                        }, 
                                        "desc": {
                                            "type": "string", 
                                            "description": "Pillar description", 
                                            "title": "desc"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SavePillarSchema"
                        }, 
                        "parameters": [
                            [
                                "pillar"
                            ], 
                            [
                                "pillar_type"
                            ], 
                            [
                                "pillar_uuid", 
                                null
                            ], 
                            [
                                "name", 
                                null
                            ], 
                            [
                                "desc", 
                                null
                            ]
                        ], 
                        "signature": "save_pillar(pillar: Dict, pillar_type: 'unicode', pillar_uuid: typing.Union[uuid.UUID, NoneType], name: typing.Union[str, NoneType], desc: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'save_pillar(pillar: Dict, pillar_type: ''unicode'', pillar_uuid: typing.Union[uuid.UUID,\n  NoneType], name: typing.Union[str, NoneType], desc: typing.Union[str, NoneType])'\nreturns: '''unicode'''\ndoc: 'Set data in the requested pillar.  See :ref:`pillar` for more information.\n\n\n  Parameters\n\n  :pillar: Data structure to save for this pillar.\n\n  :pillar_type: Type of pillar\n\n  :pillar_uuid: UUID for pillar--if blank a new one will be generated\n\n  :name: Name for this particular pillar entry\n\n  :desc: Text describing this pillar entry.'\nschema:\n  $ref: '#/definitions/SavePillarSchema'\n  definitions:\n    SavePillarSchema:\n      properties:\n        desc:\n          description: Pillar description\n          title: desc\n          type: string\n        name:\n          description: Pillar name\n          title: name\n          type: string\n        pillar:\n          description: Pillar contents\n          title: pillar\n          type: object\n        pillar_type:\n          description: Pillar type\n          title: pillar_type\n          type: string\n        pillar_uuid:\n          description: Pillar UUID\n          format: uuid\n          title: pillar_uuid\n          type: string\n      required:\n      - name\n      - pillar\n      - pillar_type\n      type: object\nparameters:\n- - pillar\n- - pillar_type\n- - pillar_uuid\n  - null\n- - name\n  - null\n- - desc\n  - null"
                }, 
                "__doc__": "The RPC methods for interacting with pillar"
            }, 
            "cmd": {
                "get_cmds": {
                    "detailed": {
                        "doc": "Query commands based on a number of properties.\n\nSee :ref:`jobs` for more information on commands and jobs.\n\nParameters\n:cmd: A command name to match against.\n:daterange: A comma-separated list of two date strings in ISO 8601 format.\n:filter_find_job: Exclude commands referring to saltutil.find_job.\n:filter_refresh_grains: Exclude commands referring to\n        saltutil.refresh_grains.\n:fun: Command (function) name that was called for this job.\n:highstate: True if the job submitted was call to state.highstate\n:include_adhoc: When this is true, you can search jobs that are running\n        (in-flight), but were not scheduled via the scheduler API (ad-hoc).\n        This parameter is deprecated.  Use ``include_adhoc_scheduled`` instead.\n        Until the removal of this parameter, it will take precedence over\n        ``include_adhoc_scheduled`` if it is present.  If it is not present\n        or is passed a value of ``None``, the value of ``include_adhoc_scheduled``\n        will be honored.\n:include_adhoc_scheduled: One of ``all``, ``scheduled``, or ``adhoc``.  Filters\n        jobs based on if they are scheduled, unscheduled (aka \"on the fly\" or\n        \"ad-hoc\", or show ``all`` jobs regardless of what started them.)\n:limit: This is how many records to return at a time. The default is\n      50. Often used with ``page``.\n:jid: A job ID to match against.\n:job_names: A list of job names to match against.\n:job_uuid: Every job gets a jid and a UUID.  This is the uuid for the job.\n:master_id: Master ID\n:page: This specifies which page, after the first, of results to return.\n      Often used with ``limit``.\n:reverse: Sort ascending (False) or descending (True).\n:sched_names: A list of schedule names to match against.\n:sched_uuid: A schedule UUID to match against.\n:sort_by: Sort by the specified field, such as 'start_time'.\n:state_invert: Return commands that do not have the specified state.\n:state: Find commands in one of these states, ``'new'``,\n        ``'retrieved'``, ``'skipped'``, ``'pausing'``, ``'paused'``,\n        ``'resuming'``, ``'resumed'``, ``'completed_missing_returns'``,\n        ``'completed_failures'``, ``'completed_all_successful'``,\n        ``'stopping'``, ``'stopped'``, or ``'disabled'``. Note that\n        ``state`` may contain ``completed`` when no minions have\n        returned. For more information, see :ref:`activity`.\n:tgt_names: A list of target names to match against.\n:tgt_uuid: Commands can be targeted directly or via a saved target group.\n        This is the UUID of the target group used to submit the command.\n:users: A list of users to match against.\n\n Example:\n\n .. code-block:: python\n\n     client.api.cmd.get_cmds()\n\n     RPCResponse(riq=5,\n                 ret={'count': 1,\n                      'results': [\n                          {'cmd': 'local',\n                           'duration': None,\n                           'expected': 2,\n                           'fun': 'disk.usage',\n                           'is_highstate': False,\n                           'jid': '20190416202619938862',\n                           'job_desc': None,\n                           'job_name': None,\n                           'job_source': 'raas',\n                           'job_uuid': None,\n                           'masters_done': ['master1'],\n                           'masters_to': ['master1'],\n                           'origination': 'Ad-Hoc',\n                           'returned': 1,\n                           'returned_failed': 0,\n                           'returned_good': 1,\n                           'sched_name': None,\n                           'sched_uuid': None,\n                           'start_time': '2019-04-16T20:26:19.93886Z',\n                           'state': 'retrieved',\n                           'tgt_desc': None,\n                           'tgt_name': None,\n                           'tgt_uuid': None,\n                           'user': 'root',\n                           'user_uuid': '80c67364-cb31-4f4b-972a-e7ea3f752bb8'}]},\n                 error=None,\n                 warnings=[])", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetCmdv2Schema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "daterange": {
                                            "description": "A list of two date strings in ISO 8601 format", 
                                            "title": "daterange", 
                                            "minItems": 2, 
                                            "items": {
                                                "type": "string", 
                                                "title": "daterange"
                                            }, 
                                            "maxItems": 2, 
                                            "type": "array"
                                        }, 
                                        "sched_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "sched_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Match commands scheduled via these schedule entry names", 
                                            "title": "sched_names"
                                        }, 
                                        "filter_find_job": {
                                            "type": "boolean", 
                                            "description": "Exclude commands referring to saltutil.find_job.", 
                                            "title": "filter_find_job"
                                        }, 
                                        "state_invert": {
                                            "type": "boolean", 
                                            "description": "Return cmds that do NOT have this state", 
                                            "title": "state_invert"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "jid": {
                                            "type": "string", 
                                            "title": "jid"
                                        }, 
                                        "job_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "job_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Match commands with these job names", 
                                            "title": "job_names"
                                        }, 
                                        "include_adhoc": {
                                            "type": "boolean", 
                                            "description": "Include commands that were not the result of a schedule.  Deprecated in favor of \"include_adhoc_scheduled\".", 
                                            "title": "include_adhoc"
                                        }, 
                                        "sched_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Match commands that are associated with this schedule entry", 
                                            "title": "sched_uuid"
                                        }, 
                                        "state": {
                                            "items": {
                                                "enumNames": [], 
                                                "enum": [
                                                    "new", 
                                                    "retrieved", 
                                                    "skipped", 
                                                    "pausing", 
                                                    "paused", 
                                                    "resumed", 
                                                    "resuming", 
                                                    "completed_missing_returns", 
                                                    "completed_all_successful", 
                                                    "stopping", 
                                                    "stopped", 
                                                    "disabled", 
                                                    "completed_failures"
                                                ], 
                                                "type": "string", 
                                                "title": "state"
                                            }, 
                                            "type": "array", 
                                            "description": "Match commands in these states", 
                                            "title": "state"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Match commands that use this target group", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "daterange_fmt": {
                                            "type": "string", 
                                            "description": "An alternate date format for daterange", 
                                            "title": "daterange_fmt"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Match commands addressed to this salt master", 
                                            "title": "master_id"
                                        }, 
                                        "users": {
                                            "items": {
                                                "type": "string", 
                                                "title": "users"
                                            }, 
                                            "type": "array", 
                                            "description": "Match users with these names", 
                                            "title": "users"
                                        }, 
                                        "filter_refresh_grains": {
                                            "type": "boolean", 
                                            "description": "Exclude commands referring to saltutil.refresh_grains.", 
                                            "title": "filter_refresh_grains"
                                        }, 
                                        "include_adhoc_scheduled": {
                                            "type": "string", 
                                            "description": "Filter commands to show only scheduled jobs (pass \"scheduled\"), ad-hoc jobs (pass \"adhoc\"), or do not filter based on job source (\"all\").", 
                                            "title": "include_adhoc_scheduled"
                                        }, 
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }, 
                                        "tgt_names": {
                                            "items": {
                                                "type": "string", 
                                                "title": "tgt_names"
                                            }, 
                                            "type": "array", 
                                            "description": "Match commands with these target group names", 
                                            "title": "tgt_names"
                                        }, 
                                        "cmd": {
                                            "type": "string", 
                                            "description": "Filter by cmd name", 
                                            "title": "cmd"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "state", 
                                                "cmd", 
                                                "fun", 
                                                "tgt_name", 
                                                "job_name", 
                                                "sched_name", 
                                                "start_time", 
                                                "not_returned", 
                                                "user", 
                                                "expected", 
                                                "returned", 
                                                "returned_failed", 
                                                "returned_good", 
                                                "origination"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "highstate": {
                                            "type": "boolean", 
                                            "description": "If true, match only commands that are highstate runs, otherwise exclude highstate runs", 
                                            "title": "highstate"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "Filter by function name", 
                                            "title": "fun"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Match commands that refer to this job", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetCmdv2Schema"
                        }, 
                        "parameters": [
                            [
                                "daterange", 
                                null
                            ], 
                            [
                                "jid", 
                                null
                            ], 
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "state", 
                                null
                            ], 
                            [
                                "state_invert", 
                                false
                            ], 
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "job_names", 
                                null
                            ], 
                            [
                                "sched_uuid", 
                                null
                            ], 
                            [
                                "sched_names", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "tgt_names", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "highstate", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "users", 
                                null
                            ], 
                            [
                                "include_adhoc", 
                                null
                            ], 
                            [
                                "include_adhoc_scheduled", 
                                "all"
                            ], 
                            [
                                "filter_find_job", 
                                true
                            ], 
                            [
                                "filter_refresh_grains", 
                                true
                            ], 
                            [
                                "sort_by", 
                                "start_time"
                            ], 
                            [
                                "reverse", 
                                true
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                50
                            ]
                        ], 
                        "signature": "get_cmds(daterange: typing.Union[typing.List, NoneType], jid: typing.Union[str, NoneType], master_id: typing.Union[str, NoneType], state: typing.Union[typing.List, NoneType], state_invert: typing.Union[bool, NoneType], job_uuid: typing.Union[uuid.UUID, NoneType], job_names: typing.Union[typing.List, NoneType], sched_uuid: typing.Union[uuid.UUID, NoneType], sched_names: typing.Union[typing.List, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], tgt_names: typing.Union[typing.List, NoneType], fun: typing.Union[str, NoneType], highstate: typing.Union[bool, NoneType], cmd: typing.Union[str, NoneType], users: typing.Union[typing.List, NoneType], include_adhoc: typing.Union[bool, NoneType], include_adhoc_scheduled: typing.Union[str, NoneType] = all, filter_find_job: typing.Union[bool, NoneType] = True, filter_refresh_grains: typing.Union[bool, NoneType] = True, sort_by: typing.Union[str, NoneType] = start_time, reverse: typing.Union[bool, NoneType] = True, page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 50)"
                    }, 
                    "formatted": "signature: 'get_cmds(daterange: typing.Union[typing.List, NoneType], jid: typing.Union[str,\n  NoneType], master_id: typing.Union[str, NoneType], state: typing.Union[typing.List,\n  NoneType], state_invert: typing.Union[bool, NoneType], job_uuid: typing.Union[uuid.UUID,\n  NoneType], job_names: typing.Union[typing.List, NoneType], sched_uuid: typing.Union[uuid.UUID,\n  NoneType], sched_names: typing.Union[typing.List, NoneType], tgt_uuid: typing.Union[uuid.UUID,\n  NoneType], tgt_names: typing.Union[typing.List, NoneType], fun: typing.Union[str,\n  NoneType], highstate: typing.Union[bool, NoneType], cmd: typing.Union[str, NoneType],\n  users: typing.Union[typing.List, NoneType], include_adhoc: typing.Union[bool, NoneType],\n  include_adhoc_scheduled: typing.Union[str, NoneType] = all, filter_find_job: typing.Union[bool,\n  NoneType] = True, filter_refresh_grains: typing.Union[bool, NoneType] = True, sort_by:\n  typing.Union[str, NoneType] = start_time, reverse: typing.Union[bool, NoneType]\n  = True, page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] =\n  50)'\nreturns: Dict\ndoc: \"Query commands based on a number of properties.\\n\\nSee :ref:`jobs` for more\\\n  \\ information on commands and jobs.\\n\\nParameters\\n:cmd: A command name to match\\\n  \\ against.\\n:daterange: A comma-separated list of two date strings in ISO 8601 format.\\n\\\n  :filter_find_job: Exclude commands referring to saltutil.find_job.\\n:filter_refresh_grains:\\\n  \\ Exclude commands referring to\\n        saltutil.refresh_grains.\\n:fun: Command\\\n  \\ (function) name that was called for this job.\\n:highstate: True if the job submitted\\\n  \\ was call to state.highstate\\n:include_adhoc: When this is true, you can search\\\n  \\ jobs that are running\\n        (in-flight), but were not scheduled via the scheduler\\\n  \\ API (ad-hoc).\\n        This parameter is deprecated.  Use ``include_adhoc_scheduled``\\\n  \\ instead.\\n        Until the removal of this parameter, it will take precedence\\\n  \\ over\\n        ``include_adhoc_scheduled`` if it is present.  If it is not present\\n\\\n  \\        or is passed a value of ``None``, the value of ``include_adhoc_scheduled``\\n\\\n  \\        will be honored.\\n:include_adhoc_scheduled: One of ``all``, ``scheduled``,\\\n  \\ or ``adhoc``.  Filters\\n        jobs based on if they are scheduled, unscheduled\\\n  \\ (aka \\\"on the fly\\\" or\\n        \\\"ad-hoc\\\", or show ``all`` jobs regardless of\\\n  \\ what started them.)\\n:limit: This is how many records to return at a time. The\\\n  \\ default is\\n      50. Often used with ``page``.\\n:jid: A job ID to match against.\\n\\\n  :job_names: A list of job names to match against.\\n:job_uuid: Every job gets a jid\\\n  \\ and a UUID.  This is the uuid for the job.\\n:master_id: Master ID\\n:page: This\\\n  \\ specifies which page, after the first, of results to return.\\n      Often used\\\n  \\ with ``limit``.\\n:reverse: Sort ascending (False) or descending (True).\\n:sched_names:\\\n  \\ A list of schedule names to match against.\\n:sched_uuid: A schedule UUID to match\\\n  \\ against.\\n:sort_by: Sort by the specified field, such as 'start_time'.\\n:state_invert:\\\n  \\ Return commands that do not have the specified state.\\n:state: Find commands in\\\n  \\ one of these states, ``'new'``,\\n        ``'retrieved'``, ``'skipped'``, ``'pausing'``,\\\n  \\ ``'paused'``,\\n        ``'resuming'``, ``'resumed'``, ``'completed_missing_returns'``,\\n\\\n  \\        ``'completed_failures'``, ``'completed_all_successful'``,\\n        ``'stopping'``,\\\n  \\ ``'stopped'``, or ``'disabled'``. Note that\\n        ``state`` may contain ``completed``\\\n  \\ when no minions have\\n        returned. For more information, see :ref:`activity`.\\n\\\n  :tgt_names: A list of target names to match against.\\n:tgt_uuid: Commands can be\\\n  \\ targeted directly or via a saved target group.\\n        This is the UUID of the\\\n  \\ target group used to submit the command.\\n:users: A list of users to match against.\\n\\\n  \\n Example:\\n\\n .. code-block:: python\\n\\n     client.api.cmd.get_cmds()\\n\\n   \\\n  \\  RPCResponse(riq=5,\\n                 ret={'count': 1,\\n                     \\\n  \\ 'results': [\\n                          {'cmd': 'local',\\n                   \\\n  \\        'duration': None,\\n                           'expected': 2,\\n        \\\n  \\                   'fun': 'disk.usage',\\n                           'is_highstate':\\\n  \\ False,\\n                           'jid': '20190416202619938862',\\n          \\\n  \\                 'job_desc': None,\\n                           'job_name': None,\\n\\\n  \\                           'job_source': 'raas',\\n                           'job_uuid':\\\n  \\ None,\\n                           'masters_done': ['master1'],\\n             \\\n  \\              'masters_to': ['master1'],\\n                           'origination':\\\n  \\ 'Ad-Hoc',\\n                           'returned': 1,\\n                       \\\n  \\    'returned_failed': 0,\\n                           'returned_good': 1,\\n   \\\n  \\                        'sched_name': None,\\n                           'sched_uuid':\\\n  \\ None,\\n                           'start_time': '2019-04-16T20:26:19.93886Z',\\n\\\n  \\                           'state': 'retrieved',\\n                           'tgt_desc':\\\n  \\ None,\\n                           'tgt_name': None,\\n                        \\\n  \\   'tgt_uuid': None,\\n                           'user': 'root',\\n            \\\n  \\               'user_uuid': '80c67364-cb31-4f4b-972a-e7ea3f752bb8'}]},\\n      \\\n  \\           error=None,\\n                 warnings=[])\"\nschema:\n  $ref: '#/definitions/GetCmdv2Schema'\n  definitions:\n    GetCmdv2Schema:\n      properties:\n        cmd:\n          description: Filter by cmd name\n          title: cmd\n          type: string\n        daterange:\n          description: A list of two date strings in ISO 8601 format\n          items:\n            title: daterange\n            type: string\n          maxItems: 2\n          minItems: 2\n          title: daterange\n          type: array\n        daterange_fmt:\n          description: An alternate date format for daterange\n          title: daterange_fmt\n          type: string\n        filter_find_job:\n          description: Exclude commands referring to saltutil.find_job.\n          title: filter_find_job\n          type: boolean\n        filter_refresh_grains:\n          description: Exclude commands referring to saltutil.refresh_grains.\n          title: filter_refresh_grains\n          type: boolean\n        fun:\n          description: Filter by function name\n          title: fun\n          type: string\n        highstate:\n          description: If true, match only commands that are highstate runs, otherwise\n            exclude highstate runs\n          title: highstate\n          type: boolean\n        include_adhoc:\n          description: Include commands that were not the result of a schedule.  Deprecated\n            in favor of \"include_adhoc_scheduled\".\n          title: include_adhoc\n          type: boolean\n        include_adhoc_scheduled:\n          description: Filter commands to show only scheduled jobs (pass \"scheduled\"),\n            ad-hoc jobs (pass \"adhoc\"), or do not filter based on job source (\"all\").\n          title: include_adhoc_scheduled\n          type: string\n        jid:\n          title: jid\n          type: string\n        job_names:\n          description: Match commands with these job names\n          items:\n            title: job_names\n            type: string\n          title: job_names\n          type: array\n        job_uuid:\n          description: Match commands that refer to this job\n          format: uuid\n          title: job_uuid\n          type: string\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Match commands addressed to this salt master\n          title: master_id\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        sched_names:\n          description: Match commands scheduled via these schedule entry names\n          items:\n            title: sched_names\n            type: string\n          title: sched_names\n          type: array\n        sched_uuid:\n          description: Match commands that are associated with this schedule entry\n          format: uuid\n          title: sched_uuid\n          type: string\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - state\n          - cmd\n          - fun\n          - tgt_name\n          - job_name\n          - sched_name\n          - start_time\n          - not_returned\n          - user\n          - expected\n          - returned\n          - returned_failed\n          - returned_good\n          - origination\n          enumNames: []\n          title: sort_by\n          type: string\n        state:\n          description: Match commands in these states\n          items:\n            enum:\n            - new\n            - retrieved\n            - skipped\n            - pausing\n            - paused\n            - resumed\n            - resuming\n            - completed_missing_returns\n            - completed_all_successful\n            - stopping\n            - stopped\n            - disabled\n            - completed_failures\n            enumNames: []\n            title: state\n            type: string\n          title: state\n          type: array\n        state_invert:\n          description: Return cmds that do NOT have this state\n          title: state_invert\n          type: boolean\n        tgt_names:\n          description: Match commands with these target group names\n          items:\n            title: tgt_names\n            type: string\n          title: tgt_names\n          type: array\n        tgt_uuid:\n          description: Match commands that use this target group\n          format: uuid\n          title: tgt_uuid\n          type: string\n        users:\n          description: Match users with these names\n          items:\n            title: users\n            type: string\n          title: users\n          type: array\n      required: []\n      type: object\nparameters:\n- - daterange\n  - null\n- - jid\n  - null\n- - master_id\n  - null\n- - state\n  - null\n- - state_invert\n  - false\n- - job_uuid\n  - null\n- - job_names\n  - null\n- - sched_uuid\n  - null\n- - sched_names\n  - null\n- - tgt_uuid\n  - null\n- - tgt_names\n  - null\n- - fun\n  - null\n- - highstate\n  - null\n- - cmd\n  - null\n- - users\n  - null\n- - include_adhoc\n  - null\n- - include_adhoc_scheduled\n  - all\n- - filter_find_job\n  - true\n- - filter_refresh_grains\n  - true\n- - sort_by\n  - start_time\n- - reverse\n  - true\n- - page\n  - 0\n- - limit\n  - 50"
                }, 
                "get_cmd_status": {
                    "detailed": {
                        "doc": "Get the status of a command\n\n:jids: list of JIDs", 
                        "returns": "List", 
                        "schema": {
                            "definitions": {
                                "GetCmdStatusSchema": {
                                    "required": [
                                        "jids"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "jids": {
                                            "items": {
                                                "type": "string", 
                                                "title": "jids"
                                            }, 
                                            "type": "array", 
                                            "description": "List of JIDs", 
                                            "title": "jids"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetCmdStatusSchema"
                        }, 
                        "parameters": [
                            [
                                "jids"
                            ]
                        ], 
                        "signature": "get_cmd_status(jids: List[str])"
                    }, 
                    "formatted": "signature: 'get_cmd_status(jids: List[str])'\nreturns: List\ndoc: 'Get the status of a command\n\n\n  :jids: list of JIDs'\nschema:\n  $ref: '#/definitions/GetCmdStatusSchema'\n  definitions:\n    GetCmdStatusSchema:\n      properties:\n        jids:\n          description: List of JIDs\n          items:\n            title: jids\n            type: string\n          title: jids\n          type: array\n      required:\n      - jids\n      type: object\nparameters:\n- - jids"
                }, 
                "pause_job": {
                    "detailed": {
                        "doc": "Pass a pause command through to the masters.  Note that the pause command is\nitself a command, so this method returns a jid corresponding to the\n``state.pause`` call.\n\n:param job_uuid: UUID of the job to attempt to pause\n:param jid: Jid of the job to attempt to pause\n:return: a Jid corresponding to the pause command", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "PauseResumeStopSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "jid": {
                                            "minLength": 20, 
                                            "title": "jid", 
                                            "type": "string", 
                                            "description": "The JID(job ID)", 
                                            "maxLength": 20
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Match commands that refer to this job", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/PauseResumeStopSchema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "jid", 
                                null
                            ]
                        ], 
                        "signature": "pause_job(job_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'pause_job(job_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str,\n  NoneType])'\nreturns: '''unicode'''\ndoc: 'Pass a pause command through to the masters.  Note that the pause command is\n\n  itself a command, so this method returns a jid corresponding to the\n\n  ``state.pause`` call.\n\n\n  :param job_uuid: UUID of the job to attempt to pause\n\n  :param jid: Jid of the job to attempt to pause\n\n  :return: a Jid corresponding to the pause command'\nschema:\n  $ref: '#/definitions/PauseResumeStopSchema'\n  definitions:\n    PauseResumeStopSchema:\n      properties:\n        jid:\n          description: The JID(job ID)\n          maxLength: 20\n          minLength: 20\n          title: jid\n          type: string\n        job_uuid:\n          description: Match commands that refer to this job\n          format: uuid\n          title: job_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - job_uuid\n  - null\n- - jid\n  - null"
                }, 
                "get_cmd_details": {
                    "detailed": {
                        "doc": "Query commands based on jid and retrieve more detailed data.\n\n:jid: A job ID to match against.\n:minion_id_exact: Filter by a minion_id that match exactly.\n      Also full return data will be returned.\n:minion_id: Filter by a minion_id search.\n:master_id: Filter by a master_id search.\n:has_errors: Filter by whether there were errors, True|False.\n:has_return: Filter by whether return data was recieved, True|False.\n:sort_by: Sort by the specified field, such as 'alter_time'.\n:reverse: Sort ascending (False) or descending (True).\n:page: This specifies which page, after the first, of results to return.\n      Often used with ``limit``.\n:limit: This is how many records to return at a time. The default is\n      50. Often used with ``page``.\n\nExamples\n^^^^^^^^\n\nRequest\n*******\n\n.. code-block:: python\n\n    from sseapiclient.tornado import SyncClient\n    client = SyncClient.connect('http://localhost', 'root', 'salt')\n    client.api.cmd.get_cmd_details(\n        jid=\"20190726204734431402\"\n    )", 
                        "returns": "Dict", 
                        "schema": {
                            "definitions": {
                                "GetCmdDetailsSchema": {
                                    "required": [
                                        "jid"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "jid": {
                                            "minLength": 20, 
                                            "title": "jid", 
                                            "type": "string", 
                                            "description": "The JID(job ID)", 
                                            "maxLength": 20
                                        }, 
                                        "reverse": {
                                            "default": false, 
                                            "type": "boolean", 
                                            "description": "Set to True to sort descending", 
                                            "title": "reverse"
                                        }, 
                                        "has_errors": {
                                            "type": "boolean", 
                                            "description": "Limit results by if command has errors or not.", 
                                            "title": "has_errors"
                                        }, 
                                        "minion_id_exact": {
                                            "type": "string", 
                                            "description": "Limit results to minion matching one of this id", 
                                            "title": "minion_id_exact"
                                        }, 
                                        "minion_id": {
                                            "type": "string", 
                                            "description": "Limit results to minion search matching one of this id", 
                                            "title": "minion_id"
                                        }, 
                                        "sort_by": {
                                            "enumNames": [], 
                                            "enum": [
                                                "alter_time", 
                                                "minion_id", 
                                                "master_id", 
                                                "has_errors", 
                                                "has_return"
                                            ], 
                                            "type": "string", 
                                            "description": "Which field, if any, to sort by", 
                                            "title": "sort_by"
                                        }, 
                                        "limit": {
                                            "exclusiveMaximum": true, 
                                            "description": "How many records to return", 
                                            "title": "limit", 
                                            "default": 50, 
                                            "exclusiveMinimum": false, 
                                            "format": "integer", 
                                            "maximum": 1000, 
                                            "minimum": 0, 
                                            "type": "number"
                                        }, 
                                        "master_id": {
                                            "type": "string", 
                                            "description": "Limit results to master search matching one of this id", 
                                            "title": "master_id"
                                        }, 
                                        "page": {
                                            "description": "Which page of the records to return (offset = page * limit)", 
                                            "title": "page", 
                                            "default": 0, 
                                            "type": "number", 
                                            "format": "integer", 
                                            "minimum": 0, 
                                            "exclusiveMinimum": false
                                        }, 
                                        "has_return": {
                                            "type": "boolean", 
                                            "description": "Limit results by if command has return data or not.", 
                                            "title": "has_return"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/GetCmdDetailsSchema"
                        }, 
                        "parameters": [
                            [
                                "jid"
                            ], 
                            [
                                "minion_id_exact", 
                                null
                            ], 
                            [
                                "minion_id", 
                                null
                            ], 
                            [
                                "master_id", 
                                null
                            ], 
                            [
                                "has_errors", 
                                null
                            ], 
                            [
                                "has_return", 
                                null
                            ], 
                            [
                                "sort_by", 
                                "alter_time"
                            ], 
                            [
                                "reverse", 
                                false
                            ], 
                            [
                                "page", 
                                0
                            ], 
                            [
                                "limit", 
                                50
                            ]
                        ], 
                        "signature": "get_cmd_details(jid: 'unicode', minion_id_exact: typing.Union[str, NoneType], minion_id: typing.Union[str, NoneType], master_id: typing.Union[str, NoneType], has_errors: typing.Union[bool, NoneType], has_return: typing.Union[bool, NoneType], sort_by: typing.Union[str, NoneType] = alter_time, reverse: typing.Union[bool, NoneType], page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 50)"
                    }, 
                    "formatted": "signature: 'get_cmd_details(jid: ''unicode'', minion_id_exact: typing.Union[str, NoneType],\n  minion_id: typing.Union[str, NoneType], master_id: typing.Union[str, NoneType],\n  has_errors: typing.Union[bool, NoneType], has_return: typing.Union[bool, NoneType],\n  sort_by: typing.Union[str, NoneType] = alter_time, reverse: typing.Union[bool, NoneType],\n  page: typing.Union[int, NoneType], limit: typing.Union[int, NoneType] = 50)'\nreturns: Dict\ndoc: \"Query commands based on jid and retrieve more detailed data.\\n\\n:jid: A job\\\n  \\ ID to match against.\\n:minion_id_exact: Filter by a minion_id that match exactly.\\n\\\n  \\      Also full return data will be returned.\\n:minion_id: Filter by a minion_id\\\n  \\ search.\\n:master_id: Filter by a master_id search.\\n:has_errors: Filter by whether\\\n  \\ there were errors, True|False.\\n:has_return: Filter by whether return data was\\\n  \\ recieved, True|False.\\n:sort_by: Sort by the specified field, such as 'alter_time'.\\n\\\n  :reverse: Sort ascending (False) or descending (True).\\n:page: This specifies which\\\n  \\ page, after the first, of results to return.\\n      Often used with ``limit``.\\n\\\n  :limit: This is how many records to return at a time. The default is\\n      50.\\\n  \\ Often used with ``page``.\\n\\nExamples\\n^^^^^^^^\\n\\nRequest\\n*******\\n\\n.. code-block::\\\n  \\ python\\n\\n    from sseapiclient.tornado import SyncClient\\n    client = SyncClient.connect('http://localhost',\\\n  \\ 'root', 'salt')\\n    client.api.cmd.get_cmd_details(\\n        jid=\\\"20190726204734431402\\\"\\\n  \\n    )\"\nschema:\n  $ref: '#/definitions/GetCmdDetailsSchema'\n  definitions:\n    GetCmdDetailsSchema:\n      properties:\n        has_errors:\n          description: Limit results by if command has errors or not.\n          title: has_errors\n          type: boolean\n        has_return:\n          description: Limit results by if command has return data or not.\n          title: has_return\n          type: boolean\n        jid:\n          description: The JID(job ID)\n          maxLength: 20\n          minLength: 20\n          title: jid\n          type: string\n        limit:\n          default: 50\n          description: How many records to return\n          exclusiveMaximum: true\n          exclusiveMinimum: false\n          format: integer\n          maximum: 1000\n          minimum: 0\n          title: limit\n          type: number\n        master_id:\n          description: Limit results to master search matching one of this id\n          title: master_id\n          type: string\n        minion_id:\n          description: Limit results to minion search matching one of this id\n          title: minion_id\n          type: string\n        minion_id_exact:\n          description: Limit results to minion matching one of this id\n          title: minion_id_exact\n          type: string\n        page:\n          default: 0\n          description: Which page of the records to return (offset = page * limit)\n          exclusiveMinimum: false\n          format: integer\n          minimum: 0\n          title: page\n          type: number\n        reverse:\n          default: false\n          description: Set to True to sort descending\n          title: reverse\n          type: boolean\n        sort_by:\n          description: Which field, if any, to sort by\n          enum:\n          - alter_time\n          - minion_id\n          - master_id\n          - has_errors\n          - has_return\n          enumNames: []\n          title: sort_by\n          type: string\n      required:\n      - jid\n      type: object\nparameters:\n- - jid\n- - minion_id_exact\n  - null\n- - minion_id\n  - null\n- - master_id\n  - null\n- - has_errors\n  - null\n- - has_return\n  - null\n- - sort_by\n  - alter_time\n- - reverse\n  - false\n- - page\n  - 0\n- - limit\n  - 50"
                }, 
                "resume_job": {
                    "detailed": {
                        "doc": "Pass a resume command through to the masters\n\n:param job_uuid: UUID of the job to attempt to resume\n:param jid: Jid of the job to attempt to resume\n:return: a Jid corresponding to the resume command", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "PauseResumeStopSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "jid": {
                                            "minLength": 20, 
                                            "title": "jid", 
                                            "type": "string", 
                                            "description": "The JID(job ID)", 
                                            "maxLength": 20
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Match commands that refer to this job", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/PauseResumeStopSchema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "jid", 
                                null
                            ]
                        ], 
                        "signature": "resume_job(job_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'resume_job(job_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str,\n  NoneType])'\nreturns: '''unicode'''\ndoc: 'Pass a resume command through to the masters\n\n\n  :param job_uuid: UUID of the job to attempt to resume\n\n  :param jid: Jid of the job to attempt to resume\n\n  :return: a Jid corresponding to the resume command'\nschema:\n  $ref: '#/definitions/PauseResumeStopSchema'\n  definitions:\n    PauseResumeStopSchema:\n      properties:\n        jid:\n          description: The JID(job ID)\n          maxLength: 20\n          minLength: 20\n          title: jid\n          type: string\n        job_uuid:\n          description: Match commands that refer to this job\n          format: uuid\n          title: job_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - job_uuid\n  - null\n- - jid\n  - null"
                }, 
                "route_cmd": {
                    "detailed": {
                        "doc": "Create a command and route it to Salt.  See :ref:`jobs` for more information\non commands and jobs.\n\nParameters\n:job_uuid: UUID for this job, can be ``None`` in which case RaaS will generate\n                 a new UUID.\n:cmd: One of ``local`` (for targeting minions), ``runner`` (master-level command), or\n            ``wheel`` (master wheel calls)\n:fun: Dotted-notation function to run (e.g. ``test.ping`` or ``network.ipaddrs``)\n:masters: A list of master names that should receive this command.  Applicable\n                only for ``runner`` and ``wheel`` commands.  For ``local`` cmds\n                all targeting is specified in ``tgt``.\n:arg: A dictionary containing the keys ``arg`` and/or ``kwarg`` representing\n            arguments to pass to the ``fun`` being called.\n:tgt: A dictionary containing targeting information. See :ref:`targets`\n            for more information.\n            A target can contain a master name of ``*`` to indicate all\n            SaltStack Enterprise-connected masters.  If ``*`` is present,\n            it must be the only master listed in ``tgt``.\n:tgt_uuid: The UUID of an existing target group that should receive this command.\n\nEither ``tgt`` or ``tgt_uuid`` should be used, but not both.\n\n``tgt`` has the following form:\n\n.. code-block:: json\n\n    { name_of_master: { 'tgt': target_string,\n                        'tgt_type': target_type` },\n      name_of_master: { 'tgt': target_string ... }}\n\nExample:\n .. code-block:: python\n\n     client.api.cmd.route_cmd(cmd='local',\n                              fun='cmd.run',\n                              tgt={'master3_master': {'tgt': 'master3', 'tgt_type': 'glob'}},\n                              arg={'arg': [\"ls /etc\"]})\n\n     client.api.cmd.route_cmd(\n         job_uuid='5c5cc410-4f9f-11e6-88bc-080027a7289c',\n         tgt={'master3_master': {'tgt': '*', 'tgt_type': 'glob'}})\n\nExample with an argument:\n .. code-block:: python\n\n    client.api.cmd.route_cmd(cmd='local',\n        fun='cmd.run',\n        tgt={'master3_master': {'tgt': 'master3', 'tgt_type': 'glob'}},\n        arg={'arg': [\"ls /etc\"]})\n\nExample with an existing job_uuid\n .. code-block:: python\n\n    client.api.cmd.route_cmd(job_uuid='5c5cc410-4f9f-11e6-88bc-080027a7289c',\n         tgt={'master3_master': {'tgt': '*', 'tgt_type': 'glob'}})", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "RouteCmdSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "masters": {
                                            "items": {
                                                "type": "string", 
                                                "title": "masters"
                                            }, 
                                            "type": "array", 
                                            "description": "IDs of masters that should run the command (runner and wheel commands)", 
                                            "title": "masters"
                                        }, 
                                        "tgt": {
                                            "type": "object", 
                                            "description": "Target specification: {\"<master_id>\": {\"tgt_type\": \"...\", \"tgt\": \"...\"}, ...}", 
                                            "title": "tgt"
                                        }, 
                                        "cmd": {
                                            "enumNames": [], 
                                            "enum": [
                                                "wheel", 
                                                "runner", 
                                                "local"
                                            ], 
                                            "type": "string", 
                                            "description": "Salt command type", 
                                            "title": "cmd"
                                        }, 
                                        "jid": {
                                            "type": "string", 
                                            "description": "Passed in jid for cmd", 
                                            "title": "jid"
                                        }, 
                                        "disposition": {
                                            "items": {
                                                "type": "string", 
                                                "title": "disposition"
                                            }, 
                                            "type": "array", 
                                            "disposition": "Which masters to consider running on.", 
                                            "title": "disposition"
                                        }, 
                                        "arg": {
                                            "type": "object", 
                                            "description": "Function arguments: {\"arg\": [...], \"kwarg\": {...}}", 
                                            "title": "arg"
                                        }, 
                                        "fun": {
                                            "type": "string", 
                                            "description": "Salt function name", 
                                            "title": "fun"
                                        }, 
                                        "tgt_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Target group UUID", 
                                            "title": "tgt_uuid"
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Create a command from this job", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/RouteCmdSchema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "cmd", 
                                null
                            ], 
                            [
                                "fun", 
                                null
                            ], 
                            [
                                "masters", 
                                null
                            ], 
                            [
                                "arg", 
                                null
                            ], 
                            [
                                "tgt", 
                                null
                            ], 
                            [
                                "tgt_uuid", 
                                null
                            ], 
                            [
                                "jid", 
                                null
                            ], 
                            [
                                "disposition", 
                                null
                            ]
                        ], 
                        "signature": "route_cmd(job_uuid: typing.Union[uuid.UUID, NoneType], cmd: typing.Union[str, NoneType], fun: typing.Union[str, NoneType], masters: typing.Union[typing.List[str], NoneType], arg: typing.Union[typing.Dict, NoneType], tgt: typing.Union[typing.Dict, NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str, NoneType], disposition: typing.Union[typing.List[str], NoneType])"
                    }, 
                    "formatted": "signature: 'route_cmd(job_uuid: typing.Union[uuid.UUID, NoneType], cmd: typing.Union[str,\n  NoneType], fun: typing.Union[str, NoneType], masters: typing.Union[typing.List[str],\n  NoneType], arg: typing.Union[typing.Dict, NoneType], tgt: typing.Union[typing.Dict,\n  NoneType], tgt_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str, NoneType],\n  disposition: typing.Union[typing.List[str], NoneType])'\nreturns: '''unicode'''\ndoc: \"Create a command and route it to Salt.  See :ref:`jobs` for more information\\n\\\n  on commands and jobs.\\n\\nParameters\\n:job_uuid: UUID for this job, can be ``None``\\\n  \\ in which case RaaS will generate\\n                 a new UUID.\\n:cmd: One of ``local``\\\n  \\ (for targeting minions), ``runner`` (master-level command), or\\n            ``wheel``\\\n  \\ (master wheel calls)\\n:fun: Dotted-notation function to run (e.g. ``test.ping``\\\n  \\ or ``network.ipaddrs``)\\n:masters: A list of master names that should receive\\\n  \\ this command.  Applicable\\n                only for ``runner`` and ``wheel`` commands.\\\n  \\  For ``local`` cmds\\n                all targeting is specified in ``tgt``.\\n\\\n  :arg: A dictionary containing the keys ``arg`` and/or ``kwarg`` representing\\n \\\n  \\           arguments to pass to the ``fun`` being called.\\n:tgt: A dictionary containing\\\n  \\ targeting information. See :ref:`targets`\\n            for more information.\\n\\\n  \\            A target can contain a master name of ``*`` to indicate all\\n     \\\n  \\       SaltStack Enterprise-connected masters.  If ``*`` is present,\\n        \\\n  \\    it must be the only master listed in ``tgt``.\\n:tgt_uuid: The UUID of an existing\\\n  \\ target group that should receive this command.\\n\\nEither ``tgt`` or ``tgt_uuid``\\\n  \\ should be used, but not both.\\n\\n``tgt`` has the following form:\\n\\n.. code-block::\\\n  \\ json\\n\\n    { name_of_master: { 'tgt': target_string,\\n                      \\\n  \\  'tgt_type': target_type` },\\n      name_of_master: { 'tgt': target_string ...\\\n  \\ }}\\n\\nExample:\\n .. code-block:: python\\n\\n     client.api.cmd.route_cmd(cmd='local',\\n\\\n  \\                              fun='cmd.run',\\n                              tgt={'master3_master':\\\n  \\ {'tgt': 'master3', 'tgt_type': 'glob'}},\\n                              arg={'arg':\\\n  \\ [\\\"ls /etc\\\"]})\\n\\n     client.api.cmd.route_cmd(\\n         job_uuid='5c5cc410-4f9f-11e6-88bc-080027a7289c',\\n\\\n  \\         tgt={'master3_master': {'tgt': '*', 'tgt_type': 'glob'}})\\n\\nExample with\\\n  \\ an argument:\\n .. code-block:: python\\n\\n    client.api.cmd.route_cmd(cmd='local',\\n\\\n  \\        fun='cmd.run',\\n        tgt={'master3_master': {'tgt': 'master3', 'tgt_type':\\\n  \\ 'glob'}},\\n        arg={'arg': [\\\"ls /etc\\\"]})\\n\\nExample with an existing job_uuid\\n\\\n  \\ .. code-block:: python\\n\\n    client.api.cmd.route_cmd(job_uuid='5c5cc410-4f9f-11e6-88bc-080027a7289c',\\n\\\n  \\         tgt={'master3_master': {'tgt': '*', 'tgt_type': 'glob'}})\"\nschema:\n  $ref: '#/definitions/RouteCmdSchema'\n  definitions:\n    RouteCmdSchema:\n      properties:\n        arg:\n          description: 'Function arguments: {\"arg\": [...], \"kwarg\": {...}}'\n          title: arg\n          type: object\n        cmd:\n          description: Salt command type\n          enum:\n          - wheel\n          - runner\n          - local\n          enumNames: []\n          title: cmd\n          type: string\n        disposition:\n          disposition: Which masters to consider running on.\n          items:\n            title: disposition\n            type: string\n          title: disposition\n          type: array\n        fun:\n          description: Salt function name\n          title: fun\n          type: string\n        jid:\n          description: Passed in jid for cmd\n          title: jid\n          type: string\n        job_uuid:\n          description: Create a command from this job\n          format: uuid\n          title: job_uuid\n          type: string\n        masters:\n          description: IDs of masters that should run the command (runner and wheel\n            commands)\n          items:\n            title: masters\n            type: string\n          title: masters\n          type: array\n        tgt:\n          description: 'Target specification: {\"<master_id>\": {\"tgt_type\": \"...\",\n            \"tgt\": \"...\"}, ...}'\n          title: tgt\n          type: object\n        tgt_uuid:\n          description: Target group UUID\n          format: uuid\n          title: tgt_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - job_uuid\n  - null\n- - cmd\n  - null\n- - fun\n  - null\n- - masters\n  - null\n- - arg\n  - null\n- - tgt\n  - null\n- - tgt_uuid\n  - null\n- - jid\n  - null\n- - disposition\n  - null"
                }, 
                "stop_job": {
                    "detailed": {
                        "doc": "Pass a 'soft_kill' command through to the masters.\n\n:param job_uuid: UUID of the job to attempt to kill\n:param jid: Jid of the job to attempt to kill\n:return: a Jid corresponding to the kill command", 
                        "returns": "'unicode'", 
                        "schema": {
                            "definitions": {
                                "PauseResumeStopSchema": {
                                    "required": [], 
                                    "type": "object", 
                                    "properties": {
                                        "jid": {
                                            "minLength": 20, 
                                            "title": "jid", 
                                            "type": "string", 
                                            "description": "The JID(job ID)", 
                                            "maxLength": 20
                                        }, 
                                        "job_uuid": {
                                            "format": "uuid", 
                                            "type": "string", 
                                            "description": "Match commands that refer to this job", 
                                            "title": "job_uuid"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/PauseResumeStopSchema"
                        }, 
                        "parameters": [
                            [
                                "job_uuid", 
                                null
                            ], 
                            [
                                "jid", 
                                null
                            ]
                        ], 
                        "signature": "stop_job(job_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str, NoneType])"
                    }, 
                    "formatted": "signature: 'stop_job(job_uuid: typing.Union[uuid.UUID, NoneType], jid: typing.Union[str,\n  NoneType])'\nreturns: '''unicode'''\ndoc: 'Pass a ''soft_kill'' command through to the masters.\n\n\n  :param job_uuid: UUID of the job to attempt to kill\n\n  :param jid: Jid of the job to attempt to kill\n\n  :return: a Jid corresponding to the kill command'\nschema:\n  $ref: '#/definitions/PauseResumeStopSchema'\n  definitions:\n    PauseResumeStopSchema:\n      properties:\n        jid:\n          description: The JID(job ID)\n          maxLength: 20\n          minLength: 20\n          title: jid\n          type: string\n        job_uuid:\n          description: Match commands that refer to this job\n          format: uuid\n          title: job_uuid\n          type: string\n      required: []\n      type: object\nparameters:\n- - job_uuid\n  - null\n- - jid\n  - null"
                }, 
                "__doc__": "The RPC methods for the command interface"
            }, 
            "kv": {
                "set_system_key": {
                    "detailed": {
                        "doc": "Set the value of a system key. System keys are used internally and cannot\nbe retrieved directly.\n\nParameters:\n:key: The system key to set.\n:value: The value to set.", 
                        "schema": {
                            "definitions": {
                                "SetSystemKeySchema": {
                                    "required": [
                                        "key", 
                                        "value"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "key": {
                                            "type": "string", 
                                            "description": "System key to set", 
                                            "title": "key"
                                        }, 
                                        "value": {
                                            "type": "array", 
                                            "description": "Key value", 
                                            "title": "value"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/SetSystemKeySchema"
                        }, 
                        "parameters": [
                            [
                                "key"
                            ], 
                            [
                                "value"
                            ]
                        ], 
                        "signature": "set_system_key(key: 'unicode', value: typing.Union[NoneType, int, str, typing.Dict, typing.List])"
                    }, 
                    "formatted": "signature: 'set_system_key(key: ''unicode'', value: typing.Union[NoneType, int, str,\n  typing.Dict, typing.List])'\ndoc: 'Set the value of a system key. System keys are used internally and cannot\n\n  be retrieved directly.\n\n\n  Parameters:\n\n  :key: The system key to set.\n\n  :value: The value to set.'\nschema:\n  $ref: '#/definitions/SetSystemKeySchema'\n  definitions:\n    SetSystemKeySchema:\n      properties:\n        key:\n          description: System key to set\n          title: key\n          type: string\n        value:\n          description: Key value\n          title: value\n          type: array\n      required:\n      - key\n      - value\n      type: object\nparameters:\n- - key\n- - value"
                }, 
                "delete_system_key": {
                    "detailed": {
                        "doc": "Delete a system key. System keys are used internally and cannot be\nretrieved directly.\n\nParameters\n:key: The system key to delete.\n\nReturns the number of system keys deleted (0 or 1).", 
                        "schema": {
                            "definitions": {
                                "DeleteSystemKeySchema": {
                                    "required": [
                                        "key"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "key": {
                                            "type": "string", 
                                            "description": "System key to delete", 
                                            "title": "key"
                                        }
                                    }
                                }
                            }, 
                            "$ref": "#/definitions/DeleteSystemKeySchema"
                        }, 
                        "parameters": [
                            [
                                "key"
                            ]
                        ], 
                        "signature": "delete_system_key(key: 'unicode')"
                    }, 
                    "formatted": "signature: 'delete_system_key(key: ''unicode'')'\ndoc: 'Delete a system key. System keys are used internally and cannot be\n\n  retrieved directly.\n\n\n  Parameters\n\n  :key: The system key to delete.\n\n\n  Returns the number of system keys deleted (0 or 1).'\nschema:\n  $ref: '#/definitions/DeleteSystemKeySchema'\n  definitions:\n    DeleteSystemKeySchema:\n      properties:\n        key:\n          description: System key to delete\n          title: key\n          type: string\n      required:\n      - key\n      type: object\nparameters:\n- - key"
                }, 
                "__doc__": "Key/value store API"
            }
        }, 
        "errors": {
            "INVALID_PARAMS": {
                "MESSAGE": "Invalid method parameter(s).", 
                "CODE": 3002
            }, 
            "SERVER_ERROR": {
                "MESSAGE": "Server Error", 
                "CODE": 5500
            }, 
            "RESOURCE_CONFLICT": {
                "MESSAGE": "Conflicting resource", 
                "CODE": 4009
            }, 
            "NOT_ENOUGH_PERMISSIONS": {
                "MESSAGE": "The current user does not have the required permissions to access the resource", 
                "CODE": 3005
            }, 
            "PARSE_ERROR": {
                "MESSAGE": "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.", 
                "CODE": 1000
            }, 
            "RESOURCE_IN_PROCESSING": {
                "MESSAGE": "The resource exists / is available but it's still being processed.", 
                "CODE": 4002
            }, 
            "STORAGE_BACKEND_ERROR": {
                "MESSAGE": "Data storage offline. Please retry later.", 
                "CODE": 5300
            }, 
            "INVALID_REQUEST": {
                "MESSAGE": "The JSON sent is not a valid Request object.", 
                "CODE": 2000
            }, 
            "RESOURCE_NOT_FOUND": {
                "MESSAGE": "The resource does not exist / is not available.", 
                "CODE": 4000
            }, 
            "errorcode": {
                "4260": {
                    "MESSAGE": "This API version is disabled.  To select another version set `X-RaaS-RPC-Version`if using the REST-RPC bridge, or `rpc_api_version` if connecting with the Python client.", 
                    "NAME": "UPGRADE_REQUIRED"
                }, 
                "4240": {
                    "MESSAGE": "Unwilling to proceed. Failed dependency constrains.", 
                    "NAME": "FAILED_DEPENDENCY"
                }, 
                "3005": {
                    "MESSAGE": "The current user does not have the required permissions to access the resource", 
                    "NAME": "NOT_ENOUGH_PERMISSIONS"
                }, 
                "3004": {
                    "MESSAGE": "Request validation failure.", 
                    "NAME": "VALIDATION_FAILURE"
                }, 
                "3001": {
                    "MESSAGE": "The RPC method does not exist / is not available.", 
                    "NAME": "RPC_METHOD_NOT_FOUND"
                }, 
                "3000": {
                    "MESSAGE": "The RPC resource does not exist / is not available.", 
                    "NAME": "RPC_RESOURCE_NOT_FOUND"
                }, 
                "3003": {
                    "MESSAGE": "Missing method parameter(s).", 
                    "NAME": "MISSING_PARAMS"
                }, 
                "3002": {
                    "MESSAGE": "Invalid method parameter(s).", 
                    "NAME": "INVALID_PARAMS"
                }, 
                "5500": {
                    "MESSAGE": "Server Error", 
                    "NAME": "SERVER_ERROR"
                }, 
                "4009": {
                    "MESSAGE": "Conflicting resource", 
                    "NAME": "RESOURCE_CONFLICT"
                }, 
                "6000": {
                    "MESSAGE": "SecOps Content Error", 
                    "NAME": "SECOPS_CONTENT_ERROR"
                }, 
                "4000": {
                    "MESSAGE": "The resource does not exist / is not available.", 
                    "NAME": "RESOURCE_NOT_FOUND"
                }, 
                "4001": {
                    "MESSAGE": "The resource already exists / is already available.", 
                    "NAME": "RESOURCE_EXISTS"
                }, 
                "4002": {
                    "MESSAGE": "The resource exists / is available but it's still being processed.", 
                    "NAME": "RESOURCE_IN_PROCESSING"
                }, 
                "4003": {
                    "MESSAGE": "The resource already exists and is already processed.", 
                    "NAME": "RESOURCE_ALREADY_PROCESSED"
                }, 
                "4004": {
                    "MESSAGE": "An error occurred while interacting with the resource backend", 
                    "NAME": "RESOURCE_BACKEND_ERROR"
                }, 
                "4006": {
                    "MESSAGE": "Invalid master key auth", 
                    "NAME": "MASTER_KEY_AUTH_FAILED"
                }, 
                "5000": {
                    "MESSAGE": "Internal Error", 
                    "NAME": "INTERNAL_ERROR"
                }, 
                "5400": {
                    "MESSAGE": "External authentication offline. Please retry later.", 
                    "NAME": "EXTERNAL_AUTH_BACKEND_ERROR"
                }, 
                "5300": {
                    "MESSAGE": "Data storage offline. Please retry later.", 
                    "NAME": "STORAGE_BACKEND_ERROR"
                }, 
                "2000": {
                    "MESSAGE": "The JSON sent is not a valid Request object.", 
                    "NAME": "INVALID_REQUEST"
                }, 
                "1000": {
                    "MESSAGE": "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.", 
                    "NAME": "PARSE_ERROR"
                }
            }, 
            "MISSING_PARAMS": {
                "MESSAGE": "Missing method parameter(s).", 
                "CODE": 3003
            }, 
            "VALIDATION_FAILURE": {
                "MESSAGE": "Request validation failure.", 
                "CODE": 3004
            }, 
            "RPC_METHOD_NOT_FOUND": {
                "MESSAGE": "The RPC method does not exist / is not available.", 
                "CODE": 3001
            }, 
            "EXTERNAL_AUTH_BACKEND_ERROR": {
                "MESSAGE": "External authentication offline. Please retry later.", 
                "CODE": 5400
            }, 
            "RESOURCE_ALREADY_PROCESSED": {
                "MESSAGE": "The resource already exists and is already processed.", 
                "CODE": 4003
            }, 
            "RPC_RESOURCE_NOT_FOUND": {
                "MESSAGE": "The RPC resource does not exist / is not available.", 
                "CODE": 3000
            }, 
            "FAILED_DEPENDENCY": {
                "MESSAGE": "Unwilling to proceed. Failed dependency constrains.", 
                "CODE": 4240
            }, 
            "INTERNAL_ERROR": {
                "MESSAGE": "Internal Error", 
                "CODE": 5000
            }, 
            "RESOURCE_EXISTS": {
                "MESSAGE": "The resource already exists / is already available.", 
                "CODE": 4001
            }, 
            "SECOPS_CONTENT_ERROR": {
                "MESSAGE": "SecOps Content Error", 
                "CODE": 6000
            }, 
            "RESOURCE_BACKEND_ERROR": {
                "MESSAGE": "An error occurred while interacting with the resource backend", 
                "CODE": 4004
            }, 
            "UPGRADE_REQUIRED": {
                "MESSAGE": "This API version is disabled.  To select another version set `X-RaaS-RPC-Version`if using the REST-RPC bridge, or `rpc_api_version` if connecting with the Python client.", 
                "CODE": 4260
            }, 
            "MASTER_KEY_AUTH_FAILED": {
                "MESSAGE": "Invalid master key auth", 
                "CODE": 4006
            }
        }, 
        "constants": {
            "target-groups": {
                "ALL_MINIONS": {
                    "name": "All Minions", 
                    "uuid": "7f93b928-388b-11e6-b133-346895ecb8f3", 
                    "tgt": {
                        "*": {
                            "tgt_type": "compound", 
                            "tgt": "*"
                        }
                    }, 
                    "desc": ""
                }
            }, 
            "command-dispositions": [
                "ALL_MASTERS", 
                "ANY_MASTER", 
                "ALL_IN_CLUSTER", 
                "ANY_IN_CLUSTER"
            ], 
            "roles": {
                "ADMIN": {
                    "uuid": "c715e5ce-21d4-4817-b7b7-fc6a98b9073d", 
                    "name": "Administrator", 
                    "desc": null
                }, 
                "SUPERUSER": {
                    "uuid": "e2d1f8a7-add8-45ed-aa87-89f5e4084678", 
                    "name": "Superuser", 
                    "desc": null
                }, 
                "MASTER": {
                    "uuid": "66653445-d38f-4c68-b0b4-537f874644fd", 
                    "name": "Salt Master", 
                    "desc": null
                }, 
                "USER": {
                    "uuid": "faa98ba7-35c7-47e4-ac7d-c42e5e5ccad4", 
                    "name": "User", 
                    "desc": null
                }
            }, 
            "rpc-api-versions-supported": [
                "1", 
                "2", 
                "3", 
                "4", 
                "5"
            ], 
            "command-states": [
                "new", 
                "retrieved", 
                "skipped", 
                "pausing", 
                "paused", 
                "resumed", 
                "resuming", 
                "complete", 
                "stopping", 
                "stopped", 
                "disabled", 
                "failed"
            ], 
            "rpc-api-version": "5", 
            "accounts": {
                "DELETED": {
                    "username": "deleted", 
                    "uuid": "8025afa2-929f-4860-b378-658bac410abb"
                }, 
                "ROOT": {
                    "username": "root", 
                    "uuid": "80c67364-cb31-4f4b-972a-e7ea3f752bb8"
                }
            }, 
            "secops-custom-content-flags": [
                "C"
            ], 
            "audit-event-types": [
                "system", 
                "auth", 
                "rpc", 
                "task"
            ], 
            "access-types": [
                "discover", 
                "read", 
                "write", 
                "delete", 
                "run"
            ], 
            "permissions": [
                "audit-read", 
                "background_jobs-read", 
                "cmd-read", 
                "cmd-run", 
                "cmd-runner-run", 
                "cmd-ssh-delete", 
                "cmd-ssh-read", 
                "cmd-ssh-run", 
                "cmd-ssh-write", 
                "cmd-wheel-run", 
                "cmd-write", 
                "fs-delete", 
                "fs-read", 
                "fs-write", 
                "group-delete", 
                "group-read", 
                "group-write", 
                "job-delete", 
                "job-read", 
                "job-run", 
                "job-write", 
                "license-read", 
                "master-config-delete", 
                "master-config-read", 
                "master-config-write", 
                "master-delete", 
                "master-fs-read", 
                "master-read", 
                "master-write", 
                "metadata-auth-read", 
                "metadata-auth-write", 
                "minion-delete", 
                "minion-read", 
                "minion-write", 
                "pillar-delete", 
                "pillar-read", 
                "pillar-write", 
                "returner-delete", 
                "returner-read", 
                "returner-write", 
                "role-delete", 
                "role-read", 
                "role-write", 
                "schedule-delete", 
                "schedule-read", 
                "schedule-write", 
                "sec-assessment-run", 
                "sec-custom-delete", 
                "sec-custom-read", 
                "sec-custom-write", 
                "sec-ingestcustom-run", 
                "sec-ingestsaltstack-run", 
                "sec-policy-delete", 
                "sec-policy-read", 
                "sec-policy-write", 
                "sec-remediation-run", 
                "superuser", 
                "target-allminions-run", 
                "target-delete", 
                "target-read", 
                "target-write", 
                "user-delete", 
                "user-read", 
                "user-write", 
                "vman-assessment-run", 
                "vman-ingestsaltstack-run", 
                "vman-policy-delete", 
                "vman-policy-read", 
                "vman-policy-write", 
                "vman-remediation-run"
            ], 
            "timezone-names": [
                "Africa/Abidjan", 
                "Africa/Accra", 
                "Africa/Addis_Ababa", 
                "Africa/Algiers", 
                "Africa/Asmara", 
                "Africa/Asmera", 
                "Africa/Bamako", 
                "Africa/Bangui", 
                "Africa/Banjul", 
                "Africa/Bissau", 
                "Africa/Blantyre", 
                "Africa/Brazzaville", 
                "Africa/Bujumbura", 
                "Africa/Cairo", 
                "Africa/Casablanca", 
                "Africa/Ceuta", 
                "Africa/Conakry", 
                "Africa/Dakar", 
                "Africa/Dar_es_Salaam", 
                "Africa/Djibouti", 
                "Africa/Douala", 
                "Africa/El_Aaiun", 
                "Africa/Freetown", 
                "Africa/Gaborone", 
                "Africa/Harare", 
                "Africa/Johannesburg", 
                "Africa/Juba", 
                "Africa/Kampala", 
                "Africa/Khartoum", 
                "Africa/Kigali", 
                "Africa/Kinshasa", 
                "Africa/Lagos", 
                "Africa/Libreville", 
                "Africa/Lome", 
                "Africa/Luanda", 
                "Africa/Lubumbashi", 
                "Africa/Lusaka", 
                "Africa/Malabo", 
                "Africa/Maputo", 
                "Africa/Maseru", 
                "Africa/Mbabane", 
                "Africa/Mogadishu", 
                "Africa/Monrovia", 
                "Africa/Nairobi", 
                "Africa/Ndjamena", 
                "Africa/Niamey", 
                "Africa/Nouakchott", 
                "Africa/Ouagadougou", 
                "Africa/Porto-Novo", 
                "Africa/Sao_Tome", 
                "Africa/Timbuktu", 
                "Africa/Tripoli", 
                "Africa/Tunis", 
                "Africa/Windhoek", 
                "America/Adak", 
                "America/Anchorage", 
                "America/Anguilla", 
                "America/Antigua", 
                "America/Araguaina", 
                "America/Argentina/Buenos_Aires", 
                "America/Argentina/Catamarca", 
                "America/Argentina/ComodRivadavia", 
                "America/Argentina/Cordoba", 
                "America/Argentina/Jujuy", 
                "America/Argentina/La_Rioja", 
                "America/Argentina/Mendoza", 
                "America/Argentina/Rio_Gallegos", 
                "America/Argentina/Salta", 
                "America/Argentina/San_Juan", 
                "America/Argentina/San_Luis", 
                "America/Argentina/Tucuman", 
                "America/Argentina/Ushuaia", 
                "America/Aruba", 
                "America/Asuncion", 
                "America/Atikokan", 
                "America/Atka", 
                "America/Bahia", 
                "America/Bahia_Banderas", 
                "America/Barbados", 
                "America/Belem", 
                "America/Belize", 
                "America/Blanc-Sablon", 
                "America/Boa_Vista", 
                "America/Bogota", 
                "America/Boise", 
                "America/Buenos_Aires", 
                "America/Cambridge_Bay", 
                "America/Campo_Grande", 
                "America/Cancun", 
                "America/Caracas", 
                "America/Catamarca", 
                "America/Cayenne", 
                "America/Cayman", 
                "America/Chicago", 
                "America/Chihuahua", 
                "America/Coral_Harbour", 
                "America/Cordoba", 
                "America/Costa_Rica", 
                "America/Creston", 
                "America/Cuiaba", 
                "America/Curacao", 
                "America/Danmarkshavn", 
                "America/Dawson", 
                "America/Dawson_Creek", 
                "America/Denver", 
                "America/Detroit", 
                "America/Dominica", 
                "America/Edmonton", 
                "America/Eirunepe", 
                "America/El_Salvador", 
                "America/Ensenada", 
                "America/Fort_Nelson", 
                "America/Fort_Wayne", 
                "America/Fortaleza", 
                "America/Glace_Bay", 
                "America/Godthab", 
                "America/Goose_Bay", 
                "America/Grand_Turk", 
                "America/Grenada", 
                "America/Guadeloupe", 
                "America/Guatemala", 
                "America/Guayaquil", 
                "America/Guyana", 
                "America/Halifax", 
                "America/Havana", 
                "America/Hermosillo", 
                "America/Indiana/Indianapolis", 
                "America/Indiana/Knox", 
                "America/Indiana/Marengo", 
                "America/Indiana/Petersburg", 
                "America/Indiana/Tell_City", 
                "America/Indiana/Vevay", 
                "America/Indiana/Vincennes", 
                "America/Indiana/Winamac", 
                "America/Indianapolis", 
                "America/Inuvik", 
                "America/Iqaluit", 
                "America/Jamaica", 
                "America/Jujuy", 
                "America/Juneau", 
                "America/Kentucky/Louisville", 
                "America/Kentucky/Monticello", 
                "America/Knox_IN", 
                "America/Kralendijk", 
                "America/La_Paz", 
                "America/Lima", 
                "America/Los_Angeles", 
                "America/Louisville", 
                "America/Lower_Princes", 
                "America/Maceio", 
                "America/Managua", 
                "America/Manaus", 
                "America/Marigot", 
                "America/Martinique", 
                "America/Matamoros", 
                "America/Mazatlan", 
                "America/Mendoza", 
                "America/Menominee", 
                "America/Merida", 
                "America/Metlakatla", 
                "America/Mexico_City", 
                "America/Miquelon", 
                "America/Moncton", 
                "America/Monterrey", 
                "America/Montevideo", 
                "America/Montreal", 
                "America/Montserrat", 
                "America/Nassau", 
                "America/New_York", 
                "America/Nipigon", 
                "America/Nome", 
                "America/Noronha", 
                "America/North_Dakota/Beulah", 
                "America/North_Dakota/Center", 
                "America/North_Dakota/New_Salem", 
                "America/Ojinaga", 
                "America/Panama", 
                "America/Pangnirtung", 
                "America/Paramaribo", 
                "America/Phoenix", 
                "America/Port-au-Prince", 
                "America/Port_of_Spain", 
                "America/Porto_Acre", 
                "America/Porto_Velho", 
                "America/Puerto_Rico", 
                "America/Punta_Arenas", 
                "America/Rainy_River", 
                "America/Rankin_Inlet", 
                "America/Recife", 
                "America/Regina", 
                "America/Resolute", 
                "America/Rio_Branco", 
                "America/Rosario", 
                "America/Santa_Isabel", 
                "America/Santarem", 
                "America/Santiago", 
                "America/Santo_Domingo", 
                "America/Sao_Paulo", 
                "America/Scoresbysund", 
                "America/Shiprock", 
                "America/Sitka", 
                "America/St_Barthelemy", 
                "America/St_Johns", 
                "America/St_Kitts", 
                "America/St_Lucia", 
                "America/St_Thomas", 
                "America/St_Vincent", 
                "America/Swift_Current", 
                "America/Tegucigalpa", 
                "America/Thule", 
                "America/Thunder_Bay", 
                "America/Tijuana", 
                "America/Toronto", 
                "America/Tortola", 
                "America/Vancouver", 
                "America/Virgin", 
                "America/Whitehorse", 
                "America/Winnipeg", 
                "America/Yakutat", 
                "America/Yellowknife", 
                "Antarctica/Casey", 
                "Antarctica/Davis", 
                "Antarctica/DumontDUrville", 
                "Antarctica/Macquarie", 
                "Antarctica/Mawson", 
                "Antarctica/McMurdo", 
                "Antarctica/Palmer", 
                "Antarctica/Rothera", 
                "Antarctica/South_Pole", 
                "Antarctica/Syowa", 
                "Antarctica/Troll", 
                "Antarctica/Vostok", 
                "Arctic/Longyearbyen", 
                "Asia/Aden", 
                "Asia/Almaty", 
                "Asia/Amman", 
                "Asia/Anadyr", 
                "Asia/Aqtau", 
                "Asia/Aqtobe", 
                "Asia/Ashgabat", 
                "Asia/Ashkhabad", 
                "Asia/Atyrau", 
                "Asia/Baghdad", 
                "Asia/Bahrain", 
                "Asia/Baku", 
                "Asia/Bangkok", 
                "Asia/Barnaul", 
                "Asia/Beirut", 
                "Asia/Bishkek", 
                "Asia/Brunei", 
                "Asia/Calcutta", 
                "Asia/Chita", 
                "Asia/Choibalsan", 
                "Asia/Chongqing", 
                "Asia/Chungking", 
                "Asia/Colombo", 
                "Asia/Dacca", 
                "Asia/Damascus", 
                "Asia/Dhaka", 
                "Asia/Dili", 
                "Asia/Dubai", 
                "Asia/Dushanbe", 
                "Asia/Famagusta", 
                "Asia/Gaza", 
                "Asia/Harbin", 
                "Asia/Hebron", 
                "Asia/Ho_Chi_Minh", 
                "Asia/Hong_Kong", 
                "Asia/Hovd", 
                "Asia/Irkutsk", 
                "Asia/Istanbul", 
                "Asia/Jakarta", 
                "Asia/Jayapura", 
                "Asia/Jerusalem", 
                "Asia/Kabul", 
                "Asia/Kamchatka", 
                "Asia/Karachi", 
                "Asia/Kashgar", 
                "Asia/Kathmandu", 
                "Asia/Katmandu", 
                "Asia/Khandyga", 
                "Asia/Kolkata", 
                "Asia/Krasnoyarsk", 
                "Asia/Kuala_Lumpur", 
                "Asia/Kuching", 
                "Asia/Kuwait", 
                "Asia/Macao", 
                "Asia/Macau", 
                "Asia/Magadan", 
                "Asia/Makassar", 
                "Asia/Manila", 
                "Asia/Muscat", 
                "Asia/Nicosia", 
                "Asia/Novokuznetsk", 
                "Asia/Novosibirsk", 
                "Asia/Omsk", 
                "Asia/Oral", 
                "Asia/Phnom_Penh", 
                "Asia/Pontianak", 
                "Asia/Pyongyang", 
                "Asia/Qatar", 
                "Asia/Qyzylorda", 
                "Asia/Rangoon", 
                "Asia/Riyadh", 
                "Asia/Saigon", 
                "Asia/Sakhalin", 
                "Asia/Samarkand", 
                "Asia/Seoul", 
                "Asia/Shanghai", 
                "Asia/Singapore", 
                "Asia/Srednekolymsk", 
                "Asia/Taipei", 
                "Asia/Tashkent", 
                "Asia/Tbilisi", 
                "Asia/Tehran", 
                "Asia/Tel_Aviv", 
                "Asia/Thimbu", 
                "Asia/Thimphu", 
                "Asia/Tokyo", 
                "Asia/Tomsk", 
                "Asia/Ujung_Pandang", 
                "Asia/Ulaanbaatar", 
                "Asia/Ulan_Bator", 
                "Asia/Urumqi", 
                "Asia/Ust-Nera", 
                "Asia/Vientiane", 
                "Asia/Vladivostok", 
                "Asia/Yakutsk", 
                "Asia/Yangon", 
                "Asia/Yekaterinburg", 
                "Asia/Yerevan", 
                "Atlantic/Azores", 
                "Atlantic/Bermuda", 
                "Atlantic/Canary", 
                "Atlantic/Cape_Verde", 
                "Atlantic/Faeroe", 
                "Atlantic/Faroe", 
                "Atlantic/Jan_Mayen", 
                "Atlantic/Madeira", 
                "Atlantic/Reykjavik", 
                "Atlantic/South_Georgia", 
                "Atlantic/St_Helena", 
                "Atlantic/Stanley", 
                "Australia/ACT", 
                "Australia/Adelaide", 
                "Australia/Brisbane", 
                "Australia/Broken_Hill", 
                "Australia/Canberra", 
                "Australia/Currie", 
                "Australia/Darwin", 
                "Australia/Eucla", 
                "Australia/Hobart", 
                "Australia/LHI", 
                "Australia/Lindeman", 
                "Australia/Lord_Howe", 
                "Australia/Melbourne", 
                "Australia/NSW", 
                "Australia/North", 
                "Australia/Perth", 
                "Australia/Queensland", 
                "Australia/South", 
                "Australia/Sydney", 
                "Australia/Tasmania", 
                "Australia/Victoria", 
                "Australia/West", 
                "Australia/Yancowinna", 
                "Brazil/Acre", 
                "Brazil/DeNoronha", 
                "Brazil/East", 
                "Brazil/West", 
                "CET", 
                "CST6CDT", 
                "Canada/Atlantic", 
                "Canada/Central", 
                "Canada/Eastern", 
                "Canada/Mountain", 
                "Canada/Newfoundland", 
                "Canada/Pacific", 
                "Canada/Saskatchewan", 
                "Canada/Yukon", 
                "Chile/Continental", 
                "Chile/EasterIsland", 
                "Cuba", 
                "EET", 
                "EST", 
                "EST5EDT", 
                "Egypt", 
                "Eire", 
                "Etc/GMT", 
                "Etc/GMT+0", 
                "Etc/GMT+1", 
                "Etc/GMT+10", 
                "Etc/GMT+11", 
                "Etc/GMT+12", 
                "Etc/GMT+2", 
                "Etc/GMT+3", 
                "Etc/GMT+4", 
                "Etc/GMT+5", 
                "Etc/GMT+6", 
                "Etc/GMT+7", 
                "Etc/GMT+8", 
                "Etc/GMT+9", 
                "Etc/GMT-0", 
                "Etc/GMT-1", 
                "Etc/GMT-10", 
                "Etc/GMT-11", 
                "Etc/GMT-12", 
                "Etc/GMT-13", 
                "Etc/GMT-14", 
                "Etc/GMT-2", 
                "Etc/GMT-3", 
                "Etc/GMT-4", 
                "Etc/GMT-5", 
                "Etc/GMT-6", 
                "Etc/GMT-7", 
                "Etc/GMT-8", 
                "Etc/GMT-9", 
                "Etc/GMT0", 
                "Etc/Greenwich", 
                "Etc/UCT", 
                "Etc/UTC", 
                "Etc/Universal", 
                "Etc/Zulu", 
                "Europe/Amsterdam", 
                "Europe/Andorra", 
                "Europe/Astrakhan", 
                "Europe/Athens", 
                "Europe/Belfast", 
                "Europe/Belgrade", 
                "Europe/Berlin", 
                "Europe/Bratislava", 
                "Europe/Brussels", 
                "Europe/Bucharest", 
                "Europe/Budapest", 
                "Europe/Busingen", 
                "Europe/Chisinau", 
                "Europe/Copenhagen", 
                "Europe/Dublin", 
                "Europe/Gibraltar", 
                "Europe/Guernsey", 
                "Europe/Helsinki", 
                "Europe/Isle_of_Man", 
                "Europe/Istanbul", 
                "Europe/Jersey", 
                "Europe/Kaliningrad", 
                "Europe/Kiev", 
                "Europe/Kirov", 
                "Europe/Lisbon", 
                "Europe/Ljubljana", 
                "Europe/London", 
                "Europe/Luxembourg", 
                "Europe/Madrid", 
                "Europe/Malta", 
                "Europe/Mariehamn", 
                "Europe/Minsk", 
                "Europe/Monaco", 
                "Europe/Moscow", 
                "Europe/Nicosia", 
                "Europe/Oslo", 
                "Europe/Paris", 
                "Europe/Podgorica", 
                "Europe/Prague", 
                "Europe/Riga", 
                "Europe/Rome", 
                "Europe/Samara", 
                "Europe/San_Marino", 
                "Europe/Sarajevo", 
                "Europe/Saratov", 
                "Europe/Simferopol", 
                "Europe/Skopje", 
                "Europe/Sofia", 
                "Europe/Stockholm", 
                "Europe/Tallinn", 
                "Europe/Tirane", 
                "Europe/Tiraspol", 
                "Europe/Ulyanovsk", 
                "Europe/Uzhgorod", 
                "Europe/Vaduz", 
                "Europe/Vatican", 
                "Europe/Vienna", 
                "Europe/Vilnius", 
                "Europe/Volgograd", 
                "Europe/Warsaw", 
                "Europe/Zagreb", 
                "Europe/Zaporozhye", 
                "Europe/Zurich", 
                "GB", 
                "GB-Eire", 
                "GMT", 
                "GMT+0", 
                "GMT-0", 
                "GMT0", 
                "Greenwich", 
                "HST", 
                "Hongkong", 
                "Iceland", 
                "Indian/Antananarivo", 
                "Indian/Chagos", 
                "Indian/Christmas", 
                "Indian/Cocos", 
                "Indian/Comoro", 
                "Indian/Kerguelen", 
                "Indian/Mahe", 
                "Indian/Maldives", 
                "Indian/Mauritius", 
                "Indian/Mayotte", 
                "Indian/Reunion", 
                "Iran", 
                "Israel", 
                "Jamaica", 
                "Japan", 
                "Kwajalein", 
                "Libya", 
                "MET", 
                "MST", 
                "MST7MDT", 
                "Mexico/BajaNorte", 
                "Mexico/BajaSur", 
                "Mexico/General", 
                "NZ", 
                "NZ-CHAT", 
                "Navajo", 
                "PRC", 
                "PST8PDT", 
                "Pacific/Apia", 
                "Pacific/Auckland", 
                "Pacific/Bougainville", 
                "Pacific/Chatham", 
                "Pacific/Chuuk", 
                "Pacific/Easter", 
                "Pacific/Efate", 
                "Pacific/Enderbury", 
                "Pacific/Fakaofo", 
                "Pacific/Fiji", 
                "Pacific/Funafuti", 
                "Pacific/Galapagos", 
                "Pacific/Gambier", 
                "Pacific/Guadalcanal", 
                "Pacific/Guam", 
                "Pacific/Honolulu", 
                "Pacific/Johnston", 
                "Pacific/Kiritimati", 
                "Pacific/Kosrae", 
                "Pacific/Kwajalein", 
                "Pacific/Majuro", 
                "Pacific/Marquesas", 
                "Pacific/Midway", 
                "Pacific/Nauru", 
                "Pacific/Niue", 
                "Pacific/Norfolk", 
                "Pacific/Noumea", 
                "Pacific/Pago_Pago", 
                "Pacific/Palau", 
                "Pacific/Pitcairn", 
                "Pacific/Pohnpei", 
                "Pacific/Ponape", 
                "Pacific/Port_Moresby", 
                "Pacific/Rarotonga", 
                "Pacific/Saipan", 
                "Pacific/Samoa", 
                "Pacific/Tahiti", 
                "Pacific/Tarawa", 
                "Pacific/Tongatapu", 
                "Pacific/Truk", 
                "Pacific/Wake", 
                "Pacific/Wallis", 
                "Pacific/Yap", 
                "Poland", 
                "Portugal", 
                "ROC", 
                "ROK", 
                "Singapore", 
                "Turkey", 
                "UCT", 
                "US/Alaska", 
                "US/Aleutian", 
                "US/Arizona", 
                "US/Central", 
                "US/East-Indiana", 
                "US/Eastern", 
                "US/Hawaii", 
                "US/Indiana-Starke", 
                "US/Michigan", 
                "US/Mountain", 
                "US/Pacific", 
                "US/Samoa", 
                "UTC", 
                "Universal", 
                "W-SU", 
                "WET", 
                "Zulu"
            ], 
            "command-states-futures": [
                "skipping", 
                "disabled", 
                "scheduled"
            ]
        }
    }, 
    null, 
    []
]
